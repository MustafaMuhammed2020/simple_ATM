
ATM_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000144c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000014e  00800060  0000144c  000014e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  008001ae  008001ae  0000162e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000162e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001660  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000210  00000000  00000000  0000169c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000029d2  00000000  00000000  000018ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ccd  00000000  00000000  0000427e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000016d7  00000000  00000000  00004f4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000418  00000000  00000000  00006624  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b59  00000000  00000000  00006a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f7c  00000000  00000000  00007595  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000180  00000000  00000000  00008511  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e4       	ldi	r30, 0x4C	; 76
      68:	f4 e1       	ldi	r31, 0x14	; 20
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ae 3a       	cpi	r26, 0xAE	; 174
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	ae ea       	ldi	r26, 0xAE	; 174
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 3b       	cpi	r26, 0xB9	; 185
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 dd 05 	call	0xbba	; 0xbba <main>
      8a:	0c 94 24 0a 	jmp	0x1448	; 0x1448 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <APP_init>:

/** INITIALIZATION FUNCTION **/
void APP_init()
{
	//Button_init(BUTTON1_PORT , BUTTON1_PIN); /** ZERO/SET BUTTON **/
	Button_init(BUTTON2_PORT , BUTTON2_PIN); /** START TRIGGER FROM CARD ECU **/
      92:	60 e0       	ldi	r22, 0x00	; 0
      94:	80 e0       	ldi	r24, 0x00	; 0
      96:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <Button_init>
	
	BUZZ_init(); /** ALARM INITIALIZATION **/
      9a:	0e 94 1f 03 	call	0x63e	; 0x63e <BUZZ_init>
	BUZZ_off();  /** ALARM IS OFF **/
      9e:	0e 94 2b 03 	call	0x656	; 0x656 <BUZZ_off>
	
	DIO_setpindir(DIO_PORTB , DIO_PIN0 , DIO_PIN_OUTPUT); /** TRIGGER PIN TO START COMMUNICATION **/
      a2:	41 e0       	ldi	r20, 0x01	; 1
      a4:	60 e0       	ldi	r22, 0x00	; 0
      a6:	81 e0       	ldi	r24, 0x01	; 1
      a8:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <DIO_setpindir>
	DIO_setpinvalue(DIO_PORTB , DIO_PIN0 , DIO_PIN_LOW);  /** INITIAL VALUE IS ZERO **/
      ac:	40 e0       	ldi	r20, 0x00	; 0
      ae:	60 e0       	ldi	r22, 0x00	; 0
      b0:	81 e0       	ldi	r24, 0x01	; 1
      b2:	0e 94 69 06 	call	0xcd2	; 0xcd2 <DIO_setpinvalue>
	
	TMR0_init(); /** TIMER 0 INITIALIZATION **/
      b6:	0e 94 9c 07 	call	0xf38	; 0xf38 <TMR0_init>
	
	SPI_initslave(); /** INITIALIZE SPI MASTER **/
      ba:	0e 94 60 07 	call	0xec0	; 0xec0 <SPI_initslave>
	
	KEYPAD_init(); /** INITIALIZE THE KEYPAD **/
      be:	0e 94 31 03 	call	0x662	; 0x662 <KEYPAD_init>
	
	LCD_init();  /** INITIALIZE LCD **/
      c2:	0e 94 84 04 	call	0x908	; 0x908 <LCD_init>
	TMR0_delayms(20); /** SET DELAY FOR LCD INITILIZATION **/
      c6:	64 e1       	ldi	r22, 0x14	; 20
      c8:	70 e0       	ldi	r23, 0x00	; 0
      ca:	80 e0       	ldi	r24, 0x00	; 0
      cc:	90 e0       	ldi	r25, 0x00	; 0
      ce:	0e 94 c3 07 	call	0xf86	; 0xf86 <TMR0_delayms>
	
	LCD_writecustomchar(u8_g_bell , bell); /** STORE THE BELL SHAPE IN CGRAM OF LCD **/
      d2:	60 e0       	ldi	r22, 0x00	; 0
      d4:	82 e6       	ldi	r24, 0x62	; 98
      d6:	90 e0       	ldi	r25, 0x00	; 0
      d8:	0e 94 37 05 	call	0xa6e	; 0xa6e <LCD_writecustomchar>
	
	LCD_writestr(" WELCOME TO ATM !"); /** DISPLAY WELCOME MESSAGE FOR 1 SEC **/
      dc:	83 ed       	ldi	r24, 0xD3	; 211
      de:	90 e0       	ldi	r25, 0x00	; 0
      e0:	0e 94 0c 05 	call	0xa18	; 0xa18 <LCD_writestr>
	TMR0_delayms(500);
      e4:	64 ef       	ldi	r22, 0xF4	; 244
      e6:	71 e0       	ldi	r23, 0x01	; 1
      e8:	80 e0       	ldi	r24, 0x00	; 0
      ea:	90 e0       	ldi	r25, 0x00	; 0
      ec:	0e 94 c3 07 	call	0xf86	; 0xf86 <TMR0_delayms>
	
	LCD_sendcmd(LCD_CLEAR);
      f0:	81 e0       	ldi	r24, 0x01	; 1
      f2:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_sendcmd>
	TMR0_delayms(20);
      f6:	64 e1       	ldi	r22, 0x14	; 20
      f8:	70 e0       	ldi	r23, 0x00	; 0
      fa:	80 e0       	ldi	r24, 0x00	; 0
      fc:	90 e0       	ldi	r25, 0x00	; 0
      fe:	0e 94 c3 07 	call	0xf86	; 0xf86 <TMR0_delayms>
	
	LCD_goto(0 ,1);
     102:	61 e0       	ldi	r22, 0x01	; 1
     104:	80 e0       	ldi	r24, 0x00	; 0
     106:	0e 94 1f 05 	call	0xa3e	; 0xa3e <LCD_goto>
	LCD_writestr("Insert A Card"); /** ASK USER TO INSERT HIS CARD **/
     10a:	85 ee       	ldi	r24, 0xE5	; 229
     10c:	90 e0       	ldi	r25, 0x00	; 0
     10e:	0e 94 0c 05 	call	0xa18	; 0xa18 <LCD_writestr>
	
	do  /** WAIT FOR THE CARD ECU TRIGGER **/
	{
		Is_pressed(BUTTON2_PORT , BUTTON2_PIN , &triggerstatus);
     112:	40 eb       	ldi	r20, 0xB0	; 176
     114:	51 e0       	ldi	r21, 0x01	; 1
     116:	60 e0       	ldi	r22, 0x00	; 0
     118:	80 e0       	ldi	r24, 0x00	; 0
     11a:	0e 94 00 03 	call	0x600	; 0x600 <Is_pressed>
	} while (triggerstatus == 0);
     11e:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <triggerstatus>
     122:	88 23       	and	r24, r24
     124:	b1 f3       	breq	.-20     	; 0x112 <APP_init+0x80>
	
	/** WAIT UNTILL TRIGGER ACTION FROM THE CARD ECU **/
	LCD_sendcmd(LCD_CLEAR); /** CLEAR THE LCD **/
     126:	81 e0       	ldi	r24, 0x01	; 1
     128:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_sendcmd>
	TMR0_delayms(20);
     12c:	64 e1       	ldi	r22, 0x14	; 20
     12e:	70 e0       	ldi	r23, 0x00	; 0
     130:	80 e0       	ldi	r24, 0x00	; 0
     132:	90 e0       	ldi	r25, 0x00	; 0
     134:	0e 94 c3 07 	call	0xf86	; 0xf86 <TMR0_delayms>
     138:	08 95       	ret

0000013a <APP_readuserpin>:
}

/** FUNCTION TO READ USER PIN **/
void APP_readuserpin()
{
	LCD_sendcmd(LCD_CLEAR); /** CLEAR THE LCD **/
     13a:	81 e0       	ldi	r24, 0x01	; 1
     13c:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_sendcmd>
	TMR0_delayms(20);
     140:	64 e1       	ldi	r22, 0x14	; 20
     142:	70 e0       	ldi	r23, 0x00	; 0
     144:	80 e0       	ldi	r24, 0x00	; 0
     146:	90 e0       	ldi	r25, 0x00	; 0
     148:	0e 94 c3 07 	call	0xf86	; 0xf86 <TMR0_delayms>
	
	LCD_goto(0 , 0);
     14c:	60 e0       	ldi	r22, 0x00	; 0
     14e:	80 e0       	ldi	r24, 0x00	; 0
     150:	0e 94 1f 05 	call	0xa3e	; 0xa3e <LCD_goto>
	LCD_writestr("Enter Your PIN"); /** SAK USER TO INSERT CARD PIN **/
     154:	83 ef       	ldi	r24, 0xF3	; 243
     156:	90 e0       	ldi	r25, 0x00	; 0
     158:	0e 94 0c 05 	call	0xa18	; 0xa18 <LCD_writestr>
	
	for(counter = 0 ; counter < 4 ; counter++)
     15c:	10 92 b8 01 	sts	0x01B8, r1	; 0x8001b8 <counter>
     160:	25 c0       	rjmp	.+74     	; 0x1ac <APP_readuserpin+0x72>
	{
		while ((KEYPAD_read(&u8_a_pressednum) == KEYPAD_readFail)); /** POLLING UNTILL NUMBER PRESSED **/
     162:	83 eb       	ldi	r24, 0xB3	; 179
     164:	91 e0       	ldi	r25, 0x01	; 1
     166:	0e 94 79 03 	call	0x6f2	; 0x6f2 <KEYPAD_read>
     16a:	81 30       	cpi	r24, 0x01	; 1
     16c:	d1 f3       	breq	.-12     	; 0x162 <APP_readuserpin+0x28>
		
		LCD_goto(1 , counter+4); /** DISPLAY * WITH EACH PRESSED NUMBER **/
     16e:	60 91 b8 01 	lds	r22, 0x01B8	; 0x8001b8 <counter>
     172:	6c 5f       	subi	r22, 0xFC	; 252
     174:	81 e0       	ldi	r24, 0x01	; 1
     176:	0e 94 1f 05 	call	0xa3e	; 0xa3e <LCD_goto>
		LCD_writechar('*');
     17a:	8a e2       	ldi	r24, 0x2A	; 42
     17c:	0e 94 c5 04 	call	0x98a	; 0x98a <LCD_writechar>
		
		u8_g_userpin[counter] = u8_a_pressednum ; /** STORE THE PRESSED NUMBER **/
     180:	e0 91 b8 01 	lds	r30, 0x01B8	; 0x8001b8 <counter>
     184:	f0 e0       	ldi	r31, 0x00	; 0
     186:	e6 59       	subi	r30, 0x96	; 150
     188:	ff 4f       	sbci	r31, 0xFF	; 255
     18a:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <u8_a_pressednum>
     18e:	80 83       	st	Z, r24
		TMR0_delayms(200);
     190:	68 ec       	ldi	r22, 0xC8	; 200
     192:	70 e0       	ldi	r23, 0x00	; 0
     194:	80 e0       	ldi	r24, 0x00	; 0
     196:	90 e0       	ldi	r25, 0x00	; 0
     198:	0e 94 c3 07 	call	0xf86	; 0xf86 <TMR0_delayms>
		
		u8_returnstatus = KEYPAD_readFail; /** REINITIALIZE STATE TO ACCEPT NEW NUMBER **/
     19c:	81 e0       	ldi	r24, 0x01	; 1
     19e:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <u8_returnstatus>
	TMR0_delayms(20);
	
	LCD_goto(0 , 0);
	LCD_writestr("Enter Your PIN"); /** SAK USER TO INSERT CARD PIN **/
	
	for(counter = 0 ; counter < 4 ; counter++)
     1a2:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <counter>
     1a6:	8f 5f       	subi	r24, 0xFF	; 255
     1a8:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <counter>
     1ac:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <counter>
     1b0:	84 30       	cpi	r24, 0x04	; 4
     1b2:	b8 f2       	brcs	.-82     	; 0x162 <APP_readuserpin+0x28>
		u8_returnstatus = KEYPAD_readFail; /** REINITIALIZE STATE TO ACCEPT NEW NUMBER **/
	}
	
	do /** LONG PRESS FOR 2 SECONDS ON ZERO **/
	{
		KEYPAD_read(&status); /** READ THE ZERO FROM KEYPAD **/
     1b4:	82 eb       	ldi	r24, 0xB2	; 178
     1b6:	91 e0       	ldi	r25, 0x01	; 1
     1b8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <KEYPAD_read>
		TMR0_delayms(1000);   /** DELAY FOR 2000 SECONDS    **/
     1bc:	68 ee       	ldi	r22, 0xE8	; 232
     1be:	73 e0       	ldi	r23, 0x03	; 3
     1c0:	80 e0       	ldi	r24, 0x00	; 0
     1c2:	90 e0       	ldi	r25, 0x00	; 0
     1c4:	0e 94 c3 07 	call	0xf86	; 0xf86 <TMR0_delayms>
		KEYPAD_read(&status); /** READ THE ZERO FROM KEYPAD **/
     1c8:	82 eb       	ldi	r24, 0xB2	; 178
     1ca:	91 e0       	ldi	r25, 0x01	; 1
     1cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <KEYPAD_read>
		
	} while (status != '0');
     1d0:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <status>
     1d4:	80 33       	cpi	r24, 0x30	; 48
     1d6:	71 f7       	brne	.-36     	; 0x1b4 <APP_readuserpin+0x7a>
	
}
     1d8:	08 95       	ret

000001da <APP_startcardcomm>:

/** FUNCTION TO COMMUNICATE WITH CARD ECU TO GET PIN/PAN **/
void APP_startcardcomm()
{
	/** INITIATE COMMUNICATION BETWEEN THE CARD ECU VIA TRIGGER ACTION **/
	DIO_setpinvalue(DIO_PORTB , DIO_PIN0 , DIO_PIN_HIGH);
     1da:	41 e0       	ldi	r20, 0x01	; 1
     1dc:	60 e0       	ldi	r22, 0x00	; 0
     1de:	81 e0       	ldi	r24, 0x01	; 1
     1e0:	0e 94 69 06 	call	0xcd2	; 0xcd2 <DIO_setpinvalue>
	
	SPI_receivestring(&u8_g_cardpin); /** RECEIVE THE PIN **/
     1e4:	83 e8       	ldi	r24, 0x83	; 131
     1e6:	90 e0       	ldi	r25, 0x00	; 0
     1e8:	0e 94 87 07 	call	0xf0e	; 0xf0e <SPI_receivestring>
	TMR0_delayms(30);
     1ec:	6e e1       	ldi	r22, 0x1E	; 30
     1ee:	70 e0       	ldi	r23, 0x00	; 0
     1f0:	80 e0       	ldi	r24, 0x00	; 0
     1f2:	90 e0       	ldi	r25, 0x00	; 0
     1f4:	0e 94 c3 07 	call	0xf86	; 0xf86 <TMR0_delayms>
	
	SPI_receivestring(&u8_g_cardpan); /** RECEIVE THE PAN **/
     1f8:	8f e6       	ldi	r24, 0x6F	; 111
     1fa:	90 e0       	ldi	r25, 0x00	; 0
     1fc:	0e 94 87 07 	call	0xf0e	; 0xf0e <SPI_receivestring>
	
	/** VERIFY THE USER INSERTED PIN **/
	u8_a_pinnotmatched = 1 ;
     200:	81 e0       	ldi	r24, 0x01	; 1
     202:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	while (u8_a_pintry <= 1 && u8_a_pinnotmatched != 0  ) /** CHECK PIN MATCHING FOR TWO TIMES **/
     206:	45 c0       	rjmp	.+138    	; 0x292 <APP_startcardcomm+0xb8>
	{
		u8_a_pinnotmatched = strcmp(u8_g_cardpin , u8_g_userpin); /** COMPARE THE TWO PINs **/
     208:	6a e6       	ldi	r22, 0x6A	; 106
     20a:	70 e0       	ldi	r23, 0x00	; 0
     20c:	83 e8       	ldi	r24, 0x83	; 131
     20e:	90 e0       	ldi	r25, 0x00	; 0
     210:	0e 94 1b 0a 	call	0x1436	; 0x1436 <strcmp>
     214:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		
		if (u8_a_pinnotmatched == 0) /** PIN MATCHED **/
     218:	88 23       	and	r24, r24
     21a:	09 f4       	brne	.+2      	; 0x21e <APP_startcardcomm+0x44>
     21c:	42 c0       	rjmp	.+132    	; 0x2a2 <APP_startcardcomm+0xc8>
			break ;
		}
		
		else /** PIN NOT MATCHED **/
		{
			LCD_sendcmd(LCD_CLEAR); /** CLEAR THE LCD **/
     21e:	81 e0       	ldi	r24, 0x01	; 1
     220:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_sendcmd>
			TMR0_delayms(20);
     224:	64 e1       	ldi	r22, 0x14	; 20
     226:	70 e0       	ldi	r23, 0x00	; 0
     228:	80 e0       	ldi	r24, 0x00	; 0
     22a:	90 e0       	ldi	r25, 0x00	; 0
     22c:	0e 94 c3 07 	call	0xf86	; 0xf86 <TMR0_delayms>
			
			LCD_goto(0,0);
     230:	60 e0       	ldi	r22, 0x00	; 0
     232:	80 e0       	ldi	r24, 0x00	; 0
     234:	0e 94 1f 05 	call	0xa3e	; 0xa3e <LCD_goto>
			LCD_writestr("PIN NOT MATCHED !"); /** DISPLAY MESSAGE FOR 1 SEC **/
     238:	82 e0       	ldi	r24, 0x02	; 2
     23a:	91 e0       	ldi	r25, 0x01	; 1
     23c:	0e 94 0c 05 	call	0xa18	; 0xa18 <LCD_writestr>
			TMR0_delayms(500);
     240:	64 ef       	ldi	r22, 0xF4	; 244
     242:	71 e0       	ldi	r23, 0x01	; 1
     244:	80 e0       	ldi	r24, 0x00	; 0
     246:	90 e0       	ldi	r25, 0x00	; 0
     248:	0e 94 c3 07 	call	0xf86	; 0xf86 <TMR0_delayms>
			
			LCD_sendcmd(LCD_CLEAR); /** CLEAR THE LCD **/
     24c:	81 e0       	ldi	r24, 0x01	; 1
     24e:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_sendcmd>
			TMR0_delayms(20);
     252:	64 e1       	ldi	r22, 0x14	; 20
     254:	70 e0       	ldi	r23, 0x00	; 0
     256:	80 e0       	ldi	r24, 0x00	; 0
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	0e 94 c3 07 	call	0xf86	; 0xf86 <TMR0_delayms>
			
			APP_readuserpin(); /** READ THE PIN AGAIN **/
     25e:	0e 94 9d 00 	call	0x13a	; 0x13a <APP_readuserpin>
		}
		
		u8_a_pintry++ ; /** TRY FOR MORE ATTEMPT **/
     262:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <u8_a_pintry>
     266:	8f 5f       	subi	r24, 0xFF	; 255
     268:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <u8_a_pintry>
		
		if (u8_a_pintry > 1)
     26c:	82 30       	cpi	r24, 0x02	; 2
     26e:	88 f0       	brcs	.+34     	; 0x292 <APP_startcardcomm+0xb8>
		{
			while (1)
			{
				BUZZ_on();
     270:	0e 94 25 03 	call	0x64a	; 0x64a <BUZZ_on>
				TMR0_delayms(500);
     274:	64 ef       	ldi	r22, 0xF4	; 244
     276:	71 e0       	ldi	r23, 0x01	; 1
     278:	80 e0       	ldi	r24, 0x00	; 0
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	0e 94 c3 07 	call	0xf86	; 0xf86 <TMR0_delayms>
				
				BUZZ_off();
     280:	0e 94 2b 03 	call	0x656	; 0x656 <BUZZ_off>
				TMR0_delayms(500);
     284:	64 ef       	ldi	r22, 0xF4	; 244
     286:	71 e0       	ldi	r23, 0x01	; 1
     288:	80 e0       	ldi	r24, 0x00	; 0
     28a:	90 e0       	ldi	r25, 0x00	; 0
     28c:	0e 94 c3 07 	call	0xf86	; 0xf86 <TMR0_delayms>
     290:	ef cf       	rjmp	.-34     	; 0x270 <APP_startcardcomm+0x96>
	
	SPI_receivestring(&u8_g_cardpan); /** RECEIVE THE PAN **/
	
	/** VERIFY THE USER INSERTED PIN **/
	u8_a_pinnotmatched = 1 ;
	while (u8_a_pintry <= 1 && u8_a_pinnotmatched != 0  ) /** CHECK PIN MATCHING FOR TWO TIMES **/
     292:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <u8_a_pintry>
     296:	82 30       	cpi	r24, 0x02	; 2
     298:	20 f4       	brcc	.+8      	; 0x2a2 <APP_startcardcomm+0xc8>
     29a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     29e:	81 11       	cpse	r24, r1
     2a0:	b3 cf       	rjmp	.-154    	; 0x208 <APP_startcardcomm+0x2e>
     2a2:	08 95       	ret

000002a4 <APP_getamount>:
}


/** FUNCTION TO GET THE AMOUNT OF MONEY NEEDED **/
void APP_getamount()
{
     2a4:	0f 93       	push	r16
     2a6:	1f 93       	push	r17
     2a8:	cf 93       	push	r28
     2aa:	df 93       	push	r29
	uint16_t u16_l_amout = 0 , u8_a_pos = 1000 ;
	
	LCD_sendcmd(LCD_CLEAR); /** CLEAR THE LCD **/
     2ac:	81 e0       	ldi	r24, 0x01	; 1
     2ae:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_sendcmd>
	TMR0_delayms(20);
     2b2:	64 e1       	ldi	r22, 0x14	; 20
     2b4:	70 e0       	ldi	r23, 0x00	; 0
     2b6:	80 e0       	ldi	r24, 0x00	; 0
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	0e 94 c3 07 	call	0xf86	; 0xf86 <TMR0_delayms>
	
	LCD_writestr("ENTER THE AMOUNT"); /** ASK USER TO ENTER THE AMOUNT NEEDED **/
     2be:	84 e1       	ldi	r24, 0x14	; 20
     2c0:	91 e0       	ldi	r25, 0x01	; 1
     2c2:	0e 94 0c 05 	call	0xa18	; 0xa18 <LCD_writestr>
	TMR0_delayms(200);
     2c6:	68 ec       	ldi	r22, 0xC8	; 200
     2c8:	70 e0       	ldi	r23, 0x00	; 0
     2ca:	80 e0       	ldi	r24, 0x00	; 0
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	0e 94 c3 07 	call	0xf86	; 0xf86 <TMR0_delayms>
	
	LCD_goto(1,2);
     2d2:	62 e0       	ldi	r22, 0x02	; 2
     2d4:	81 e0       	ldi	r24, 0x01	; 1
     2d6:	0e 94 1f 05 	call	0xa3e	; 0xa3e <LCD_goto>

	for(counter = 0 ; counter <= AMOUNT_DIGITS ; counter++)
     2da:	10 92 b8 01 	sts	0x01B8, r1	; 0x8001b8 <counter>


/** FUNCTION TO GET THE AMOUNT OF MONEY NEEDED **/
void APP_getamount()
{
	uint16_t u16_l_amout = 0 , u8_a_pos = 1000 ;
     2de:	c8 ee       	ldi	r28, 0xE8	; 232
     2e0:	d3 e0       	ldi	r29, 0x03	; 3
     2e2:	00 e0       	ldi	r16, 0x00	; 0
     2e4:	10 e0       	ldi	r17, 0x00	; 0
	LCD_writestr("ENTER THE AMOUNT"); /** ASK USER TO ENTER THE AMOUNT NEEDED **/
	TMR0_delayms(200);
	
	LCD_goto(1,2);

	for(counter = 0 ; counter <= AMOUNT_DIGITS ; counter++)
     2e6:	45 c0       	rjmp	.+138    	; 0x372 <APP_getamount+0xce>
	{
		u8_a_pressednum = KEYPAD_readFail ;
     2e8:	91 e0       	ldi	r25, 0x01	; 1
     2ea:	90 93 b3 01 	sts	0x01B3, r25	; 0x8001b3 <u8_a_pressednum>
		
		if (counter == DECIMEL_POS)
     2ee:	84 30       	cpi	r24, 0x04	; 4
     2f0:	39 f4       	brne	.+14     	; 0x300 <APP_getamount+0x5c>
		{
			LCD_writechar('.'); /** DECIMEL POINT **/
     2f2:	8e e2       	ldi	r24, 0x2E	; 46
     2f4:	0e 94 c5 04 	call	0x98a	; 0x98a <LCD_writechar>
			u8_returnstatus = KEYPAD_readFail; /** REINITIALIZE STATE TO ACCEPT NEW NUMBER **/
     2f8:	81 e0       	ldi	r24, 0x01	; 1
     2fa:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <u8_returnstatus>
			continue ;
     2fe:	34 c0       	rjmp	.+104    	; 0x368 <APP_getamount+0xc4>
		}
		
		while ((KEYPAD_read(&u8_a_pressednum) == KEYPAD_readFail)); /** POLLING UNTILL NUMBER PRESSED **/
     300:	83 eb       	ldi	r24, 0xB3	; 179
     302:	91 e0       	ldi	r25, 0x01	; 1
     304:	0e 94 79 03 	call	0x6f2	; 0x6f2 <KEYPAD_read>
     308:	81 30       	cpi	r24, 0x01	; 1
     30a:	d1 f3       	breq	.-12     	; 0x300 <APP_getamount+0x5c>
		
		TMR0_delayms(200);
     30c:	68 ec       	ldi	r22, 0xC8	; 200
     30e:	70 e0       	ldi	r23, 0x00	; 0
     310:	80 e0       	ldi	r24, 0x00	; 0
     312:	90 e0       	ldi	r25, 0x00	; 0
     314:	0e 94 c3 07 	call	0xf86	; 0xf86 <TMR0_delayms>
		LCD_writechar(u8_a_pressednum);
     318:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <u8_a_pressednum>
     31c:	0e 94 c5 04 	call	0x98a	; 0x98a <LCD_writechar>
		
		if (counter < DECIMEL_POS) 
     320:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <counter>
     324:	84 30       	cpi	r24, 0x04	; 4
     326:	c8 f4       	brcc	.+50     	; 0x35a <APP_getamount+0xb6>
		{
			u16_l_amout += (u8_a_pressednum - 48) * u8_a_pos ; /** CHARACTER TO INTEGER **/
     328:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <u8_a_pressednum>
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	c0 97       	sbiw	r24, 0x30	; 48
     330:	8c 9f       	mul	r24, r28
     332:	90 01       	movw	r18, r0
     334:	8d 9f       	mul	r24, r29
     336:	30 0d       	add	r19, r0
     338:	9c 9f       	mul	r25, r28
     33a:	30 0d       	add	r19, r0
     33c:	11 24       	eor	r1, r1
     33e:	02 0f       	add	r16, r18
     340:	13 1f       	adc	r17, r19
			u8_a_pos /= 10 ; /** GO TO THE NEXT POSITION **/
     342:	9e 01       	movw	r18, r28
     344:	ad ec       	ldi	r26, 0xCD	; 205
     346:	bc ec       	ldi	r27, 0xCC	; 204
     348:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <__umulhisi3>
     34c:	ec 01       	movw	r28, r24
     34e:	d6 95       	lsr	r29
     350:	c7 95       	ror	r28
     352:	d6 95       	lsr	r29
     354:	c7 95       	ror	r28
     356:	d6 95       	lsr	r29
     358:	c7 95       	ror	r28
		}
		
		u16_g_amount = u16_l_amout ; /** STORE THE NEEDED AMOUNT GLOBALLY **/
     35a:	10 93 af 01 	sts	0x01AF, r17	; 0x8001af <__data_end+0x1>
     35e:	00 93 ae 01 	sts	0x01AE, r16	; 0x8001ae <__data_end>
		
		u8_returnstatus = KEYPAD_readFail; /** REINITIALIZE STATE TO ACCEPT NEW NUMBER **/
     362:	81 e0       	ldi	r24, 0x01	; 1
     364:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <u8_returnstatus>
	LCD_writestr("ENTER THE AMOUNT"); /** ASK USER TO ENTER THE AMOUNT NEEDED **/
	TMR0_delayms(200);
	
	LCD_goto(1,2);

	for(counter = 0 ; counter <= AMOUNT_DIGITS ; counter++)
     368:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <counter>
     36c:	8f 5f       	subi	r24, 0xFF	; 255
     36e:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <counter>
     372:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <counter>
     376:	87 30       	cpi	r24, 0x07	; 7
     378:	08 f4       	brcc	.+2      	; 0x37c <APP_getamount+0xd8>
     37a:	b6 cf       	rjmp	.-148    	; 0x2e8 <APP_getamount+0x44>
		
		u16_g_amount = u16_l_amout ; /** STORE THE NEEDED AMOUNT GLOBALLY **/
		
		u8_returnstatus = KEYPAD_readFail; /** REINITIALIZE STATE TO ACCEPT NEW NUMBER **/
	}
	TMR0_delayms(50);
     37c:	62 e3       	ldi	r22, 0x32	; 50
     37e:	70 e0       	ldi	r23, 0x00	; 0
     380:	80 e0       	ldi	r24, 0x00	; 0
     382:	90 e0       	ldi	r25, 0x00	; 0
     384:	0e 94 c3 07 	call	0xf86	; 0xf86 <TMR0_delayms>
}
     388:	df 91       	pop	r29
     38a:	cf 91       	pop	r28
     38c:	1f 91       	pop	r17
     38e:	0f 91       	pop	r16
     390:	08 95       	ret

00000392 <APP_cardvalidate>:

/** FUNCTION TO VALIDATE THE CARD DATA **/
void APP_cardvalidate(void)
{
     392:	cf 92       	push	r12
     394:	df 92       	push	r13
     396:	ef 92       	push	r14
     398:	ff 92       	push	r15
     39a:	0f 93       	push	r16
     39c:	1f 93       	push	r17
     39e:	cf 93       	push	r28
     3a0:	df 93       	push	r29
	uint8_t u8_l_cards = 0  , u8_l_panstate = 1 , u8_l_cardnum = 0; /** COUNTER FOR NUMBER OF CARDS **/
     3a2:	81 e0       	ldi	r24, 0x01	; 1
	
	for (u8_l_cards = 0 ; u8_l_cards < NUMBER_OF_CARDS ; u8_l_cards++)
     3a4:	c0 e0       	ldi	r28, 0x00	; 0
     3a6:	0d c0       	rjmp	.+26     	; 0x3c2 <APP_cardvalidate+0x30>
	{
		/** VALIDATING CARD PAN **/
		u8_l_panstate = strcmp(database[u8_l_cards].u8_a_card_pan , u8_g_cardpan);
     3a8:	29 e1       	ldi	r18, 0x19	; 25
     3aa:	c2 9f       	mul	r28, r18
     3ac:	c0 01       	movw	r24, r0
     3ae:	11 24       	eor	r1, r1
     3b0:	6f e6       	ldi	r22, 0x6F	; 111
     3b2:	70 e0       	ldi	r23, 0x00	; 0
     3b4:	83 57       	subi	r24, 0x73	; 115
     3b6:	9f 4f       	sbci	r25, 0xFF	; 255
     3b8:	0e 94 1b 0a 	call	0x1436	; 0x1436 <strcmp>
		
		if (!u8_l_panstate) /** PAN FOUND IN THE DATABASE **/
     3bc:	88 23       	and	r24, r24
     3be:	21 f0       	breq	.+8      	; 0x3c8 <APP_cardvalidate+0x36>
/** FUNCTION TO VALIDATE THE CARD DATA **/
void APP_cardvalidate(void)
{
	uint8_t u8_l_cards = 0  , u8_l_panstate = 1 , u8_l_cardnum = 0; /** COUNTER FOR NUMBER OF CARDS **/
	
	for (u8_l_cards = 0 ; u8_l_cards < NUMBER_OF_CARDS ; u8_l_cards++)
     3c0:	cf 5f       	subi	r28, 0xFF	; 255
     3c2:	c3 30       	cpi	r28, 0x03	; 3
     3c4:	88 f3       	brcs	.-30     	; 0x3a8 <APP_cardvalidate+0x16>
}

/** FUNCTION TO VALIDATE THE CARD DATA **/
void APP_cardvalidate(void)
{
	uint8_t u8_l_cards = 0  , u8_l_panstate = 1 , u8_l_cardnum = 0; /** COUNTER FOR NUMBER OF CARDS **/
     3c6:	c0 e0       	ldi	r28, 0x00	; 0
			u8_l_cardnum = u8_l_cards ; /** GET THE CARD INDEX IN THE DATABASE **/ 
			break ; 
		}
	}
	
	if (!u8_l_panstate) /** CONTINUE ONLY IF THE CARD IS FOUND IN THE DATABASE **/
     3c8:	81 11       	cpse	r24, r1
     3ca:	eb c0       	rjmp	.+470    	; 0x5a2 <__EEPROM_REGION_LENGTH__+0x1a2>
	{
		/** CHECK IF THE CARD RUNNING / BLOCKED **/
		if(database[u8_l_cardnum].en_a_cardstatus == BLOCKED)
     3cc:	d0 e0       	ldi	r29, 0x00	; 0
     3ce:	89 e1       	ldi	r24, 0x19	; 25
     3d0:	8c 9f       	mul	r24, r28
     3d2:	f0 01       	movw	r30, r0
     3d4:	8d 9f       	mul	r24, r29
     3d6:	f0 0d       	add	r31, r0
     3d8:	11 24       	eor	r1, r1
     3da:	e8 57       	subi	r30, 0x78	; 120
     3dc:	ff 4f       	sbci	r31, 0xFF	; 255
     3de:	84 81       	ldd	r24, Z+4	; 0x04
     3e0:	81 11       	cpse	r24, r1
     3e2:	14 c0       	rjmp	.+40     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
		{
			BUZZ_on();  /** ALARM IS ON **/
     3e4:	0e 94 25 03 	call	0x64a	; 0x64a <BUZZ_on>
			
			/** DISPLAY STATUS OVER THE LCD **/
			LCD_sendcmd(LCD_CLEAR);
     3e8:	81 e0       	ldi	r24, 0x01	; 1
     3ea:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_sendcmd>
			TMR0_delayms(20);
     3ee:	64 e1       	ldi	r22, 0x14	; 20
     3f0:	70 e0       	ldi	r23, 0x00	; 0
     3f2:	80 e0       	ldi	r24, 0x00	; 0
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	0e 94 c3 07 	call	0xf86	; 0xf86 <TMR0_delayms>
			
			LCD_goto(0,0);
     3fa:	60 e0       	ldi	r22, 0x00	; 0
     3fc:	80 e0       	ldi	r24, 0x00	; 0
     3fe:	0e 94 1f 05 	call	0xa3e	; 0xa3e <LCD_goto>
			LCD_writestr("CARD IS STOLEN");
     402:	85 e2       	ldi	r24, 0x25	; 37
     404:	91 e0       	ldi	r25, 0x01	; 1
     406:	0e 94 0c 05 	call	0xa18	; 0xa18 <LCD_writestr>
     40a:	ed c0       	rjmp	.+474    	; 0x5e6 <__EEPROM_REGION_LENGTH__+0x1e6>
		}
		
		/** CHECK IF BALANCE IS ENOUGH **/
		else if (database[u8_l_cardnum].f_a_cardbalance < u16_g_amount)
     40c:	89 e1       	ldi	r24, 0x19	; 25
     40e:	8c 9f       	mul	r24, r28
     410:	f0 01       	movw	r30, r0
     412:	8d 9f       	mul	r24, r29
     414:	f0 0d       	add	r31, r0
     416:	11 24       	eor	r1, r1
     418:	e8 57       	subi	r30, 0x78	; 120
     41a:	ff 4f       	sbci	r31, 0xFF	; 255
     41c:	c0 80       	ld	r12, Z
     41e:	d1 80       	ldd	r13, Z+1	; 0x01
     420:	e2 80       	ldd	r14, Z+2	; 0x02
     422:	f3 80       	ldd	r15, Z+3	; 0x03
     424:	00 91 ae 01 	lds	r16, 0x01AE	; 0x8001ae <__data_end>
     428:	10 91 af 01 	lds	r17, 0x01AF	; 0x8001af <__data_end+0x1>
     42c:	b8 01       	movw	r22, r16
     42e:	80 e0       	ldi	r24, 0x00	; 0
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	0e 94 19 09 	call	0x1232	; 0x1232 <__floatunsisf>
     436:	9b 01       	movw	r18, r22
     438:	ac 01       	movw	r20, r24
     43a:	c7 01       	movw	r24, r14
     43c:	b6 01       	movw	r22, r12
     43e:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <__cmpsf2>
     442:	88 23       	and	r24, r24
     444:	d4 f4       	brge	.+52     	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
		{
			LCD_sendcmd(LCD_CLEAR);
     446:	81 e0       	ldi	r24, 0x01	; 1
     448:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_sendcmd>
			TMR0_delayms(20);
     44c:	64 e1       	ldi	r22, 0x14	; 20
     44e:	70 e0       	ldi	r23, 0x00	; 0
     450:	80 e0       	ldi	r24, 0x00	; 0
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	0e 94 c3 07 	call	0xf86	; 0xf86 <TMR0_delayms>
			
			LCD_goto(0,1);
     458:	61 e0       	ldi	r22, 0x01	; 1
     45a:	80 e0       	ldi	r24, 0x00	; 0
     45c:	0e 94 1f 05 	call	0xa3e	; 0xa3e <LCD_goto>
			LCD_writestr("INSUFFICIENT FUND");
     460:	84 e3       	ldi	r24, 0x34	; 52
     462:	91 e0       	ldi	r25, 0x01	; 1
     464:	0e 94 0c 05 	call	0xa18	; 0xa18 <LCD_writestr>
			
			LCD_goto(1,3);
     468:	63 e0       	ldi	r22, 0x03	; 3
     46a:	81 e0       	ldi	r24, 0x01	; 1
     46c:	0e 94 1f 05 	call	0xa3e	; 0xa3e <LCD_goto>
			LCD_writestr("FUND");
     470:	81 e4       	ldi	r24, 0x41	; 65
     472:	91 e0       	ldi	r25, 0x01	; 1
     474:	0e 94 0c 05 	call	0xa18	; 0xa18 <LCD_writestr>
     478:	b6 c0       	rjmp	.+364    	; 0x5e6 <__EEPROM_REGION_LENGTH__+0x1e6>
		}
		
		/** CHECK IF NEEDED AMOUNT MORE THAN THE TRANSACTION AMOUNT **/
		else if (u16_g_amount > MAX_AMOUNT) /** MAX AMOUNT FOR EACH TRANSACTION IS 5000 **/
     47a:	09 38       	cpi	r16, 0x89	; 137
     47c:	13 41       	sbci	r17, 0x13	; 19
     47e:	00 f1       	brcs	.+64     	; 0x4c0 <__EEPROM_REGION_LENGTH__+0xc0>
		{
			LCD_sendcmd(LCD_CLEAR);
     480:	81 e0       	ldi	r24, 0x01	; 1
     482:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_sendcmd>
			TMR0_delayms(20);
     486:	64 e1       	ldi	r22, 0x14	; 20
     488:	70 e0       	ldi	r23, 0x00	; 0
     48a:	80 e0       	ldi	r24, 0x00	; 0
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	0e 94 c3 07 	call	0xf86	; 0xf86 <TMR0_delayms>
			
			LCD_goto(0 , 0);
     492:	60 e0       	ldi	r22, 0x00	; 0
     494:	80 e0       	ldi	r24, 0x00	; 0
     496:	0e 94 1f 05 	call	0xa3e	; 0xa3e <LCD_goto>
			LCD_writestr("MAX TRANSACTION ");
     49a:	86 e4       	ldi	r24, 0x46	; 70
     49c:	91 e0       	ldi	r25, 0x01	; 1
     49e:	0e 94 0c 05 	call	0xa18	; 0xa18 <LCD_writestr>
			
			LCD_goto(1 , 0);
     4a2:	60 e0       	ldi	r22, 0x00	; 0
     4a4:	81 e0       	ldi	r24, 0x01	; 1
     4a6:	0e 94 1f 05 	call	0xa3e	; 0xa3e <LCD_goto>
			LCD_writestr("AMOUNT EXCEEDED");
     4aa:	87 e5       	ldi	r24, 0x57	; 87
     4ac:	91 e0       	ldi	r25, 0x01	; 1
     4ae:	0e 94 0c 05 	call	0xa18	; 0xa18 <LCD_writestr>
			
			TMR0_delayms(1000);
     4b2:	68 ee       	ldi	r22, 0xE8	; 232
     4b4:	73 e0       	ldi	r23, 0x03	; 3
     4b6:	80 e0       	ldi	r24, 0x00	; 0
     4b8:	90 e0       	ldi	r25, 0x00	; 0
     4ba:	0e 94 c3 07 	call	0xf86	; 0xf86 <TMR0_delayms>
     4be:	93 c0       	rjmp	.+294    	; 0x5e6 <__EEPROM_REGION_LENGTH__+0x1e6>
		}

		else
		{
			LCD_sendcmd(LCD_CLEAR);
     4c0:	81 e0       	ldi	r24, 0x01	; 1
     4c2:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_sendcmd>
			TMR0_delayms(20);
     4c6:	64 e1       	ldi	r22, 0x14	; 20
     4c8:	70 e0       	ldi	r23, 0x00	; 0
     4ca:	80 e0       	ldi	r24, 0x00	; 0
     4cc:	90 e0       	ldi	r25, 0x00	; 0
     4ce:	0e 94 c3 07 	call	0xf86	; 0xf86 <TMR0_delayms>
			
			LCD_goto(0,3);
     4d2:	63 e0       	ldi	r22, 0x03	; 3
     4d4:	80 e0       	ldi	r24, 0x00	; 0
     4d6:	0e 94 1f 05 	call	0xa3e	; 0xa3e <LCD_goto>
			LCD_writestr("APPROVED");
     4da:	87 e6       	ldi	r24, 0x67	; 103
     4dc:	91 e0       	ldi	r25, 0x01	; 1
     4de:	0e 94 0c 05 	call	0xa18	; 0xa18 <LCD_writestr>
			LCD_goto(1,3);
     4e2:	63 e0       	ldi	r22, 0x03	; 3
     4e4:	81 e0       	ldi	r24, 0x01	; 1
     4e6:	0e 94 1f 05 	call	0xa3e	; 0xa3e <LCD_goto>
			LCD_writestr("TRANSACTION");
     4ea:	80 e7       	ldi	r24, 0x70	; 112
     4ec:	91 e0       	ldi	r25, 0x01	; 1
     4ee:	0e 94 0c 05 	call	0xa18	; 0xa18 <LCD_writestr>
			
			TMR0_delayms(1000);
     4f2:	68 ee       	ldi	r22, 0xE8	; 232
     4f4:	73 e0       	ldi	r23, 0x03	; 3
     4f6:	80 e0       	ldi	r24, 0x00	; 0
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	0e 94 c3 07 	call	0xf86	; 0xf86 <TMR0_delayms>
			
			LCD_sendcmd(LCD_CLEAR);
     4fe:	81 e0       	ldi	r24, 0x01	; 1
     500:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_sendcmd>
			TMR0_delayms(20);
     504:	64 e1       	ldi	r22, 0x14	; 20
     506:	70 e0       	ldi	r23, 0x00	; 0
     508:	80 e0       	ldi	r24, 0x00	; 0
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	0e 94 c3 07 	call	0xf86	; 0xf86 <TMR0_delayms>
			
			/** CALCULATE THE NEW BALANCE **/
			database[u8_l_cardnum].f_a_cardbalance -= u16_g_amount ; 
     510:	29 e1       	ldi	r18, 0x19	; 25
     512:	2c 9f       	mul	r18, r28
     514:	c0 01       	movw	r24, r0
     516:	2d 9f       	mul	r18, r29
     518:	90 0d       	add	r25, r0
     51a:	11 24       	eor	r1, r1
     51c:	ec 01       	movw	r28, r24
     51e:	c8 57       	subi	r28, 0x78	; 120
     520:	df 4f       	sbci	r29, 0xFF	; 255
     522:	60 91 ae 01 	lds	r22, 0x01AE	; 0x8001ae <__data_end>
     526:	70 91 af 01 	lds	r23, 0x01AF	; 0x8001af <__data_end+0x1>
     52a:	80 e0       	ldi	r24, 0x00	; 0
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	0e 94 19 09 	call	0x1232	; 0x1232 <__floatunsisf>
     532:	9b 01       	movw	r18, r22
     534:	ac 01       	movw	r20, r24
     536:	68 81       	ld	r22, Y
     538:	79 81       	ldd	r23, Y+1	; 0x01
     53a:	8a 81       	ldd	r24, Y+2	; 0x02
     53c:	9b 81       	ldd	r25, Y+3	; 0x03
     53e:	0e 94 ff 07 	call	0xffe	; 0xffe <__subsf3>
     542:	68 83       	st	Y, r22
     544:	79 83       	std	Y+1, r23	; 0x01
     546:	8a 83       	std	Y+2, r24	; 0x02
     548:	9b 83       	std	Y+3, r25	; 0x03
			
			LCD_goto(0,0);
     54a:	60 e0       	ldi	r22, 0x00	; 0
     54c:	80 e0       	ldi	r24, 0x00	; 0
     54e:	0e 94 1f 05 	call	0xa3e	; 0xa3e <LCD_goto>
			LCD_writestr("NEW BALANCE :");
     552:	8c e7       	ldi	r24, 0x7C	; 124
     554:	91 e0       	ldi	r25, 0x01	; 1
     556:	0e 94 0c 05 	call	0xa18	; 0xa18 <LCD_writestr>
			LCD_goto(1,4);
     55a:	64 e0       	ldi	r22, 0x04	; 4
     55c:	81 e0       	ldi	r24, 0x01	; 1
     55e:	0e 94 1f 05 	call	0xa3e	; 0xa3e <LCD_goto>
			LCD_writeint(database[u8_l_cardnum].f_a_cardbalance);
     562:	68 81       	ld	r22, Y
     564:	79 81       	ldd	r23, Y+1	; 0x01
     566:	8a 81       	ldd	r24, Y+2	; 0x02
     568:	9b 81       	ldd	r25, Y+3	; 0x03
     56a:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <__fixsfsi>
     56e:	0e 94 52 05 	call	0xaa4	; 0xaa4 <LCD_writeint>
			
			TMR0_delayms(1000);
     572:	68 ee       	ldi	r22, 0xE8	; 232
     574:	73 e0       	ldi	r23, 0x03	; 3
     576:	80 e0       	ldi	r24, 0x00	; 0
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	0e 94 c3 07 	call	0xf86	; 0xf86 <TMR0_delayms>
			
			LCD_sendcmd(LCD_CLEAR);
     57e:	81 e0       	ldi	r24, 0x01	; 1
     580:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_sendcmd>
			TMR0_delayms(20);
     584:	64 e1       	ldi	r22, 0x14	; 20
     586:	70 e0       	ldi	r23, 0x00	; 0
     588:	80 e0       	ldi	r24, 0x00	; 0
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	0e 94 c3 07 	call	0xf86	; 0xf86 <TMR0_delayms>
			LCD_goto(0,0);
     590:	60 e0       	ldi	r22, 0x00	; 0
     592:	80 e0       	ldi	r24, 0x00	; 0
     594:	0e 94 1f 05 	call	0xa3e	; 0xa3e <LCD_goto>
			LCD_writestr("EJECTING CARD");
     598:	8a e8       	ldi	r24, 0x8A	; 138
     59a:	91 e0       	ldi	r25, 0x01	; 1
     59c:	0e 94 0c 05 	call	0xa18	; 0xa18 <LCD_writestr>
     5a0:	22 c0       	rjmp	.+68     	; 0x5e6 <__EEPROM_REGION_LENGTH__+0x1e6>
		
	}
	
	else
	{
		BUZZ_on();  /** ALARM IS ON **/
     5a2:	0e 94 25 03 	call	0x64a	; 0x64a <BUZZ_on>
		
		/** DISPLAY STATUS OVER THE LCD **/
		LCD_sendcmd(LCD_CLEAR);
     5a6:	81 e0       	ldi	r24, 0x01	; 1
     5a8:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_sendcmd>
		TMR0_delayms(20);
     5ac:	64 e1       	ldi	r22, 0x14	; 20
     5ae:	70 e0       	ldi	r23, 0x00	; 0
     5b0:	80 e0       	ldi	r24, 0x00	; 0
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	0e 94 c3 07 	call	0xf86	; 0xf86 <TMR0_delayms>
		
		LCD_goto(0,0);
     5b8:	60 e0       	ldi	r22, 0x00	; 0
     5ba:	80 e0       	ldi	r24, 0x00	; 0
     5bc:	0e 94 1f 05 	call	0xa3e	; 0xa3e <LCD_goto>
		LCD_writestr("THIS IS A");
     5c0:	88 e9       	ldi	r24, 0x98	; 152
     5c2:	91 e0       	ldi	r25, 0x01	; 1
     5c4:	0e 94 0c 05 	call	0xa18	; 0xa18 <LCD_writestr>
		LCD_goto(1,0);
     5c8:	60 e0       	ldi	r22, 0x00	; 0
     5ca:	81 e0       	ldi	r24, 0x01	; 1
     5cc:	0e 94 1f 05 	call	0xa3e	; 0xa3e <LCD_goto>
		LCD_writestr("FRAUD CARD");
     5d0:	82 ea       	ldi	r24, 0xA2	; 162
     5d2:	91 e0       	ldi	r25, 0x01	; 1
     5d4:	0e 94 0c 05 	call	0xa18	; 0xa18 <LCD_writestr>
		
		/** DISPLAY BELL SHAPE **/
		LCD_goto(0 , 15);
     5d8:	6f e0       	ldi	r22, 0x0F	; 15
     5da:	80 e0       	ldi	r24, 0x00	; 0
     5dc:	0e 94 1f 05 	call	0xa3e	; 0xa3e <LCD_goto>
		LCD_writechar(bell);
     5e0:	80 e0       	ldi	r24, 0x00	; 0
     5e2:	0e 94 c5 04 	call	0x98a	; 0x98a <LCD_writechar>
		
	}
	
}
     5e6:	df 91       	pop	r29
     5e8:	cf 91       	pop	r28
     5ea:	1f 91       	pop	r17
     5ec:	0f 91       	pop	r16
     5ee:	ff 90       	pop	r15
     5f0:	ef 90       	pop	r14
     5f2:	df 90       	pop	r13
     5f4:	cf 90       	pop	r12
     5f6:	08 95       	ret

000005f8 <Button_init>:
/* RETURN    : void                                              */
/*****************************************************************/
void Button_init(uint8_t Button_port , uint8_t Button_pin)
{
	/** SET THE DIRECTION OF BUTTON AS INPUT **/
	DIO_setpindir(Button_port , Button_pin , DIO_PIN_INPUT);
     5f8:	40 e0       	ldi	r20, 0x00	; 0
     5fa:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <DIO_setpindir>
     5fe:	08 95       	ret

00000600 <Is_pressed>:
/* FUNCTION TO CHECK THE BUTTON STATUS PRESSED OR NOT            */
/* ARGUMENTS : TAKES THE BUTTON PIN                              */
/* RETURN    : RETURNS BUTTON_t type                             */
/*****************************************************************/
button_t Is_pressed(uint8_t Button_port , uint8_t Button_pin , uint8_t * value)
{
     600:	0f 93       	push	r16
     602:	1f 93       	push	r17
     604:	cf 93       	push	r28
     606:	df 93       	push	r29
     608:	1f 92       	push	r1
     60a:	cd b7       	in	r28, 0x3d	; 61
     60c:	de b7       	in	r29, 0x3e	; 62
     60e:	8a 01       	movw	r16, r20
	button_t button_state = Button_Notpressed ; /* VARIABLE TO HOLD THE RETURN TYPE OF THE FUNCTION */
	
	PinRead_t pin_status = NOT_VALID_READ ;  /** VARIABLE TO HOLD THE STATE OF PIN READ **/
	
	uint8_t pvalue = 0 ;
     610:	19 82       	std	Y+1, r1	; 0x01
	
	pin_status = DIO_readpin(Button_port , Button_pin , &pvalue); /** READ THE BUTTON PIN VALUE */
     612:	ae 01       	movw	r20, r28
     614:	4f 5f       	subi	r20, 0xFF	; 255
     616:	5f 4f       	sbci	r21, 0xFF	; 255
     618:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <DIO_readpin>
	
	if (!pin_status) 
     61c:	81 11       	cpse	r24, r1
     61e:	05 c0       	rjmp	.+10     	; 0x62a <Is_pressed+0x2a>
	{
		button_state = Button_pressed ; /** RETURN THE STATUS AS BUTTON IS PRESSED **/
		*value = pvalue ;
     620:	89 81       	ldd	r24, Y+1	; 0x01
     622:	f8 01       	movw	r30, r16
     624:	80 83       	st	Z, r24
	
	pin_status = DIO_readpin(Button_port , Button_pin , &pvalue); /** READ THE BUTTON PIN VALUE */
	
	if (!pin_status) 
	{
		button_state = Button_pressed ; /** RETURN THE STATUS AS BUTTON IS PRESSED **/
     626:	81 e0       	ldi	r24, 0x01	; 1
     628:	04 c0       	rjmp	.+8      	; 0x632 <Is_pressed+0x32>
	}
	
	else
	{
		button_state = Button_Notpressed ; /** RETURN THE STATUS AS BUTTON IS PRESSED **/
		*value = pvalue ;
     62a:	89 81       	ldd	r24, Y+1	; 0x01
     62c:	f8 01       	movw	r30, r16
     62e:	80 83       	st	Z, r24
		*value = pvalue ;
	}
	
	else
	{
		button_state = Button_Notpressed ; /** RETURN THE STATUS AS BUTTON IS PRESSED **/
     630:	80 e0       	ldi	r24, 0x00	; 0
		*value = pvalue ;
	}
	
	return button_state ; /** RETURN THE STATUS OF THE BUTTON **/
}
     632:	0f 90       	pop	r0
     634:	df 91       	pop	r29
     636:	cf 91       	pop	r28
     638:	1f 91       	pop	r17
     63a:	0f 91       	pop	r16
     63c:	08 95       	ret

0000063e <BUZZ_init>:
/** RETURN     : VOID                                 **/
/*******************************************************/
void BUZZ_init()
{
	/** SET THE DIRECTION OF BUZZER PIN AS OUTPUT **/
	DIO_setpindir(BUZZ_PORT , BUZZ_PIN , DIO_PIN_OUTPUT);
     63e:	41 e0       	ldi	r20, 0x01	; 1
     640:	63 e0       	ldi	r22, 0x03	; 3
     642:	81 e0       	ldi	r24, 0x01	; 1
     644:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <DIO_setpindir>
     648:	08 95       	ret

0000064a <BUZZ_on>:
/** RETURN     : VOID                                 **/
/*******************************************************/
void BUZZ_on()
{
	/** SET THE BUZZER PIN AS HIGH **/
	DIO_setpinvalue(BUZZ_PORT , BUZZ_PIN , DIO_PIN_HIGH);
     64a:	41 e0       	ldi	r20, 0x01	; 1
     64c:	63 e0       	ldi	r22, 0x03	; 3
     64e:	81 e0       	ldi	r24, 0x01	; 1
     650:	0e 94 69 06 	call	0xcd2	; 0xcd2 <DIO_setpinvalue>
     654:	08 95       	ret

00000656 <BUZZ_off>:
/** RETURN     : VOID                                 **/
/*******************************************************/
void BUZZ_off()
{
	/** SET THE BUZZER PIN AS LOW **/
	DIO_setpinvalue(BUZZ_PORT , BUZZ_PIN , DIO_PIN_LOW);
     656:	40 e0       	ldi	r20, 0x00	; 0
     658:	63 e0       	ldi	r22, 0x03	; 3
     65a:	81 e0       	ldi	r24, 0x01	; 1
     65c:	0e 94 69 06 	call	0xcd2	; 0xcd2 <DIO_setpinvalue>
     660:	08 95       	ret

00000662 <KEYPAD_init>:
/** @return KEYPAD_initFail                                                */
/***************************************************************************/
KEYPAD_initError KEYPAD_init(void)
{
    /*Rows direction initialization*/
    DIO_setpindir(ROW_PORT_DATA, R1 , DIO_PIN_OUTPUT);
     662:	41 e0       	ldi	r20, 0x01	; 1
     664:	62 e0       	ldi	r22, 0x02	; 2
     666:	82 e0       	ldi	r24, 0x02	; 2
     668:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <DIO_setpindir>
	DIO_setpindir(ROW_PORT_DATA, R2 , DIO_PIN_OUTPUT);
     66c:	41 e0       	ldi	r20, 0x01	; 1
     66e:	63 e0       	ldi	r22, 0x03	; 3
     670:	82 e0       	ldi	r24, 0x02	; 2
     672:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <DIO_setpindir>
	DIO_setpindir(ROW_PORT_DATA, R3 , DIO_PIN_OUTPUT);
     676:	41 e0       	ldi	r20, 0x01	; 1
     678:	64 e0       	ldi	r22, 0x04	; 4
     67a:	82 e0       	ldi	r24, 0x02	; 2
     67c:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <DIO_setpindir>
	DIO_setpindir(DIO_PORTD, R4 , DIO_PIN_OUTPUT);
     680:	41 e0       	ldi	r20, 0x01	; 1
     682:	60 e0       	ldi	r22, 0x00	; 0
     684:	83 e0       	ldi	r24, 0x03	; 3
     686:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <DIO_setpindir>
	
    /*Columns direction initialization*/
	DIO_setpindir(COLUMN_PORT_DATA , C1 , DIO_PIN_INPUT);
     68a:	40 e0       	ldi	r20, 0x00	; 0
     68c:	65 e0       	ldi	r22, 0x05	; 5
     68e:	82 e0       	ldi	r24, 0x02	; 2
     690:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <DIO_setpindir>
	DIO_setpindir(COLUMN_PORT_DATA , C2 , DIO_PIN_INPUT);
     694:	40 e0       	ldi	r20, 0x00	; 0
     696:	66 e0       	ldi	r22, 0x06	; 6
     698:	82 e0       	ldi	r24, 0x02	; 2
     69a:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <DIO_setpindir>
	DIO_setpindir(COLUMN_PORT_DATA , C3 , DIO_PIN_INPUT);
     69e:	40 e0       	ldi	r20, 0x00	; 0
     6a0:	67 e0       	ldi	r22, 0x07	; 7
     6a2:	82 e0       	ldi	r24, 0x02	; 2
     6a4:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <DIO_setpindir>
	DIO_setpinvalue(DIO_PORTD , R4 ,  DIO_PIN_LOW);
	

    #elif CONNECTION == 'U'
	
	DIO_setpinvalue(ROW_PORT_DATA , R1 , DIO_PIN_HIGH);
     6a8:	41 e0       	ldi	r20, 0x01	; 1
     6aa:	62 e0       	ldi	r22, 0x02	; 2
     6ac:	82 e0       	ldi	r24, 0x02	; 2
     6ae:	0e 94 69 06 	call	0xcd2	; 0xcd2 <DIO_setpinvalue>
	DIO_setpinvalue(ROW_PORT_DATA , R2 , DIO_PIN_HIGH);
     6b2:	41 e0       	ldi	r20, 0x01	; 1
     6b4:	63 e0       	ldi	r22, 0x03	; 3
     6b6:	82 e0       	ldi	r24, 0x02	; 2
     6b8:	0e 94 69 06 	call	0xcd2	; 0xcd2 <DIO_setpinvalue>
	DIO_setpinvalue(ROW_PORT_DATA , R3 , DIO_PIN_HIGH);
     6bc:	41 e0       	ldi	r20, 0x01	; 1
     6be:	64 e0       	ldi	r22, 0x04	; 4
     6c0:	82 e0       	ldi	r24, 0x02	; 2
     6c2:	0e 94 69 06 	call	0xcd2	; 0xcd2 <DIO_setpinvalue>
	DIO_setpinvalue(DIO_PORTD , R4 , DIO_PIN_HIGH);
     6c6:	41 e0       	ldi	r20, 0x01	; 1
     6c8:	60 e0       	ldi	r22, 0x00	; 0
     6ca:	83 e0       	ldi	r24, 0x03	; 3
     6cc:	0e 94 69 06 	call	0xcd2	; 0xcd2 <DIO_setpinvalue>
	
	DIO_setpinvalue(COLUMN_PORT_DATA , C1 , DIO_PIN_HIGH);
     6d0:	41 e0       	ldi	r20, 0x01	; 1
     6d2:	65 e0       	ldi	r22, 0x05	; 5
     6d4:	82 e0       	ldi	r24, 0x02	; 2
     6d6:	0e 94 69 06 	call	0xcd2	; 0xcd2 <DIO_setpinvalue>
	DIO_setpinvalue(COLUMN_PORT_DATA , C2 , DIO_PIN_HIGH);
     6da:	41 e0       	ldi	r20, 0x01	; 1
     6dc:	66 e0       	ldi	r22, 0x06	; 6
     6de:	82 e0       	ldi	r24, 0x02	; 2
     6e0:	0e 94 69 06 	call	0xcd2	; 0xcd2 <DIO_setpinvalue>
	DIO_setpinvalue(COLUMN_PORT_DATA , C3 , DIO_PIN_HIGH);
     6e4:	41 e0       	ldi	r20, 0x01	; 1
     6e6:	67 e0       	ldi	r22, 0x07	; 7
     6e8:	82 e0       	ldi	r24, 0x02	; 2
     6ea:	0e 94 69 06 	call	0xcd2	; 0xcd2 <DIO_setpinvalue>
	
    #endif
    return KEYPAD_initSuccess;
}
     6ee:	80 e0       	ldi	r24, 0x00	; 0
     6f0:	08 95       	ret

000006f2 <KEYPAD_read>:
/** @param *u8_a_value refrence to store the read value in                 */
/** @return KEYPAD_readSuccess                                             */
/** @return KEYPAD_readFail                                                */
/***************************************************************************/
KEYPAD_readError KEYPAD_read(uint8_t *u8_a_value)
{
     6f2:	ef 92       	push	r14
     6f4:	ff 92       	push	r15
     6f6:	0f 93       	push	r16
     6f8:	1f 93       	push	r17
     6fa:	cf 93       	push	r28
     6fc:	df 93       	push	r29
     6fe:	cd b7       	in	r28, 0x3d	; 61
     700:	de b7       	in	r29, 0x3e	; 62
     702:	27 97       	sbiw	r28, 0x07	; 7
     704:	0f b6       	in	r0, 0x3f	; 63
     706:	f8 94       	cli
     708:	de bf       	out	0x3e, r29	; 62
     70a:	0f be       	out	0x3f, r0	; 63
     70c:	cd bf       	out	0x3d, r28	; 61
     70e:	7c 01       	movw	r14, r24
    #elif CONNECTION == 'D'
    #define u8_l_readCheck DIO_PIN_HIGH
    #define u8_l_pinValue  DIO_PIN_HIGH
    #endif

    uint8_t u8_l_Rows[ROWS_SIZE] = {R1, R2, R3};
     710:	19 82       	std	Y+1, r1	; 0x01
     712:	1a 82       	std	Y+2, r1	; 0x02
     714:	1b 82       	std	Y+3, r1	; 0x03
     716:	1c 82       	std	Y+4, r1	; 0x04
     718:	82 e0       	ldi	r24, 0x02	; 2
     71a:	89 83       	std	Y+1, r24	; 0x01
     71c:	83 e0       	ldi	r24, 0x03	; 3
     71e:	8a 83       	std	Y+2, r24	; 0x02
     720:	84 e0       	ldi	r24, 0x04	; 4
     722:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t u8_l_Columns[COLUMNS_SIZE] = {C1, C2, C3};
     724:	85 e0       	ldi	r24, 0x05	; 5
     726:	8d 83       	std	Y+5, r24	; 0x05
     728:	86 e0       	ldi	r24, 0x06	; 6
     72a:	8e 83       	std	Y+6, r24	; 0x06
     72c:	87 e0       	ldi	r24, 0x07	; 7
     72e:	8f 83       	std	Y+7, r24	; 0x07

    for (u8_a_rowiterator = 0; u8_a_rowiterator < ROWS_SIZE; u8_a_rowiterator++)
     730:	00 e0       	ldi	r16, 0x00	; 0
     732:	90 c0       	rjmp	.+288    	; 0x854 <__DATA_REGION_LENGTH__+0x54>
    {
		if (u8_a_rowiterator == 3 )
     734:	03 30       	cpi	r16, 0x03	; 3
     736:	39 f4       	brne	.+14     	; 0x746 <KEYPAD_read+0x54>
		{
			DIO_setpinvalue(DIO_PORTD , DIO_PIN0, u8_l_pinValue);
     738:	40 e0       	ldi	r20, 0x00	; 0
     73a:	60 e0       	ldi	r22, 0x00	; 0
     73c:	83 e0       	ldi	r24, 0x03	; 3
     73e:	0e 94 69 06 	call	0xcd2	; 0xcd2 <DIO_setpinvalue>
/** @param *u8_a_value refrence to store the read value in                 */
/** @return KEYPAD_readSuccess                                             */
/** @return KEYPAD_readFail                                                */
/***************************************************************************/
KEYPAD_readError KEYPAD_read(uint8_t *u8_a_value)
{
     742:	10 e0       	ldi	r17, 0x00	; 0
     744:	72 c0       	rjmp	.+228    	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
		{
			DIO_setpinvalue(DIO_PORTD , DIO_PIN0, u8_l_pinValue);
		}
		else
		{
			DIO_setpinvalue(ROW_PORT_DATA , u8_l_Rows[u8_a_rowiterator] , u8_l_pinValue);
     746:	e1 e0       	ldi	r30, 0x01	; 1
     748:	f0 e0       	ldi	r31, 0x00	; 0
     74a:	ec 0f       	add	r30, r28
     74c:	fd 1f       	adc	r31, r29
     74e:	e0 0f       	add	r30, r16
     750:	f1 1d       	adc	r31, r1
     752:	40 e0       	ldi	r20, 0x00	; 0
     754:	60 81       	ld	r22, Z
     756:	82 e0       	ldi	r24, 0x02	; 2
     758:	0e 94 69 06 	call	0xcd2	; 0xcd2 <DIO_setpinvalue>
     75c:	f2 cf       	rjmp	.-28     	; 0x742 <KEYPAD_read+0x50>
		}

        for (u8_a_coulumniterator = 0; u8_a_coulumniterator < COLUMNS_SIZE; u8_a_coulumniterator++)
        {
            DIO_readpin(COLUMN_PORT_DATA , u8_l_Columns[u8_a_coulumniterator] , u8_a_value);
     75e:	e5 e0       	ldi	r30, 0x05	; 5
     760:	f0 e0       	ldi	r31, 0x00	; 0
     762:	ec 0f       	add	r30, r28
     764:	fd 1f       	adc	r31, r29
     766:	e1 0f       	add	r30, r17
     768:	f1 1d       	adc	r31, r1
     76a:	a7 01       	movw	r20, r14
     76c:	60 81       	ld	r22, Z
     76e:	82 e0       	ldi	r24, 0x02	; 2
     770:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <DIO_readpin>
            if (*u8_a_value == u8_l_readCheck)
     774:	f7 01       	movw	r30, r14
     776:	80 81       	ld	r24, Z
     778:	81 11       	cpse	r24, r1
     77a:	56 c0       	rjmp	.+172    	; 0x828 <__DATA_REGION_LENGTH__+0x28>
            {
                if (u8_a_rowiterator == 0)
     77c:	01 11       	cpse	r16, r1
     77e:	11 c0       	rjmp	.+34     	; 0x7a2 <KEYPAD_read+0xb0>
                {
                    if (u8_a_coulumniterator == 0)
     780:	11 11       	cpse	r17, r1
     782:	03 c0       	rjmp	.+6      	; 0x78a <KEYPAD_read+0x98>
                    {
                        *u8_a_value = '1' ;
     784:	81 e3       	ldi	r24, 0x31	; 49
     786:	80 83       	st	Z, r24
     788:	3b c0       	rjmp	.+118    	; 0x800 <__DATA_REGION_LENGTH__>
                    }
                    else if (u8_a_coulumniterator == 1)
     78a:	11 30       	cpi	r17, 0x01	; 1
     78c:	21 f4       	brne	.+8      	; 0x796 <KEYPAD_read+0xa4>
                    {
                        *u8_a_value = '2' ;
     78e:	82 e3       	ldi	r24, 0x32	; 50
     790:	f7 01       	movw	r30, r14
     792:	80 83       	st	Z, r24
     794:	35 c0       	rjmp	.+106    	; 0x800 <__DATA_REGION_LENGTH__>
                    }
                    else if (u8_a_coulumniterator == 2)
     796:	12 30       	cpi	r17, 0x02	; 2
     798:	99 f5       	brne	.+102    	; 0x800 <__DATA_REGION_LENGTH__>
                    {
                        *u8_a_value = '3' ;
     79a:	83 e3       	ldi	r24, 0x33	; 51
     79c:	f7 01       	movw	r30, r14
     79e:	80 83       	st	Z, r24
     7a0:	2f c0       	rjmp	.+94     	; 0x800 <__DATA_REGION_LENGTH__>
                    }
                }

                else if (u8_a_rowiterator == 1)
     7a2:	01 30       	cpi	r16, 0x01	; 1
     7a4:	91 f4       	brne	.+36     	; 0x7ca <KEYPAD_read+0xd8>
                {
                    if (u8_a_coulumniterator == 0)
     7a6:	11 11       	cpse	r17, r1
     7a8:	04 c0       	rjmp	.+8      	; 0x7b2 <KEYPAD_read+0xc0>
                    {
                        *u8_a_value = '4' ;
     7aa:	84 e3       	ldi	r24, 0x34	; 52
     7ac:	f7 01       	movw	r30, r14
     7ae:	80 83       	st	Z, r24
     7b0:	27 c0       	rjmp	.+78     	; 0x800 <__DATA_REGION_LENGTH__>
                    }
                    else if (u8_a_coulumniterator == 1)
     7b2:	11 30       	cpi	r17, 0x01	; 1
     7b4:	21 f4       	brne	.+8      	; 0x7be <KEYPAD_read+0xcc>
                    {
                        *u8_a_value = '5' ;
     7b6:	85 e3       	ldi	r24, 0x35	; 53
     7b8:	f7 01       	movw	r30, r14
     7ba:	80 83       	st	Z, r24
     7bc:	21 c0       	rjmp	.+66     	; 0x800 <__DATA_REGION_LENGTH__>
                    }
                    else if (u8_a_coulumniterator == 2)
     7be:	12 30       	cpi	r17, 0x02	; 2
     7c0:	f9 f4       	brne	.+62     	; 0x800 <__DATA_REGION_LENGTH__>
                    {
                        *u8_a_value = '6' ;
     7c2:	86 e3       	ldi	r24, 0x36	; 54
     7c4:	f7 01       	movw	r30, r14
     7c6:	80 83       	st	Z, r24
     7c8:	1b c0       	rjmp	.+54     	; 0x800 <__DATA_REGION_LENGTH__>
                    }
                }

                else if (u8_a_rowiterator == 2)
     7ca:	02 30       	cpi	r16, 0x02	; 2
     7cc:	91 f4       	brne	.+36     	; 0x7f2 <KEYPAD_read+0x100>
                {
                    if (u8_a_coulumniterator == 0)
     7ce:	11 11       	cpse	r17, r1
     7d0:	04 c0       	rjmp	.+8      	; 0x7da <KEYPAD_read+0xe8>
                    {
                        *u8_a_value = '7' ;
     7d2:	87 e3       	ldi	r24, 0x37	; 55
     7d4:	f7 01       	movw	r30, r14
     7d6:	80 83       	st	Z, r24
     7d8:	13 c0       	rjmp	.+38     	; 0x800 <__DATA_REGION_LENGTH__>
                    }
                    else if (u8_a_coulumniterator == 1)
     7da:	11 30       	cpi	r17, 0x01	; 1
     7dc:	21 f4       	brne	.+8      	; 0x7e6 <KEYPAD_read+0xf4>
                    {
                        *u8_a_value = '8' ;
     7de:	88 e3       	ldi	r24, 0x38	; 56
     7e0:	f7 01       	movw	r30, r14
     7e2:	80 83       	st	Z, r24
     7e4:	0d c0       	rjmp	.+26     	; 0x800 <__DATA_REGION_LENGTH__>
                    }
                    else if (u8_a_coulumniterator == 2)
     7e6:	12 30       	cpi	r17, 0x02	; 2
     7e8:	59 f4       	brne	.+22     	; 0x800 <__DATA_REGION_LENGTH__>
                    {
                        *u8_a_value = '9' ;
     7ea:	89 e3       	ldi	r24, 0x39	; 57
     7ec:	f7 01       	movw	r30, r14
     7ee:	80 83       	st	Z, r24
     7f0:	07 c0       	rjmp	.+14     	; 0x800 <__DATA_REGION_LENGTH__>
                    }
                }
				
				else if (u8_a_rowiterator == 3)
     7f2:	03 30       	cpi	r16, 0x03	; 3
     7f4:	29 f4       	brne	.+10     	; 0x800 <__DATA_REGION_LENGTH__>
				{
					if (u8_a_coulumniterator == 0)
     7f6:	11 11       	cpse	r17, r1
     7f8:	03 c0       	rjmp	.+6      	; 0x800 <__DATA_REGION_LENGTH__>
					{
						*u8_a_value = '0' ;
     7fa:	80 e3       	ldi	r24, 0x30	; 48
     7fc:	f7 01       	movw	r30, r14
     7fe:	80 83       	st	Z, r24
					}
				}
				if (u8_a_rowiterator == 3)
     800:	03 30       	cpi	r16, 0x03	; 3
     802:	31 f4       	brne	.+12     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
				{
					DIO_togglepin( DIO_PORTD , DIO_PIN0);
     804:	60 e0       	ldi	r22, 0x00	; 0
     806:	83 e0       	ldi	r24, 0x03	; 3
     808:	0e 94 26 07 	call	0xe4c	; 0xe4c <DIO_togglepin>
					return KEYPAD_readSuccess;
     80c:	80 e0       	ldi	r24, 0x00	; 0
     80e:	26 c0       	rjmp	.+76     	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
				}
				else
				{
					
					DIO_togglepin( ROW_PORT_DATA , u8_l_Rows[u8_a_rowiterator] );
     810:	e1 e0       	ldi	r30, 0x01	; 1
     812:	f0 e0       	ldi	r31, 0x00	; 0
     814:	ec 0f       	add	r30, r28
     816:	fd 1f       	adc	r31, r29
     818:	e0 0f       	add	r30, r16
     81a:	f1 1d       	adc	r31, r1
     81c:	60 81       	ld	r22, Z
     81e:	82 e0       	ldi	r24, 0x02	; 2
     820:	0e 94 26 07 	call	0xe4c	; 0xe4c <DIO_togglepin>
					return KEYPAD_readSuccess;
     824:	80 e0       	ldi	r24, 0x00	; 0
     826:	1a c0       	rjmp	.+52     	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
		else
		{
			DIO_setpinvalue(ROW_PORT_DATA , u8_l_Rows[u8_a_rowiterator] , u8_l_pinValue);
		}

        for (u8_a_coulumniterator = 0; u8_a_coulumniterator < COLUMNS_SIZE; u8_a_coulumniterator++)
     828:	1f 5f       	subi	r17, 0xFF	; 255
     82a:	13 30       	cpi	r17, 0x03	; 3
     82c:	08 f4       	brcc	.+2      	; 0x830 <__DATA_REGION_LENGTH__+0x30>
     82e:	97 cf       	rjmp	.-210    	; 0x75e <KEYPAD_read+0x6c>
					DIO_togglepin( ROW_PORT_DATA , u8_l_Rows[u8_a_rowiterator] );
					return KEYPAD_readSuccess;
				}
            }
        }
		if (u8_a_rowiterator == 3)
     830:	03 30       	cpi	r16, 0x03	; 3
     832:	29 f4       	brne	.+10     	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
		{
			DIO_togglepin( DIO_PORTD , DIO_PIN0);
     834:	60 e0       	ldi	r22, 0x00	; 0
     836:	83 e0       	ldi	r24, 0x03	; 3
     838:	0e 94 26 07 	call	0xe4c	; 0xe4c <DIO_togglepin>
     83c:	0a c0       	rjmp	.+20     	; 0x852 <__DATA_REGION_LENGTH__+0x52>
		}
		else
		{
			DIO_togglepin( ROW_PORT_DATA , u8_l_Rows[u8_a_rowiterator] );
     83e:	e1 e0       	ldi	r30, 0x01	; 1
     840:	f0 e0       	ldi	r31, 0x00	; 0
     842:	ec 0f       	add	r30, r28
     844:	fd 1f       	adc	r31, r29
     846:	e0 0f       	add	r30, r16
     848:	f1 1d       	adc	r31, r1
     84a:	60 81       	ld	r22, Z
     84c:	82 e0       	ldi	r24, 0x02	; 2
     84e:	0e 94 26 07 	call	0xe4c	; 0xe4c <DIO_togglepin>
    #endif

    uint8_t u8_l_Rows[ROWS_SIZE] = {R1, R2, R3};
    uint8_t u8_l_Columns[COLUMNS_SIZE] = {C1, C2, C3};

    for (u8_a_rowiterator = 0; u8_a_rowiterator < ROWS_SIZE; u8_a_rowiterator++)
     852:	0f 5f       	subi	r16, 0xFF	; 255
     854:	04 30       	cpi	r16, 0x04	; 4
     856:	08 f4       	brcc	.+2      	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
     858:	6d cf       	rjmp	.-294    	; 0x734 <KEYPAD_read+0x42>
		else
		{
			DIO_togglepin( ROW_PORT_DATA , u8_l_Rows[u8_a_rowiterator] );
		}
    }
    return KEYPAD_readFail;
     85a:	81 e0       	ldi	r24, 0x01	; 1
     85c:	27 96       	adiw	r28, 0x07	; 7
     85e:	0f b6       	in	r0, 0x3f	; 63
     860:	f8 94       	cli
     862:	de bf       	out	0x3e, r29	; 62
     864:	0f be       	out	0x3f, r0	; 63
     866:	cd bf       	out	0x3d, r28	; 61
     868:	df 91       	pop	r29
     86a:	cf 91       	pop	r28
     86c:	1f 91       	pop	r17
     86e:	0f 91       	pop	r16
     870:	ff 90       	pop	r15
     872:	ef 90       	pop	r14
     874:	08 95       	ret

00000876 <LCD_sendcmd>:
/** FUNCTION TO SEND COMMAND TO LCD                       */
/** ARGUMENTS   : COMMAND                                 */
/** RETURNS     : ERROR STATUS                            */
/**********************************************************/
LCD_status LCD_sendcmd(uint8_t u8_a_cmd)
{
     876:	cf 93       	push	r28
     878:	c8 2f       	mov	r28, r24
	TMR0_init();
     87a:	0e 94 9c 07 	call	0xf38	; 0xf38 <TMR0_init>
		DIO_setpinvalue(LCD_8BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_LOW);  /** LATCH **/
		TMR0_delayms(5); /** LOW **/
		
		#elif LCD_MODE == BIT_MODE_4    /** IF LCD CONFIGURED AS 4 BIT MODE **/
		
		DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_RS_PIN , DIO_PIN_LOW);  /** COMMAND MODE       **/
     87e:	40 e0       	ldi	r20, 0x00	; 0
     880:	61 e0       	ldi	r22, 0x01	; 1
     882:	80 e0       	ldi	r24, 0x00	; 0
     884:	0e 94 69 06 	call	0xcd2	; 0xcd2 <DIO_setpinvalue>
		DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_RW_PIN , DIO_PIN_LOW);  /** WRITE TO LCD MODE  **/
     888:	40 e0       	ldi	r20, 0x00	; 0
     88a:	62 e0       	ldi	r22, 0x02	; 2
     88c:	80 e0       	ldi	r24, 0x00	; 0
     88e:	0e 94 69 06 	call	0xcd2	; 0xcd2 <DIO_setpinvalue>
		DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_LOW);   /** PREPARE FOR LATCH  **/
     892:	40 e0       	ldi	r20, 0x00	; 0
     894:	63 e0       	ldi	r22, 0x03	; 3
     896:	80 e0       	ldi	r24, 0x00	; 0
     898:	0e 94 69 06 	call	0xcd2	; 0xcd2 <DIO_setpinvalue>
		
		PORTA = ((u8_a_cmd & 0xF0) | (PORTA & 0x0F)); /** SEND THE MSB(HIGH NIBBLE) **/
     89c:	8b b3       	in	r24, 0x1b	; 27
     89e:	9c 2f       	mov	r25, r28
     8a0:	90 7f       	andi	r25, 0xF0	; 240
     8a2:	8f 70       	andi	r24, 0x0F	; 15
     8a4:	89 2b       	or	r24, r25
     8a6:	8b bb       	out	0x1b, r24	; 27
		
		DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_HIGH); /** LATCH **/
     8a8:	41 e0       	ldi	r20, 0x01	; 1
     8aa:	63 e0       	ldi	r22, 0x03	; 3
     8ac:	80 e0       	ldi	r24, 0x00	; 0
     8ae:	0e 94 69 06 	call	0xcd2	; 0xcd2 <DIO_setpinvalue>
		TMR0_delayms(1);
     8b2:	61 e0       	ldi	r22, 0x01	; 1
     8b4:	70 e0       	ldi	r23, 0x00	; 0
     8b6:	80 e0       	ldi	r24, 0x00	; 0
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	0e 94 c3 07 	call	0xf86	; 0xf86 <TMR0_delayms>
		DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_LOW);  /** LATCH **/
     8be:	40 e0       	ldi	r20, 0x00	; 0
     8c0:	63 e0       	ldi	r22, 0x03	; 3
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	0e 94 69 06 	call	0xcd2	; 0xcd2 <DIO_setpinvalue>
		
		
		PORTA = (((u8_a_cmd << 4) & 0xF0) | (PORTA & 0x0F)); /** SEND THE LSB(LOW NIBBLE) **/
     8c8:	20 e1       	ldi	r18, 0x10	; 16
     8ca:	c2 9f       	mul	r28, r18
     8cc:	c0 01       	movw	r24, r0
     8ce:	11 24       	eor	r1, r1
     8d0:	9b b3       	in	r25, 0x1b	; 27
     8d2:	9f 70       	andi	r25, 0x0F	; 15
     8d4:	89 2b       	or	r24, r25
     8d6:	8b bb       	out	0x1b, r24	; 27
		
		DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_HIGH); /** LATCH **/
     8d8:	41 e0       	ldi	r20, 0x01	; 1
     8da:	63 e0       	ldi	r22, 0x03	; 3
     8dc:	80 e0       	ldi	r24, 0x00	; 0
     8de:	0e 94 69 06 	call	0xcd2	; 0xcd2 <DIO_setpinvalue>
		TMR0_delayms(1);
     8e2:	61 e0       	ldi	r22, 0x01	; 1
     8e4:	70 e0       	ldi	r23, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	0e 94 c3 07 	call	0xf86	; 0xf86 <TMR0_delayms>
		
		DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_LOW);    /** LATCH **/
     8ee:	40 e0       	ldi	r20, 0x00	; 0
     8f0:	63 e0       	ldi	r22, 0x03	; 3
     8f2:	80 e0       	ldi	r24, 0x00	; 0
     8f4:	0e 94 69 06 	call	0xcd2	; 0xcd2 <DIO_setpinvalue>
		
		TMR0_delayms(5); /** 5 ms BEFORE SENDING THE NEXT COMMAND **/
     8f8:	65 e0       	ldi	r22, 0x05	; 5
     8fa:	70 e0       	ldi	r23, 0x00	; 0
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	0e 94 c3 07 	call	0xf86	; 0xf86 <TMR0_delayms>
		
		#endif
}
     904:	cf 91       	pop	r28
     906:	08 95       	ret

00000908 <LCD_init>:
/**********************************************************/
LCD_status LCD_init(void)
{
	LCD_status en_a_lcdinitstatus = VALID__LCD_INIT ; /** VARIABLE TO OLD THE RETURN STATUS OF THE FUNCTION **/
	
	TMR0_init();
     908:	0e 94 9c 07 	call	0xf38	; 0xf38 <TMR0_init>
		LCD_sendcmd(LCD_CLEAR);       /** CLEAR THE LCD                                    **/
		
		
		#elif LCD_MODE == BIT_MODE_4    /** IF LCD CONFIGURED AS 4 BIT MODE **/
		
		DIO_setpindir(LCD_4BIT_CMD_PORT , LCD_RS_PIN , DIO_PIN_OUTPUT); /** SET RS PIN AS OUTPUT PIN **/
     90c:	41 e0       	ldi	r20, 0x01	; 1
     90e:	61 e0       	ldi	r22, 0x01	; 1
     910:	80 e0       	ldi	r24, 0x00	; 0
     912:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <DIO_setpindir>
		DIO_setpindir(LCD_4BIT_CMD_PORT , LCD_RW_PIN , DIO_PIN_OUTPUT); /** SET RW PIN AS OUTPUT PIN **/
     916:	41 e0       	ldi	r20, 0x01	; 1
     918:	62 e0       	ldi	r22, 0x02	; 2
     91a:	80 e0       	ldi	r24, 0x00	; 0
     91c:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <DIO_setpindir>
		DIO_setpindir(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_OUTPUT);  /** SET E PIN AS OUTPUT PIN  **/
     920:	41 e0       	ldi	r20, 0x01	; 1
     922:	63 e0       	ldi	r22, 0x03	; 3
     924:	80 e0       	ldi	r24, 0x00	; 0
     926:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <DIO_setpindir>
		
		DIO_setpindir(LCD_4BIT_DATA_PORT , LCD_D4_PIN , DIO_PIN_OUTPUT); /** 4 DATA PINS AS OUTPUT **/
     92a:	41 e0       	ldi	r20, 0x01	; 1
     92c:	64 e0       	ldi	r22, 0x04	; 4
     92e:	80 e0       	ldi	r24, 0x00	; 0
     930:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <DIO_setpindir>
		DIO_setpindir(LCD_4BIT_DATA_PORT , LCD_D5_PIN , DIO_PIN_OUTPUT);
     934:	41 e0       	ldi	r20, 0x01	; 1
     936:	65 e0       	ldi	r22, 0x05	; 5
     938:	80 e0       	ldi	r24, 0x00	; 0
     93a:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <DIO_setpindir>
		DIO_setpindir(LCD_4BIT_DATA_PORT , LCD_D6_PIN , DIO_PIN_OUTPUT);
     93e:	41 e0       	ldi	r20, 0x01	; 1
     940:	66 e0       	ldi	r22, 0x06	; 6
     942:	80 e0       	ldi	r24, 0x00	; 0
     944:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <DIO_setpindir>
		DIO_setpindir(LCD_4BIT_DATA_PORT , LCD_D7_PIN , DIO_PIN_OUTPUT);
     948:	41 e0       	ldi	r20, 0x01	; 1
     94a:	67 e0       	ldi	r22, 0x07	; 7
     94c:	80 e0       	ldi	r24, 0x00	; 0
     94e:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <DIO_setpindir>
		
		TMR0_delayms(20); /** DELAY FOR LCD TO BE INITIALIZED **/
     952:	64 e1       	ldi	r22, 0x14	; 20
     954:	70 e0       	ldi	r23, 0x00	; 0
     956:	80 e0       	ldi	r24, 0x00	; 0
     958:	90 e0       	ldi	r25, 0x00	; 0
     95a:	0e 94 c3 07 	call	0xf86	; 0xf86 <TMR0_delayms>
		
		/** SEND SOME COMMANDS TO THE LCD FOR INITIAL SET   **/
		
		LCD_sendcmd(LCD_4BIT_MODE_CMD1); /** SEND THREE COMMANDS FOR LCD TO SET 4 BIT OPERATION MODE ( 2 LINES , 5*8 MATRIX ) **/
     95e:	83 e3       	ldi	r24, 0x33	; 51
     960:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_sendcmd>
		LCD_sendcmd(LCD_4BIT_MODE_CMD2);
     964:	82 e3       	ldi	r24, 0x32	; 50
     966:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_sendcmd>
		LCD_sendcmd(LCD_4BIT_MODE_CMD3);
     96a:	88 e2       	ldi	r24, 0x28	; 40
     96c:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_sendcmd>
		
		LCD_sendcmd(LCD_CURSOR_OFF);     /** NO NEED FOR CURSOR SO IT IS OFF                  **/
     970:	8c e0       	ldi	r24, 0x0C	; 12
     972:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_sendcmd>
		LCD_sendcmd(LCD_CURSOR_INC);     /** DIRECTION OF WRITING FROM LEFT TO RIGHT          **/
     976:	86 e0       	ldi	r24, 0x06	; 6
     978:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_sendcmd>
		LCD_sendcmd(LCD_RETURN_HOME);    /** CURSOR STARTS FROM ITS HOME POSITION             **/
     97c:	82 e0       	ldi	r24, 0x02	; 2
     97e:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_sendcmd>
		LCD_sendcmd(LCD_CLEAR);          /** CLEAR THE LCD                                    **/
     982:	81 e0       	ldi	r24, 0x01	; 1
     984:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_sendcmd>
		
		#endif 
		
}
     988:	08 95       	ret

0000098a <LCD_writechar>:
/** FUNCTION TO DISPLAY CHARACTER ON LCD                  */
/** ARGUMENTS   : CHARACTER                               */
/** RETURNS     : ERROR STATUS                            */
/**********************************************************/
LCD_status LCD_writechar(uint8_t u8_a_chr)
{
     98a:	cf 93       	push	r28
     98c:	c8 2f       	mov	r28, r24
	
	TMR0_delayms(5); /** 5 ms BEFORE SENDING THE NEXT CHARACTER **/
	
	#elif LCD_MODE == BIT_MODE_4    /** IF LCD CONFIGURED AS 4 BIT MODE **/
	
	DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_RS_PIN , DIO_PIN_HIGH);  /** DATA MODE         **/
     98e:	41 e0       	ldi	r20, 0x01	; 1
     990:	61 e0       	ldi	r22, 0x01	; 1
     992:	80 e0       	ldi	r24, 0x00	; 0
     994:	0e 94 69 06 	call	0xcd2	; 0xcd2 <DIO_setpinvalue>
	DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_RW_PIN , DIO_PIN_LOW);   /** WRITE TO LCD MODE **/
     998:	40 e0       	ldi	r20, 0x00	; 0
     99a:	62 e0       	ldi	r22, 0x02	; 2
     99c:	80 e0       	ldi	r24, 0x00	; 0
     99e:	0e 94 69 06 	call	0xcd2	; 0xcd2 <DIO_setpinvalue>
	DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_LOW);    /** DATA MODE         **/
     9a2:	40 e0       	ldi	r20, 0x00	; 0
     9a4:	63 e0       	ldi	r22, 0x03	; 3
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	0e 94 69 06 	call	0xcd2	; 0xcd2 <DIO_setpinvalue>
	
	
	PORTA = ((u8_a_chr & 0xF0) | (PORTA & 0x0F)); /** SEND THE MSB (HIGH NIBBLE) **/
     9ac:	8b b3       	in	r24, 0x1b	; 27
     9ae:	9c 2f       	mov	r25, r28
     9b0:	90 7f       	andi	r25, 0xF0	; 240
     9b2:	8f 70       	andi	r24, 0x0F	; 15
     9b4:	89 2b       	or	r24, r25
     9b6:	8b bb       	out	0x1b, r24	; 27
	
	DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_HIGH); /** LATCH **/
     9b8:	41 e0       	ldi	r20, 0x01	; 1
     9ba:	63 e0       	ldi	r22, 0x03	; 3
     9bc:	80 e0       	ldi	r24, 0x00	; 0
     9be:	0e 94 69 06 	call	0xcd2	; 0xcd2 <DIO_setpinvalue>
	TMR0_delayms(1);
     9c2:	61 e0       	ldi	r22, 0x01	; 1
     9c4:	70 e0       	ldi	r23, 0x00	; 0
     9c6:	80 e0       	ldi	r24, 0x00	; 0
     9c8:	90 e0       	ldi	r25, 0x00	; 0
     9ca:	0e 94 c3 07 	call	0xf86	; 0xf86 <TMR0_delayms>
	DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_LOW); /** LATCH **/
     9ce:	40 e0       	ldi	r20, 0x00	; 0
     9d0:	63 e0       	ldi	r22, 0x03	; 3
     9d2:	80 e0       	ldi	r24, 0x00	; 0
     9d4:	0e 94 69 06 	call	0xcd2	; 0xcd2 <DIO_setpinvalue>
		
	PORTA = (((u8_a_chr << 4) & 0xF0) | (PORTA & 0x0F)); /** SEND THE LSB (LOW NIBBLE) **/
     9d8:	20 e1       	ldi	r18, 0x10	; 16
     9da:	c2 9f       	mul	r28, r18
     9dc:	c0 01       	movw	r24, r0
     9de:	11 24       	eor	r1, r1
     9e0:	9b b3       	in	r25, 0x1b	; 27
     9e2:	9f 70       	andi	r25, 0x0F	; 15
     9e4:	89 2b       	or	r24, r25
     9e6:	8b bb       	out	0x1b, r24	; 27
	
	DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_HIGH); /** LATCH **/
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	63 e0       	ldi	r22, 0x03	; 3
     9ec:	80 e0       	ldi	r24, 0x00	; 0
     9ee:	0e 94 69 06 	call	0xcd2	; 0xcd2 <DIO_setpinvalue>
	TMR0_delayms(1);
     9f2:	61 e0       	ldi	r22, 0x01	; 1
     9f4:	70 e0       	ldi	r23, 0x00	; 0
     9f6:	80 e0       	ldi	r24, 0x00	; 0
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	0e 94 c3 07 	call	0xf86	; 0xf86 <TMR0_delayms>
	DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_LOW);  /** LATCH **/
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	63 e0       	ldi	r22, 0x03	; 3
     a02:	80 e0       	ldi	r24, 0x00	; 0
     a04:	0e 94 69 06 	call	0xcd2	; 0xcd2 <DIO_setpinvalue>
	
	TMR0_delayms(5); /** 5 ms BEFORE SENDING THE NEXT CHARACTER **/
     a08:	65 e0       	ldi	r22, 0x05	; 5
     a0a:	70 e0       	ldi	r23, 0x00	; 0
     a0c:	80 e0       	ldi	r24, 0x00	; 0
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	0e 94 c3 07 	call	0xf86	; 0xf86 <TMR0_delayms>
	
	#endif
}
     a14:	cf 91       	pop	r28
     a16:	08 95       	ret

00000a18 <LCD_writestr>:
/** FUNCTION TO DISPLAY STRING ON LCD                     */
/** ARGUMENTS   : STRING                                  */
/** RETURNS     : ERROR STATUS                            */
/**********************************************************/
LCD_status LCD_writestr(uint8_t* u8_s_str)
{
     a18:	0f 93       	push	r16
     a1a:	1f 93       	push	r17
     a1c:	cf 93       	push	r28
     a1e:	8c 01       	movw	r16, r24
	uint8_t u8_a_letter = 0;   /** VARIABLE SIMULATES LETTER **/
     a20:	c0 e0       	ldi	r28, 0x00	; 0
	
	while (u8_s_str[u8_a_letter] != '\0') /** WHILE LETTER ISN'T NULL **/
     a22:	03 c0       	rjmp	.+6      	; 0xa2a <LCD_writestr+0x12>
	{
		LCD_writechar(u8_s_str[u8_a_letter]); /** SEND LETTER TO LCD **/
     a24:	0e 94 c5 04 	call	0x98a	; 0x98a <LCD_writechar>
		
		u8_a_letter++; /** JUMP TO THE NEXT LETTER **/
     a28:	cf 5f       	subi	r28, 0xFF	; 255
/**********************************************************/
LCD_status LCD_writestr(uint8_t* u8_s_str)
{
	uint8_t u8_a_letter = 0;   /** VARIABLE SIMULATES LETTER **/
	
	while (u8_s_str[u8_a_letter] != '\0') /** WHILE LETTER ISN'T NULL **/
     a2a:	f8 01       	movw	r30, r16
     a2c:	ec 0f       	add	r30, r28
     a2e:	f1 1d       	adc	r31, r1
     a30:	80 81       	ld	r24, Z
     a32:	81 11       	cpse	r24, r1
     a34:	f7 cf       	rjmp	.-18     	; 0xa24 <LCD_writestr+0xc>
	{
		LCD_writechar(u8_s_str[u8_a_letter]); /** SEND LETTER TO LCD **/
		
		u8_a_letter++; /** JUMP TO THE NEXT LETTER **/
	}
}
     a36:	cf 91       	pop	r28
     a38:	1f 91       	pop	r17
     a3a:	0f 91       	pop	r16
     a3c:	08 95       	ret

00000a3e <LCD_goto>:
/** FUNCTION TO JUMP TO SPECIFIC POSITION ON LCD          */
/** ARGUMENTS   : ROW , COLUMN (POSITION)                 */
/** RETURNS     : ERROR STATUS                            */
/**********************************************************/
LCD_status  LCD_goto(uint8_t u8_a_row , uint8_t u8_a_column)
{
     a3e:	cf 93       	push	r28
     a40:	df 93       	push	r29
     a42:	00 d0       	rcall	.+0      	; 0xa44 <LCD_goto+0x6>
     a44:	cd b7       	in	r28, 0x3d	; 61
     a46:	de b7       	in	r29, 0x3e	; 62
	uint8_t positions[2] = {0x80 , 0xC0}; /** POSITIONS OF 1st & 2nd ROWS **/
     a48:	90 e8       	ldi	r25, 0x80	; 128
     a4a:	99 83       	std	Y+1, r25	; 0x01
     a4c:	90 ec       	ldi	r25, 0xC0	; 192
     a4e:	9a 83       	std	Y+2, r25	; 0x02
	
	LCD_sendcmd(positions[u8_a_row] + u8_a_column); /** GO TO SPECIFIC MATRIX **/
     a50:	e1 e0       	ldi	r30, 0x01	; 1
     a52:	f0 e0       	ldi	r31, 0x00	; 0
     a54:	ec 0f       	add	r30, r28
     a56:	fd 1f       	adc	r31, r29
     a58:	e8 0f       	add	r30, r24
     a5a:	f1 1d       	adc	r31, r1
     a5c:	80 81       	ld	r24, Z
     a5e:	86 0f       	add	r24, r22
     a60:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_sendcmd>
}
     a64:	0f 90       	pop	r0
     a66:	0f 90       	pop	r0
     a68:	df 91       	pop	r29
     a6a:	cf 91       	pop	r28
     a6c:	08 95       	ret

00000a6e <LCD_writecustomchar>:
/** FUNCTION TO WRITE CUSOMIZED CHARACTER ON THE LCD      */
/** ARGUMENTS   : PATTERN , OCATION IN CGRAM              */
/** RETURNS     : ERROR STATUS                            */
/**********************************************************/
LCD_status LCD_writecustomchar(uint8_t * u8_a_pattern , uint8_t u8_a_location)
{
     a6e:	0f 93       	push	r16
     a70:	1f 93       	push	r17
     a72:	cf 93       	push	r28
     a74:	8c 01       	movw	r16, r24
	uint8_t u8_a_patterncounter = 0 ; /** ITERATOR ON THE ROWS OF CHARACTER PATTERN **/
	
	LCD_sendcmd( 0x40 + (u8_a_location * 8) ); /** SEND COMMAND TO LCD TO WRITE TO ITS RAM **/
     a76:	86 2f       	mov	r24, r22
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	08 96       	adiw	r24, 0x08	; 8
     a7c:	88 0f       	add	r24, r24
     a7e:	88 0f       	add	r24, r24
     a80:	88 0f       	add	r24, r24
     a82:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_sendcmd>
	
	for(u8_a_patterncounter = 0 ; u8_a_patterncounter < 8 ; u8_a_patterncounter++)
     a86:	c0 e0       	ldi	r28, 0x00	; 0
     a88:	07 c0       	rjmp	.+14     	; 0xa98 <LCD_writecustomchar+0x2a>
	{
		LCD_writechar(u8_a_pattern[u8_a_patterncounter]); /** STORE 8 BYTES (PATTERN) **/
     a8a:	f8 01       	movw	r30, r16
     a8c:	ec 0f       	add	r30, r28
     a8e:	f1 1d       	adc	r31, r1
     a90:	80 81       	ld	r24, Z
     a92:	0e 94 c5 04 	call	0x98a	; 0x98a <LCD_writechar>
{
	uint8_t u8_a_patterncounter = 0 ; /** ITERATOR ON THE ROWS OF CHARACTER PATTERN **/
	
	LCD_sendcmd( 0x40 + (u8_a_location * 8) ); /** SEND COMMAND TO LCD TO WRITE TO ITS RAM **/
	
	for(u8_a_patterncounter = 0 ; u8_a_patterncounter < 8 ; u8_a_patterncounter++)
     a96:	cf 5f       	subi	r28, 0xFF	; 255
     a98:	c8 30       	cpi	r28, 0x08	; 8
     a9a:	b8 f3       	brcs	.-18     	; 0xa8a <LCD_writecustomchar+0x1c>
	{
		LCD_writechar(u8_a_pattern[u8_a_patterncounter]); /** STORE 8 BYTES (PATTERN) **/
	}
}
     a9c:	cf 91       	pop	r28
     a9e:	1f 91       	pop	r17
     aa0:	0f 91       	pop	r16
     aa2:	08 95       	ret

00000aa4 <LCD_writeint>:
/** FUNCTION TO WRITE INT ON THE LCD                      */
/** ARGUMENTS   : ROW , COLUMN (POSITION)                 */
/** RETURNS     : ERROR STATUS                            */
/**********************************************************/
LCD_status LCD_writeint(sint32_t s32_a_num)
{
     aa4:	1f 93       	push	r17
     aa6:	cf 93       	push	r28
     aa8:	df 93       	push	r29
     aaa:	cd b7       	in	r28, 0x3d	; 61
     aac:	de b7       	in	r29, 0x3e	; 62
     aae:	2a 97       	sbiw	r28, 0x0a	; 10
     ab0:	0f b6       	in	r0, 0x3f	; 63
     ab2:	f8 94       	cli
     ab4:	de bf       	out	0x3e, r29	; 62
     ab6:	0f be       	out	0x3f, r0	; 63
     ab8:	cd bf       	out	0x3d, r28	; 61
	uint8_t i = 0 , k ;
	
	uint8_t number[10];
	
	/* In case of negative numbers */
	if(s32_a_num < 0)
     aba:	99 23       	and	r25, r25
     abc:	dc f5       	brge	.+118    	; 0xb34 <LCD_writeint+0x90>
	{
		s32_a_num *= -1;
     abe:	90 95       	com	r25
     ac0:	80 95       	com	r24
     ac2:	70 95       	com	r23
     ac4:	61 95       	neg	r22
     ac6:	7f 4f       	sbci	r23, 0xFF	; 255
     ac8:	8f 4f       	sbci	r24, 0xFF	; 255
     aca:	9f 4f       	sbci	r25, 0xFF	; 255
/** ARGUMENTS   : ROW , COLUMN (POSITION)                 */
/** RETURNS     : ERROR STATUS                            */
/**********************************************************/
LCD_status LCD_writeint(sint32_t s32_a_num)
{
	uint8_t i = 0 , k ;
     acc:	10 e0       	ldi	r17, 0x00	; 0
	/* In case of negative numbers */
	if(s32_a_num < 0)
	{
		s32_a_num *= -1;
		
		while(s32_a_num > 0)
     ace:	13 c0       	rjmp	.+38     	; 0xaf6 <LCD_writeint+0x52>
		{
			number[i] = (s32_a_num % 10) + 48;  //Equivalent ASCII of number
     ad0:	2a e0       	ldi	r18, 0x0A	; 10
     ad2:	30 e0       	ldi	r19, 0x00	; 0
     ad4:	40 e0       	ldi	r20, 0x00	; 0
     ad6:	50 e0       	ldi	r21, 0x00	; 0
     ad8:	0e 94 cb 09 	call	0x1396	; 0x1396 <__divmodsi4>
     adc:	e1 e0       	ldi	r30, 0x01	; 1
     ade:	f0 e0       	ldi	r31, 0x00	; 0
     ae0:	ec 0f       	add	r30, r28
     ae2:	fd 1f       	adc	r31, r29
     ae4:	e1 0f       	add	r30, r17
     ae6:	f1 1d       	adc	r31, r1
     ae8:	60 5d       	subi	r22, 0xD0	; 208
     aea:	60 83       	st	Z, r22
			s32_a_num /= 10;
     aec:	62 2f       	mov	r22, r18
     aee:	73 2f       	mov	r23, r19
     af0:	84 2f       	mov	r24, r20
     af2:	95 2f       	mov	r25, r21
			i++;
     af4:	1f 5f       	subi	r17, 0xFF	; 255
	/* In case of negative numbers */
	if(s32_a_num < 0)
	{
		s32_a_num *= -1;
		
		while(s32_a_num > 0)
     af6:	16 16       	cp	r1, r22
     af8:	17 06       	cpc	r1, r23
     afa:	18 06       	cpc	r1, r24
     afc:	19 06       	cpc	r1, r25
     afe:	44 f3       	brlt	.-48     	; 0xad0 <LCD_writeint+0x2c>
		{
			number[i] = (s32_a_num % 10) + 48;  //Equivalent ASCII of number
			s32_a_num /= 10;
			i++;
		}
		number[i] = '-'; // storing the negative sign
     b00:	e1 e0       	ldi	r30, 0x01	; 1
     b02:	f0 e0       	ldi	r31, 0x00	; 0
     b04:	ec 0f       	add	r30, r28
     b06:	fd 1f       	adc	r31, r29
     b08:	e1 0f       	add	r30, r17
     b0a:	f1 1d       	adc	r31, r1
     b0c:	8d e2       	ldi	r24, 0x2D	; 45
     b0e:	80 83       	st	Z, r24
		
		for(k = i+1 ; k > 0 ; k--)
     b10:	1f 5f       	subi	r17, 0xFF	; 255
     b12:	0d c0       	rjmp	.+26     	; 0xb2e <LCD_writeint+0x8a>
		{
			LCD_writechar(number[k - 1]); //Display each number
     b14:	e1 2f       	mov	r30, r17
     b16:	f0 e0       	ldi	r31, 0x00	; 0
     b18:	31 97       	sbiw	r30, 0x01	; 1
     b1a:	81 e0       	ldi	r24, 0x01	; 1
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	8c 0f       	add	r24, r28
     b20:	9d 1f       	adc	r25, r29
     b22:	e8 0f       	add	r30, r24
     b24:	f9 1f       	adc	r31, r25
     b26:	80 81       	ld	r24, Z
     b28:	0e 94 c5 04 	call	0x98a	; 0x98a <LCD_writechar>
			s32_a_num /= 10;
			i++;
		}
		number[i] = '-'; // storing the negative sign
		
		for(k = i+1 ; k > 0 ; k--)
     b2c:	11 50       	subi	r17, 0x01	; 1
     b2e:	11 11       	cpse	r17, r1
     b30:	f1 cf       	rjmp	.-30     	; 0xb14 <LCD_writeint+0x70>
     b32:	39 c0       	rjmp	.+114    	; 0xba6 <LCD_writeint+0x102>
		{
			LCD_writechar(number[k - 1]); //Display each number
		}
	}
	/* Zero case */
	else if(s32_a_num == 0)
     b34:	61 15       	cp	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	81 05       	cpc	r24, r1
     b3a:	91 05       	cpc	r25, r1
     b3c:	21 f4       	brne	.+8      	; 0xb46 <LCD_writeint+0xa2>
	{
		LCD_writechar('0');
     b3e:	80 e3       	ldi	r24, 0x30	; 48
     b40:	0e 94 c5 04 	call	0x98a	; 0x98a <LCD_writechar>
     b44:	30 c0       	rjmp	.+96     	; 0xba6 <LCD_writeint+0x102>
	}
	
	/* In case of positive numbers */
	else if(s32_a_num > 0)
     b46:	16 16       	cp	r1, r22
     b48:	17 06       	cpc	r1, r23
     b4a:	18 06       	cpc	r1, r24
     b4c:	19 06       	cpc	r1, r25
     b4e:	ac f0       	brlt	.+42     	; 0xb7a <LCD_writeint+0xd6>
     b50:	2a c0       	rjmp	.+84     	; 0xba6 <LCD_writeint+0x102>
	{
		while(s32_a_num > 0)
		{
			number[i] = (s32_a_num % 10) + 48; //Equivalent ASCII of number
     b52:	2a e0       	ldi	r18, 0x0A	; 10
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	40 e0       	ldi	r20, 0x00	; 0
     b58:	50 e0       	ldi	r21, 0x00	; 0
     b5a:	0e 94 cb 09 	call	0x1396	; 0x1396 <__divmodsi4>
     b5e:	e1 e0       	ldi	r30, 0x01	; 1
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	ec 0f       	add	r30, r28
     b64:	fd 1f       	adc	r31, r29
     b66:	e1 0f       	add	r30, r17
     b68:	f1 1d       	adc	r31, r1
     b6a:	60 5d       	subi	r22, 0xD0	; 208
     b6c:	60 83       	st	Z, r22
			s32_a_num /= 10;
     b6e:	62 2f       	mov	r22, r18
     b70:	73 2f       	mov	r23, r19
     b72:	84 2f       	mov	r24, r20
     b74:	95 2f       	mov	r25, r21
			i++;
     b76:	1f 5f       	subi	r17, 0xFF	; 255
     b78:	01 c0       	rjmp	.+2      	; 0xb7c <LCD_writeint+0xd8>
     b7a:	10 e0       	ldi	r17, 0x00	; 0
	}
	
	/* In case of positive numbers */
	else if(s32_a_num > 0)
	{
		while(s32_a_num > 0)
     b7c:	16 16       	cp	r1, r22
     b7e:	17 06       	cpc	r1, r23
     b80:	18 06       	cpc	r1, r24
     b82:	19 06       	cpc	r1, r25
     b84:	34 f3       	brlt	.-52     	; 0xb52 <LCD_writeint+0xae>
     b86:	0d c0       	rjmp	.+26     	; 0xba2 <LCD_writeint+0xfe>
			i++;
		}
		
		for(k = i ; k > 0 ; k--)
		{
			LCD_writechar(number[k-1]); //Display each number
     b88:	e1 2f       	mov	r30, r17
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
     b8c:	31 97       	sbiw	r30, 0x01	; 1
     b8e:	81 e0       	ldi	r24, 0x01	; 1
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	8c 0f       	add	r24, r28
     b94:	9d 1f       	adc	r25, r29
     b96:	e8 0f       	add	r30, r24
     b98:	f9 1f       	adc	r31, r25
     b9a:	80 81       	ld	r24, Z
     b9c:	0e 94 c5 04 	call	0x98a	; 0x98a <LCD_writechar>
			number[i] = (s32_a_num % 10) + 48; //Equivalent ASCII of number
			s32_a_num /= 10;
			i++;
		}
		
		for(k = i ; k > 0 ; k--)
     ba0:	11 50       	subi	r17, 0x01	; 1
     ba2:	11 11       	cpse	r17, r1
     ba4:	f1 cf       	rjmp	.-30     	; 0xb88 <LCD_writeint+0xe4>
		{
			LCD_writechar(number[k-1]); //Display each number
		}
	}
     ba6:	2a 96       	adiw	r28, 0x0a	; 10
     ba8:	0f b6       	in	r0, 0x3f	; 63
     baa:	f8 94       	cli
     bac:	de bf       	out	0x3e, r29	; 62
     bae:	0f be       	out	0x3f, r0	; 63
     bb0:	cd bf       	out	0x3d, r28	; 61
     bb2:	df 91       	pop	r29
     bb4:	cf 91       	pop	r28
     bb6:	1f 91       	pop	r17
     bb8:	08 95       	ret

00000bba <main>:

#include "APP/APP.h"

int main(void)
{
	APP_init(); /** INITIALIZATION **/
     bba:	0e 94 49 00 	call	0x92	; 0x92 <APP_init>
	
	APP_readuserpin(); /** READ USER PIN **/
     bbe:	0e 94 9d 00 	call	0x13a	; 0x13a <APP_readuserpin>
	
	APP_startcardcomm();  /** START **/ 
     bc2:	0e 94 ed 00 	call	0x1da	; 0x1da <APP_startcardcomm>
	
	//APP_pinvalidate(); /** VALIDATE USER INPUT **/
	
	APP_getamount(); /** GET NEEDED MONEY **/
     bc6:	0e 94 52 01 	call	0x2a4	; 0x2a4 <APP_getamount>
	
	APP_cardvalidate(); /** VALIDATE THE CARD **/
     bca:	0e 94 c9 01 	call	0x392	; 0x392 <APP_cardvalidate>
// 	while (1)
// 	{
// 		
// 	
// 	}
}
     bce:	80 e0       	ldi	r24, 0x00	; 0
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	08 95       	ret

00000bd4 <DIO_setpindir>:
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
	
	switch(u8_a_pindir) /** SWITCH CASE ON THE DIRECTION VALUE **/
     bd4:	44 23       	and	r20, r20
     bd6:	19 f0       	breq	.+6      	; 0xbde <DIO_setpindir+0xa>
     bd8:	41 30       	cpi	r20, 0x01	; 1
     bda:	e9 f1       	breq	.+122    	; 0xc56 <DIO_setpindir+0x82>
     bdc:	74 c0       	rjmp	.+232    	; 0xcc6 <DIO_setpindir+0xf2>
	{
		case DIO_PIN_INPUT:  /* INPUT CASE  */
		
		switch(u8_a_portid) /** SWITCH CASE ON THE PORT ID */
     bde:	81 30       	cpi	r24, 0x01	; 1
     be0:	99 f0       	breq	.+38     	; 0xc08 <DIO_setpindir+0x34>
     be2:	28 f0       	brcs	.+10     	; 0xbee <DIO_setpindir+0x1a>
     be4:	82 30       	cpi	r24, 0x02	; 2
     be6:	e9 f0       	breq	.+58     	; 0xc22 <DIO_setpindir+0x4e>
     be8:	83 30       	cpi	r24, 0x03	; 3
     bea:	41 f1       	breq	.+80     	; 0xc3c <DIO_setpindir+0x68>
     bec:	6e c0       	rjmp	.+220    	; 0xcca <DIO_setpindir+0xf6>
		{
			case DIO_PORTA:
			clear_bit(DDRA , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTA AS INPUT PIN **/
     bee:	2a b3       	in	r18, 0x1a	; 26
     bf0:	81 e0       	ldi	r24, 0x01	; 1
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	02 c0       	rjmp	.+4      	; 0xbfa <DIO_setpindir+0x26>
     bf6:	88 0f       	add	r24, r24
     bf8:	99 1f       	adc	r25, r25
     bfa:	6a 95       	dec	r22
     bfc:	e2 f7       	brpl	.-8      	; 0xbf6 <DIO_setpindir+0x22>
     bfe:	80 95       	com	r24
     c00:	82 23       	and	r24, r18
     c02:	8a bb       	out	0x1a, r24	; 26
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
     c04:	80 e0       	ldi	r24, 0x00	; 0
		
		switch(u8_a_portid) /** SWITCH CASE ON THE PORT ID */
		{
			case DIO_PORTA:
			clear_bit(DDRA , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTA AS INPUT PIN **/
			break;
     c06:	08 95       	ret
			
			case DIO_PORTB:
			clear_bit(DDRB , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTB AS INPUT PIN **/
     c08:	27 b3       	in	r18, 0x17	; 23
     c0a:	81 e0       	ldi	r24, 0x01	; 1
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	02 c0       	rjmp	.+4      	; 0xc14 <DIO_setpindir+0x40>
     c10:	88 0f       	add	r24, r24
     c12:	99 1f       	adc	r25, r25
     c14:	6a 95       	dec	r22
     c16:	e2 f7       	brpl	.-8      	; 0xc10 <DIO_setpindir+0x3c>
     c18:	80 95       	com	r24
     c1a:	82 23       	and	r24, r18
     c1c:	87 bb       	out	0x17, r24	; 23
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
     c1e:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(DDRA , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTA AS INPUT PIN **/
			break;
			
			case DIO_PORTB:
			clear_bit(DDRB , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTB AS INPUT PIN **/
			break;
     c20:	08 95       	ret
			
			case DIO_PORTC:
			clear_bit(DDRC , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTC AS INPUT PIN **/
     c22:	24 b3       	in	r18, 0x14	; 20
     c24:	81 e0       	ldi	r24, 0x01	; 1
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	02 c0       	rjmp	.+4      	; 0xc2e <DIO_setpindir+0x5a>
     c2a:	88 0f       	add	r24, r24
     c2c:	99 1f       	adc	r25, r25
     c2e:	6a 95       	dec	r22
     c30:	e2 f7       	brpl	.-8      	; 0xc2a <DIO_setpindir+0x56>
     c32:	80 95       	com	r24
     c34:	82 23       	and	r24, r18
     c36:	84 bb       	out	0x14, r24	; 20
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
     c38:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(DDRB , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTB AS INPUT PIN **/
			break;
			
			case DIO_PORTC:
			clear_bit(DDRC , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTC AS INPUT PIN **/
			break;
     c3a:	08 95       	ret
			
			case DIO_PORTD:
			clear_bit(DDRD , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTD AS INPUT PIN **/
     c3c:	21 b3       	in	r18, 0x11	; 17
     c3e:	81 e0       	ldi	r24, 0x01	; 1
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	02 c0       	rjmp	.+4      	; 0xc48 <DIO_setpindir+0x74>
     c44:	88 0f       	add	r24, r24
     c46:	99 1f       	adc	r25, r25
     c48:	6a 95       	dec	r22
     c4a:	e2 f7       	brpl	.-8      	; 0xc44 <DIO_setpindir+0x70>
     c4c:	80 95       	com	r24
     c4e:	82 23       	and	r24, r18
     c50:	81 bb       	out	0x11, r24	; 17
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
     c52:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(DDRC , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTC AS INPUT PIN **/
			break;
			
			case DIO_PORTD:
			clear_bit(DDRD , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTD AS INPUT PIN **/
			break;
     c54:	08 95       	ret
		} 
		break;
		
		case DIO_PIN_OUTPUT:  /* OUTPUT CASE  */
		
		switch(u8_a_portid) /** SWITCH CASE ON THE PORT ID */
     c56:	81 30       	cpi	r24, 0x01	; 1
     c58:	91 f0       	breq	.+36     	; 0xc7e <DIO_setpindir+0xaa>
     c5a:	28 f0       	brcs	.+10     	; 0xc66 <DIO_setpindir+0x92>
     c5c:	82 30       	cpi	r24, 0x02	; 2
     c5e:	d9 f0       	breq	.+54     	; 0xc96 <DIO_setpindir+0xc2>
     c60:	83 30       	cpi	r24, 0x03	; 3
     c62:	29 f1       	breq	.+74     	; 0xcae <DIO_setpindir+0xda>
     c64:	34 c0       	rjmp	.+104    	; 0xcce <DIO_setpindir+0xfa>
		{
			case DIO_PORTA:
			set_bit(DDRA , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
     c66:	2a b3       	in	r18, 0x1a	; 26
     c68:	81 e0       	ldi	r24, 0x01	; 1
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	02 c0       	rjmp	.+4      	; 0xc72 <DIO_setpindir+0x9e>
     c6e:	88 0f       	add	r24, r24
     c70:	99 1f       	adc	r25, r25
     c72:	6a 95       	dec	r22
     c74:	e2 f7       	brpl	.-8      	; 0xc6e <DIO_setpindir+0x9a>
     c76:	82 2b       	or	r24, r18
     c78:	8a bb       	out	0x1a, r24	; 26
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
     c7a:	80 e0       	ldi	r24, 0x00	; 0
		
		switch(u8_a_portid) /** SWITCH CASE ON THE PORT ID */
		{
			case DIO_PORTA:
			set_bit(DDRA , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
     c7c:	08 95       	ret
			
			case DIO_PORTB:
			set_bit(DDRB , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
     c7e:	27 b3       	in	r18, 0x17	; 23
     c80:	81 e0       	ldi	r24, 0x01	; 1
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	02 c0       	rjmp	.+4      	; 0xc8a <DIO_setpindir+0xb6>
     c86:	88 0f       	add	r24, r24
     c88:	99 1f       	adc	r25, r25
     c8a:	6a 95       	dec	r22
     c8c:	e2 f7       	brpl	.-8      	; 0xc86 <DIO_setpindir+0xb2>
     c8e:	82 2b       	or	r24, r18
     c90:	87 bb       	out	0x17, r24	; 23
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
     c92:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(DDRA , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
			
			case DIO_PORTB:
			set_bit(DDRB , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
     c94:	08 95       	ret
			
			case DIO_PORTC:
			set_bit(DDRC , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
     c96:	24 b3       	in	r18, 0x14	; 20
     c98:	81 e0       	ldi	r24, 0x01	; 1
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	02 c0       	rjmp	.+4      	; 0xca2 <DIO_setpindir+0xce>
     c9e:	88 0f       	add	r24, r24
     ca0:	99 1f       	adc	r25, r25
     ca2:	6a 95       	dec	r22
     ca4:	e2 f7       	brpl	.-8      	; 0xc9e <DIO_setpindir+0xca>
     ca6:	82 2b       	or	r24, r18
     ca8:	84 bb       	out	0x14, r24	; 20
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
     caa:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(DDRB , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
			
			case DIO_PORTC:
			set_bit(DDRC , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
     cac:	08 95       	ret
			
			case DIO_PORTD:
			set_bit(DDRD , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
     cae:	21 b3       	in	r18, 0x11	; 17
     cb0:	81 e0       	ldi	r24, 0x01	; 1
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	02 c0       	rjmp	.+4      	; 0xcba <DIO_setpindir+0xe6>
     cb6:	88 0f       	add	r24, r24
     cb8:	99 1f       	adc	r25, r25
     cba:	6a 95       	dec	r22
     cbc:	e2 f7       	brpl	.-8      	; 0xcb6 <DIO_setpindir+0xe2>
     cbe:	82 2b       	or	r24, r18
     cc0:	81 bb       	out	0x11, r24	; 17
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
     cc2:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(DDRC , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
			
			case DIO_PORTD:
			set_bit(DDRD , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
     cc4:	08 95       	ret
		} 
		break;
		 
		 
		default:  /** DIRECTION ISN'T INPUT OR OUTPUT */
		en_a_dirstate = NOT_VALID_DIRECTION ; /** RETURN AS DIR NOT VALID ERRORS **/
     cc6:	81 e0       	ldi	r24, 0x01	; 1
     cc8:	08 95       	ret
			case DIO_PORTD:
			clear_bit(DDRD , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTD AS INPUT PIN **/
			break;
			
			default: /** DO NOTHING **/
			en_a_dirstate = NOT_VALID_DIRECTION ; /** RETURN AS DIR NOT VALID ERRORS **/
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	08 95       	ret
			case DIO_PORTD:
			set_bit(DDRD , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
			
			default:  /** DO NOTHING **/
			en_a_dirstate = NOT_VALID_DIRECTION ; /** RETURN AS DIR NOT VALID ERRORS **/
     cce:	81 e0       	ldi	r24, 0x01	; 1
		en_a_dirstate = NOT_VALID_DIRECTION ; /** RETURN AS DIR NOT VALID ERRORS **/
		break ; 
	} 
	
	return en_a_dirstate ; /** RETURN THE STATE OF FUNCTION **/
}
     cd0:	08 95       	ret

00000cd2 <DIO_setpinvalue>:
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
	
	switch(u8_a_pinval)
     cd2:	44 23       	and	r20, r20
     cd4:	19 f0       	breq	.+6      	; 0xcdc <DIO_setpinvalue+0xa>
     cd6:	41 30       	cpi	r20, 0x01	; 1
     cd8:	e9 f1       	breq	.+122    	; 0xd54 <DIO_setpinvalue+0x82>
     cda:	74 c0       	rjmp	.+232    	; 0xdc4 <DIO_setpinvalue+0xf2>
	{
		case DIO_PIN_LOW:  /** IN CASE PIN VALUE IS LOW */
		
		switch(u8_a_portid)  /** SWITCH CASE ON THE PORT ID */ 
     cdc:	81 30       	cpi	r24, 0x01	; 1
     cde:	99 f0       	breq	.+38     	; 0xd06 <DIO_setpinvalue+0x34>
     ce0:	28 f0       	brcs	.+10     	; 0xcec <DIO_setpinvalue+0x1a>
     ce2:	82 30       	cpi	r24, 0x02	; 2
     ce4:	e9 f0       	breq	.+58     	; 0xd20 <DIO_setpinvalue+0x4e>
     ce6:	83 30       	cpi	r24, 0x03	; 3
     ce8:	41 f1       	breq	.+80     	; 0xd3a <DIO_setpinvalue+0x68>
     cea:	6e c0       	rjmp	.+220    	; 0xdc8 <DIO_setpinvalue+0xf6>
		{
			case DIO_PORTA:
			clear_bit(PORTA , u8_a_pinid);       /** SET THIS PIN AS LOW **/
     cec:	2b b3       	in	r18, 0x1b	; 27
     cee:	81 e0       	ldi	r24, 0x01	; 1
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	02 c0       	rjmp	.+4      	; 0xcf8 <DIO_setpinvalue+0x26>
     cf4:	88 0f       	add	r24, r24
     cf6:	99 1f       	adc	r25, r25
     cf8:	6a 95       	dec	r22
     cfa:	e2 f7       	brpl	.-8      	; 0xcf4 <DIO_setpinvalue+0x22>
     cfc:	80 95       	com	r24
     cfe:	82 23       	and	r24, r18
     d00:	8b bb       	out	0x1b, r24	; 27
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
     d02:	80 e0       	ldi	r24, 0x00	; 0
		
		switch(u8_a_portid)  /** SWITCH CASE ON THE PORT ID */ 
		{
			case DIO_PORTA:
			clear_bit(PORTA , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
     d04:	08 95       	ret
			
			case DIO_PORTB:
			clear_bit(PORTB , u8_a_pinid);       /** SET THIS PIN AS LOW **/
     d06:	28 b3       	in	r18, 0x18	; 24
     d08:	81 e0       	ldi	r24, 0x01	; 1
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	02 c0       	rjmp	.+4      	; 0xd12 <DIO_setpinvalue+0x40>
     d0e:	88 0f       	add	r24, r24
     d10:	99 1f       	adc	r25, r25
     d12:	6a 95       	dec	r22
     d14:	e2 f7       	brpl	.-8      	; 0xd0e <DIO_setpinvalue+0x3c>
     d16:	80 95       	com	r24
     d18:	82 23       	and	r24, r18
     d1a:	88 bb       	out	0x18, r24	; 24
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
     d1c:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(PORTA , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
			
			case DIO_PORTB:
			clear_bit(PORTB , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
     d1e:	08 95       	ret
			
			case DIO_PORTC:
			clear_bit(PORTC , u8_a_pinid);       /** SET THIS PIN AS LOW **/
     d20:	25 b3       	in	r18, 0x15	; 21
     d22:	81 e0       	ldi	r24, 0x01	; 1
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	02 c0       	rjmp	.+4      	; 0xd2c <DIO_setpinvalue+0x5a>
     d28:	88 0f       	add	r24, r24
     d2a:	99 1f       	adc	r25, r25
     d2c:	6a 95       	dec	r22
     d2e:	e2 f7       	brpl	.-8      	; 0xd28 <DIO_setpinvalue+0x56>
     d30:	80 95       	com	r24
     d32:	82 23       	and	r24, r18
     d34:	85 bb       	out	0x15, r24	; 21
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
     d36:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(PORTB , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
			
			case DIO_PORTC:
			clear_bit(PORTC , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
     d38:	08 95       	ret
			
			case DIO_PORTD:
			clear_bit(PORTD , u8_a_pinid);       /** SET THIS PIN AS LOW **/
     d3a:	22 b3       	in	r18, 0x12	; 18
     d3c:	81 e0       	ldi	r24, 0x01	; 1
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	02 c0       	rjmp	.+4      	; 0xd46 <DIO_setpinvalue+0x74>
     d42:	88 0f       	add	r24, r24
     d44:	99 1f       	adc	r25, r25
     d46:	6a 95       	dec	r22
     d48:	e2 f7       	brpl	.-8      	; 0xd42 <DIO_setpinvalue+0x70>
     d4a:	80 95       	com	r24
     d4c:	82 23       	and	r24, r18
     d4e:	82 bb       	out	0x12, r24	; 18
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
     d50:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(PORTC , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
			
			case DIO_PORTD:
			clear_bit(PORTD , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
     d52:	08 95       	ret
		} 
		break;
		
		case DIO_PIN_HIGH:
		
		switch(u8_a_portid)
     d54:	81 30       	cpi	r24, 0x01	; 1
     d56:	91 f0       	breq	.+36     	; 0xd7c <DIO_setpinvalue+0xaa>
     d58:	28 f0       	brcs	.+10     	; 0xd64 <DIO_setpinvalue+0x92>
     d5a:	82 30       	cpi	r24, 0x02	; 2
     d5c:	d9 f0       	breq	.+54     	; 0xd94 <DIO_setpinvalue+0xc2>
     d5e:	83 30       	cpi	r24, 0x03	; 3
     d60:	29 f1       	breq	.+74     	; 0xdac <DIO_setpinvalue+0xda>
     d62:	34 c0       	rjmp	.+104    	; 0xdcc <DIO_setpinvalue+0xfa>
		{
			case DIO_PORTA:
			set_bit(PORTA , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
     d64:	2b b3       	in	r18, 0x1b	; 27
     d66:	81 e0       	ldi	r24, 0x01	; 1
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	02 c0       	rjmp	.+4      	; 0xd70 <DIO_setpinvalue+0x9e>
     d6c:	88 0f       	add	r24, r24
     d6e:	99 1f       	adc	r25, r25
     d70:	6a 95       	dec	r22
     d72:	e2 f7       	brpl	.-8      	; 0xd6c <DIO_setpinvalue+0x9a>
     d74:	82 2b       	or	r24, r18
     d76:	8b bb       	out	0x1b, r24	; 27
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
     d78:	80 e0       	ldi	r24, 0x00	; 0
		
		switch(u8_a_portid)
		{
			case DIO_PORTA:
			set_bit(PORTA , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
     d7a:	08 95       	ret
			
			case DIO_PORTB:
			set_bit(PORTB , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
     d7c:	28 b3       	in	r18, 0x18	; 24
     d7e:	81 e0       	ldi	r24, 0x01	; 1
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	02 c0       	rjmp	.+4      	; 0xd88 <DIO_setpinvalue+0xb6>
     d84:	88 0f       	add	r24, r24
     d86:	99 1f       	adc	r25, r25
     d88:	6a 95       	dec	r22
     d8a:	e2 f7       	brpl	.-8      	; 0xd84 <DIO_setpinvalue+0xb2>
     d8c:	82 2b       	or	r24, r18
     d8e:	88 bb       	out	0x18, r24	; 24
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
     d90:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(PORTA , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
			
			case DIO_PORTB:
			set_bit(PORTB , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
     d92:	08 95       	ret
			
			case DIO_PORTC:
			set_bit(PORTC , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
     d94:	25 b3       	in	r18, 0x15	; 21
     d96:	81 e0       	ldi	r24, 0x01	; 1
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	02 c0       	rjmp	.+4      	; 0xda0 <DIO_setpinvalue+0xce>
     d9c:	88 0f       	add	r24, r24
     d9e:	99 1f       	adc	r25, r25
     da0:	6a 95       	dec	r22
     da2:	e2 f7       	brpl	.-8      	; 0xd9c <DIO_setpinvalue+0xca>
     da4:	82 2b       	or	r24, r18
     da6:	85 bb       	out	0x15, r24	; 21
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
     da8:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(PORTB , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
			
			case DIO_PORTC:
			set_bit(PORTC , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
     daa:	08 95       	ret
			
			case DIO_PORTD:
			set_bit(PORTD , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
     dac:	22 b3       	in	r18, 0x12	; 18
     dae:	81 e0       	ldi	r24, 0x01	; 1
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	02 c0       	rjmp	.+4      	; 0xdb8 <DIO_setpinvalue+0xe6>
     db4:	88 0f       	add	r24, r24
     db6:	99 1f       	adc	r25, r25
     db8:	6a 95       	dec	r22
     dba:	e2 f7       	brpl	.-8      	; 0xdb4 <DIO_setpinvalue+0xe2>
     dbc:	82 2b       	or	r24, r18
     dbe:	82 bb       	out	0x12, r24	; 18
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
     dc0:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(PORTC , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
			
			case DIO_PORTD:
			set_bit(PORTD , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
     dc2:	08 95       	ret
			break;
		} 
		break;
		
		default :
		en_a_valstate = NOT_VALID_VALUE ;  /** RETURN VALUE AS NOT VALID **/
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	08 95       	ret
			case DIO_PORTD:
			clear_bit(PORTD , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
			
			default:
			en_a_valstate = NOT_VALID_VALUE ;  /** RETURN VALUE AS NOT VALID **/
     dc8:	81 e0       	ldi	r24, 0x01	; 1
     dca:	08 95       	ret
			case DIO_PORTD:
			set_bit(PORTD , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
			
			default:
			en_a_valstate = NOT_VALID_VALUE ;  /** RETURN VALUE AS NOT VALID **/
     dcc:	81 e0       	ldi	r24, 0x01	; 1
		en_a_valstate = NOT_VALID_VALUE ;  /** RETURN VALUE AS NOT VALID **/
		break ;
	} 
	
	return en_a_valstate ; /** RETURN THE FINAL STATE OF THE FUNCTION */
}
     dce:	08 95       	ret

00000dd0 <DIO_readpin>:
/******************************************************************/
PinRead_t DIO_readpin(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t* u8_a_val)
{
	PinRead_t en_a_Pinstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
	
	switch(u8_a_portid)  /** SWITCH CASE ON PORT ID **/
     dd0:	81 30       	cpi	r24, 0x01	; 1
     dd2:	99 f0       	breq	.+38     	; 0xdfa <DIO_readpin+0x2a>
     dd4:	28 f0       	brcs	.+10     	; 0xde0 <DIO_readpin+0x10>
     dd6:	82 30       	cpi	r24, 0x02	; 2
     dd8:	e9 f0       	breq	.+58     	; 0xe14 <DIO_readpin+0x44>
     dda:	83 30       	cpi	r24, 0x03	; 3
     ddc:	41 f1       	breq	.+80     	; 0xe2e <DIO_readpin+0x5e>
     dde:	34 c0       	rjmp	.+104    	; 0xe48 <DIO_readpin+0x78>
	{
		case DIO_PORTA:               /** PORTA  **/
		*u8_a_val = get_bit(PINA , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
     de0:	89 b3       	in	r24, 0x19	; 25
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	02 c0       	rjmp	.+4      	; 0xdea <DIO_readpin+0x1a>
     de6:	95 95       	asr	r25
     de8:	87 95       	ror	r24
     dea:	6a 95       	dec	r22
     dec:	e2 f7       	brpl	.-8      	; 0xde6 <DIO_readpin+0x16>
     dee:	81 70       	andi	r24, 0x01	; 1
     df0:	89 bb       	out	0x19, r24	; 25
     df2:	fa 01       	movw	r30, r20
     df4:	80 83       	st	Z, r24
/* INPUT   : u8_a_portid , PINID , POINTER TO SET THE VALUE IN IT      */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_readpin(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t* u8_a_val)
{
	PinRead_t en_a_Pinstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
     df6:	80 e0       	ldi	r24, 0x00	; 0
	
	switch(u8_a_portid)  /** SWITCH CASE ON PORT ID **/
	{
		case DIO_PORTA:               /** PORTA  **/
		*u8_a_val = get_bit(PINA , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
     df8:	08 95       	ret
		
		case DIO_PORTB:               /** PORTB  **/
		*u8_a_val = get_bit(PINB , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
     dfa:	86 b3       	in	r24, 0x16	; 22
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	02 c0       	rjmp	.+4      	; 0xe04 <DIO_readpin+0x34>
     e00:	95 95       	asr	r25
     e02:	87 95       	ror	r24
     e04:	6a 95       	dec	r22
     e06:	e2 f7       	brpl	.-8      	; 0xe00 <DIO_readpin+0x30>
     e08:	81 70       	andi	r24, 0x01	; 1
     e0a:	86 bb       	out	0x16, r24	; 22
     e0c:	fa 01       	movw	r30, r20
     e0e:	80 83       	st	Z, r24
/* INPUT   : u8_a_portid , PINID , POINTER TO SET THE VALUE IN IT      */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_readpin(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t* u8_a_val)
{
	PinRead_t en_a_Pinstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
     e10:	80 e0       	ldi	r24, 0x00	; 0
		*u8_a_val = get_bit(PINA , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
		
		case DIO_PORTB:               /** PORTB  **/
		*u8_a_val = get_bit(PINB , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
     e12:	08 95       	ret
		
		case DIO_PORTC:               /** PORTC  **/
		*u8_a_val = get_bit(PINC , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
     e14:	83 b3       	in	r24, 0x13	; 19
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	02 c0       	rjmp	.+4      	; 0xe1e <DIO_readpin+0x4e>
     e1a:	95 95       	asr	r25
     e1c:	87 95       	ror	r24
     e1e:	6a 95       	dec	r22
     e20:	e2 f7       	brpl	.-8      	; 0xe1a <DIO_readpin+0x4a>
     e22:	81 70       	andi	r24, 0x01	; 1
     e24:	83 bb       	out	0x13, r24	; 19
     e26:	fa 01       	movw	r30, r20
     e28:	80 83       	st	Z, r24
/* INPUT   : u8_a_portid , PINID , POINTER TO SET THE VALUE IN IT      */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_readpin(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t* u8_a_val)
{
	PinRead_t en_a_Pinstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
     e2a:	80 e0       	ldi	r24, 0x00	; 0
		*u8_a_val = get_bit(PINB , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
		
		case DIO_PORTC:               /** PORTC  **/
		*u8_a_val = get_bit(PINC , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
     e2c:	08 95       	ret
		
		case DIO_PORTD:               /** PORTD  **/
		*u8_a_val = get_bit(PIND , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
     e2e:	80 b3       	in	r24, 0x10	; 16
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	02 c0       	rjmp	.+4      	; 0xe38 <DIO_readpin+0x68>
     e34:	95 95       	asr	r25
     e36:	87 95       	ror	r24
     e38:	6a 95       	dec	r22
     e3a:	e2 f7       	brpl	.-8      	; 0xe34 <DIO_readpin+0x64>
     e3c:	81 70       	andi	r24, 0x01	; 1
     e3e:	80 bb       	out	0x10, r24	; 16
     e40:	fa 01       	movw	r30, r20
     e42:	80 83       	st	Z, r24
/* INPUT   : u8_a_portid , PINID , POINTER TO SET THE VALUE IN IT      */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_readpin(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t* u8_a_val)
{
	PinRead_t en_a_Pinstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
     e44:	80 e0       	ldi	r24, 0x00	; 0
		*u8_a_val = get_bit(PINC , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
		
		case DIO_PORTD:               /** PORTD  **/
		*u8_a_val = get_bit(PIND , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
     e46:	08 95       	ret
		
		default:
		en_a_Pinstate = NOT_VALID_READ ;  /** READ IS NOT VALID  **/
     e48:	81 e0       	ldi	r24, 0x01	; 1
		break;
	} 
	
	return en_a_Pinstate ; /** RETURN THE FINAL STATE OF THE FUNCTION **/	
}
     e4a:	08 95       	ret

00000e4c <DIO_togglepin>:
/******************************************************************/
PinRead_t DIO_togglepin(uint8_t u8_a_portid , uint8_t u8_a_pinid )
{
	PinRead_t en_a_Pinreadstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
	
	switch(u8_a_portid) /** SWITCH ON THE PORT ID **/
     e4c:	81 30       	cpi	r24, 0x01	; 1
     e4e:	91 f0       	breq	.+36     	; 0xe74 <DIO_togglepin+0x28>
     e50:	28 f0       	brcs	.+10     	; 0xe5c <DIO_togglepin+0x10>
     e52:	82 30       	cpi	r24, 0x02	; 2
     e54:	d9 f0       	breq	.+54     	; 0xe8c <DIO_togglepin+0x40>
     e56:	83 30       	cpi	r24, 0x03	; 3
     e58:	29 f1       	breq	.+74     	; 0xea4 <DIO_togglepin+0x58>
     e5a:	30 c0       	rjmp	.+96     	; 0xebc <DIO_togglepin+0x70>
	{
		case DIO_PORTA:
		toggle_bit(PORTA , u8_a_pinid);
     e5c:	2b b3       	in	r18, 0x1b	; 27
     e5e:	81 e0       	ldi	r24, 0x01	; 1
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	02 c0       	rjmp	.+4      	; 0xe68 <DIO_togglepin+0x1c>
     e64:	88 0f       	add	r24, r24
     e66:	99 1f       	adc	r25, r25
     e68:	6a 95       	dec	r22
     e6a:	e2 f7       	brpl	.-8      	; 0xe64 <DIO_togglepin+0x18>
     e6c:	82 27       	eor	r24, r18
     e6e:	8b bb       	out	0x1b, r24	; 27
/* INPUT   : u8_a_portid , PINID                                  */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_togglepin(uint8_t u8_a_portid , uint8_t u8_a_pinid )
{
	PinRead_t en_a_Pinreadstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
     e70:	80 e0       	ldi	r24, 0x00	; 0
	
	switch(u8_a_portid) /** SWITCH ON THE PORT ID **/
	{
		case DIO_PORTA:
		toggle_bit(PORTA , u8_a_pinid);
		break;
     e72:	08 95       	ret
		
		case DIO_PORTB:
		toggle_bit(PORTB , u8_a_pinid);
     e74:	28 b3       	in	r18, 0x18	; 24
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	02 c0       	rjmp	.+4      	; 0xe80 <DIO_togglepin+0x34>
     e7c:	88 0f       	add	r24, r24
     e7e:	99 1f       	adc	r25, r25
     e80:	6a 95       	dec	r22
     e82:	e2 f7       	brpl	.-8      	; 0xe7c <DIO_togglepin+0x30>
     e84:	82 27       	eor	r24, r18
     e86:	88 bb       	out	0x18, r24	; 24
/* INPUT   : u8_a_portid , PINID                                  */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_togglepin(uint8_t u8_a_portid , uint8_t u8_a_pinid )
{
	PinRead_t en_a_Pinreadstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
     e88:	80 e0       	ldi	r24, 0x00	; 0
		toggle_bit(PORTA , u8_a_pinid);
		break;
		
		case DIO_PORTB:
		toggle_bit(PORTB , u8_a_pinid);
		break;
     e8a:	08 95       	ret
		
		case DIO_PORTC:
		toggle_bit(PORTC , u8_a_pinid);
     e8c:	25 b3       	in	r18, 0x15	; 21
     e8e:	81 e0       	ldi	r24, 0x01	; 1
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	02 c0       	rjmp	.+4      	; 0xe98 <DIO_togglepin+0x4c>
     e94:	88 0f       	add	r24, r24
     e96:	99 1f       	adc	r25, r25
     e98:	6a 95       	dec	r22
     e9a:	e2 f7       	brpl	.-8      	; 0xe94 <DIO_togglepin+0x48>
     e9c:	82 27       	eor	r24, r18
     e9e:	85 bb       	out	0x15, r24	; 21
/* INPUT   : u8_a_portid , PINID                                  */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_togglepin(uint8_t u8_a_portid , uint8_t u8_a_pinid )
{
	PinRead_t en_a_Pinreadstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
     ea0:	80 e0       	ldi	r24, 0x00	; 0
		toggle_bit(PORTB , u8_a_pinid);
		break;
		
		case DIO_PORTC:
		toggle_bit(PORTC , u8_a_pinid);
		break;
     ea2:	08 95       	ret
		
		case DIO_PORTD:
		toggle_bit(PORTD , u8_a_pinid);
     ea4:	22 b3       	in	r18, 0x12	; 18
     ea6:	81 e0       	ldi	r24, 0x01	; 1
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <DIO_togglepin+0x64>
     eac:	88 0f       	add	r24, r24
     eae:	99 1f       	adc	r25, r25
     eb0:	6a 95       	dec	r22
     eb2:	e2 f7       	brpl	.-8      	; 0xeac <DIO_togglepin+0x60>
     eb4:	82 27       	eor	r24, r18
     eb6:	82 bb       	out	0x12, r24	; 18
/* INPUT   : u8_a_portid , PINID                                  */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_togglepin(uint8_t u8_a_portid , uint8_t u8_a_pinid )
{
	PinRead_t en_a_Pinreadstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
     eb8:	80 e0       	ldi	r24, 0x00	; 0
		toggle_bit(PORTC , u8_a_pinid);
		break;
		
		case DIO_PORTD:
		toggle_bit(PORTD , u8_a_pinid);
		break;
     eba:	08 95       	ret
		
		default:
		/** DO NOTHING **/
		en_a_Pinreadstate = NOT_VALID_READ ; /** RETURN AN ERROR **/
     ebc:	81 e0       	ldi	r24, 0x01	; 1
		break;
	} 
	
	return en_a_Pinreadstate ; /** RETURN THE FINAL STATE OF THE FUNCTION **/
}
     ebe:	08 95       	ret

00000ec0 <SPI_initslave>:
	{
		SPI_sendbyte(u8_a_str[u8_L_counter]); /** SEND CHARACTER **/
		
		u8_L_counter++; /* MOVE TO THE SECOND LETTER */
	}
}
     ec0:	40 e0       	ldi	r20, 0x00	; 0
     ec2:	64 e0       	ldi	r22, 0x04	; 4
     ec4:	81 e0       	ldi	r24, 0x01	; 1
     ec6:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <DIO_setpindir>
     eca:	40 e0       	ldi	r20, 0x00	; 0
     ecc:	65 e0       	ldi	r22, 0x05	; 5
     ece:	81 e0       	ldi	r24, 0x01	; 1
     ed0:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <DIO_setpindir>
     ed4:	41 e0       	ldi	r20, 0x01	; 1
     ed6:	66 e0       	ldi	r22, 0x06	; 6
     ed8:	81 e0       	ldi	r24, 0x01	; 1
     eda:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <DIO_setpindir>
     ede:	40 e0       	ldi	r20, 0x00	; 0
     ee0:	67 e0       	ldi	r22, 0x07	; 7
     ee2:	81 e0       	ldi	r24, 0x01	; 1
     ee4:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <DIO_setpindir>
     ee8:	8d b1       	in	r24, 0x0d	; 13
     eea:	80 64       	ori	r24, 0x40	; 64
     eec:	8d b9       	out	0x0d, r24	; 13
     eee:	8d b1       	in	r24, 0x0d	; 13
     ef0:	8f 7e       	andi	r24, 0xEF	; 239
     ef2:	8d b9       	out	0x0d, r24	; 13
     ef4:	8d b1       	in	r24, 0x0d	; 13
     ef6:	87 7f       	andi	r24, 0xF7	; 247
     ef8:	8d b9       	out	0x0d, r24	; 13
     efa:	8d b1       	in	r24, 0x0d	; 13
     efc:	8b 7f       	andi	r24, 0xFB	; 251
     efe:	8d b9       	out	0x0d, r24	; 13
     f00:	08 95       	ret

00000f02 <SPI_receivebyte>:
     f02:	77 9b       	sbis	0x0e, 7	; 14
     f04:	fe cf       	rjmp	.-4      	; 0xf02 <SPI_receivebyte>
     f06:	2f b1       	in	r18, 0x0f	; 15
     f08:	fc 01       	movw	r30, r24
     f0a:	20 83       	st	Z, r18
     f0c:	08 95       	ret

00000f0e <SPI_receivestring>:
/** FUNCTION FOR MASTER TO SEND STRING                          **/
/** ARGUMENTS  : u8_a_str (string)                              **/
/** RETURNS    : en_a_spierrstatus                              **/
/*****************************************************************/
en_a_spierrstatus SPI_receivestring(uint8_t * u8_a_str)
{
     f0e:	0f 93       	push	r16
     f10:	1f 93       	push	r17
     f12:	cf 93       	push	r28
     f14:	8c 01       	movw	r16, r24
	uint8_t u8_L_counter = 0 ; /** COUNTER FOR STRING LETTERS **/
     f16:	c0 e0       	ldi	r28, 0x00	; 0
	
	//str[counter] = SPI_RECEIVE_BYTE();
	
	while (u8_a_str[u8_L_counter] != '\0')
     f18:	03 c0       	rjmp	.+6      	; 0xf20 <SPI_receivestring+0x12>
	{
		SPI_receivebyte(&u8_a_str[u8_L_counter]); /** RECEIVE CHARACTER **/
     f1a:	0e 94 81 07 	call	0xf02	; 0xf02 <SPI_receivebyte>
		
		u8_L_counter++ ; /* MOVE TO THE SECOND LETTER */
     f1e:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t u8_L_counter = 0 ; /** COUNTER FOR STRING LETTERS **/
	
	//str[counter] = SPI_RECEIVE_BYTE();
	
	while (u8_a_str[u8_L_counter] != '\0')
     f20:	c8 01       	movw	r24, r16
     f22:	8c 0f       	add	r24, r28
     f24:	91 1d       	adc	r25, r1
     f26:	fc 01       	movw	r30, r24
     f28:	20 81       	ld	r18, Z
     f2a:	21 11       	cpse	r18, r1
     f2c:	f6 cf       	rjmp	.-20     	; 0xf1a <SPI_receivestring+0xc>
		
		u8_L_counter++ ; /* MOVE TO THE SECOND LETTER */
	}
	
	
	u8_a_str[u8_L_counter] = '\0' ; /* TERMINATOR OF STRING */
     f2e:	10 82       	st	Z, r1
}
     f30:	cf 91       	pop	r28
     f32:	1f 91       	pop	r17
     f34:	0f 91       	pop	r16
     f36:	08 95       	ret

00000f38 <TMR0_init>:
	 /* TIMER MODE OF TMR0 */
	#elif TIMER0_CLK_SRC == INTERNAL_CLK_SRC
	
	 #if TIMER0_MODE == TMR0_NORMAL_MODE
	 
	 clear_bit(TCCR0 , 7);
     f38:	83 b7       	in	r24, 0x33	; 51
     f3a:	8f 77       	andi	r24, 0x7F	; 127
     f3c:	83 bf       	out	0x33, r24	; 51
	 clear_bit(TCCR0 , 6);
     f3e:	83 b7       	in	r24, 0x33	; 51
     f40:	8f 7b       	andi	r24, 0xBF	; 191
     f42:	83 bf       	out	0x33, r24	; 51
	 clear_bit(TCCR0 , 3);
     f44:	83 b7       	in	r24, 0x33	; 51
     f46:	87 7f       	andi	r24, 0xF7	; 247
     f48:	83 bf       	out	0x33, r24	; 51
	 clear_bit(TCCR0 , 4);
     f4a:	83 b7       	in	r24, 0x33	; 51
     f4c:	8f 7e       	andi	r24, 0xEF	; 239
     f4e:	83 bf       	out	0x33, r24	; 51
	 clear_bit(TCCR0 , 5);
     f50:	83 b7       	in	r24, 0x33	; 51
     f52:	8f 7d       	andi	r24, 0xDF	; 223
     f54:	83 bf       	out	0x33, r24	; 51
	  #endif
	 #endif
	#endif
	
	return en_a_initstatus ; /** RETURN THE STATUS OF INITIALIZATION **/
}
     f56:	80 e0       	ldi	r24, 0x00	; 0
     f58:	08 95       	ret

00000f5a <TMR0_start>:
{
	TMR0_start_error en_a_startstatus = VALID_START ; /** VARIABLE TO RETURN THE STATUS OF START **/
	
	#if TIMER0_PRESCALER_VAL == PRESCALER_1024
	
	set_bit(TCCR0 , 0);
     f5a:	83 b7       	in	r24, 0x33	; 51
     f5c:	81 60       	ori	r24, 0x01	; 1
     f5e:	83 bf       	out	0x33, r24	; 51
	clear_bit(TCCR0 , 1);
     f60:	83 b7       	in	r24, 0x33	; 51
     f62:	8d 7f       	andi	r24, 0xFD	; 253
     f64:	83 bf       	out	0x33, r24	; 51
	set_bit(TCCR0 , 2);
     f66:	83 b7       	in	r24, 0x33	; 51
     f68:	84 60       	ori	r24, 0x04	; 4
     f6a:	83 bf       	out	0x33, r24	; 51
	en_a_startstatus = VALID_START ; /** START DONE PROBERLY **/
	
	#endif
	
	return en_a_startstatus ; /** RETURN THE STATUS **/
}
     f6c:	80 e0       	ldi	r24, 0x00	; 0
     f6e:	08 95       	ret

00000f70 <TMR0_stop>:
TMR0_stop_error TMR0_stop(void)
{
	TMR0_stop_error en_a_stopStatus = VALID_STOP ; /** VARIABLE TO RETURN THE STATUS **/
	
	/** SET CONFIGURATIONS AS NO CLOCK SOURCE **/
	clear_bit(TCCR0 , 0);
     f70:	83 b7       	in	r24, 0x33	; 51
     f72:	8e 7f       	andi	r24, 0xFE	; 254
     f74:	83 bf       	out	0x33, r24	; 51
	clear_bit(TCCR0 , 1);
     f76:	83 b7       	in	r24, 0x33	; 51
     f78:	8d 7f       	andi	r24, 0xFD	; 253
     f7a:	83 bf       	out	0x33, r24	; 51
	clear_bit(TCCR0 , 2);
     f7c:	83 b7       	in	r24, 0x33	; 51
     f7e:	8b 7f       	andi	r24, 0xFB	; 251
     f80:	83 bf       	out	0x33, r24	; 51
	
	en_a_stopStatus = VALID_STOP ; /** STOP DONE PROPERLY **/
	
	return en_a_stopStatus ; /** RETURN THE STATUS **/
	
}
     f82:	80 e0       	ldi	r24, 0x00	; 0
     f84:	08 95       	ret

00000f86 <TMR0_delayms>:
	/******************************************************************************************/
	/**               THIS CALCULATIONS CONFIGURED AS F_CPU   16 MHZ                         **/
	/******************************************************************************************/
	#if TIMER0_PRESCALER_VAL == PRESCALER_1024  /** CHECK THE PRESCALLER FROM CONFIG FILE **/
	 
        u32_gs_tmr0nuofovs = (u32_a_delayms / 16.384);   /** CALCULATING NUMBER OF OVERFLOWS ( DESIRED DELAY / TIME OF OVER FLOW ) **/ 
     f86:	0e 94 19 09 	call	0x1232	; 0x1232 <__floatunsisf>
     f8a:	2f e6       	ldi	r18, 0x6F	; 111
     f8c:	32 e1       	ldi	r19, 0x12	; 18
     f8e:	43 e8       	ldi	r20, 0x83	; 131
     f90:	51 e4       	ldi	r21, 0x41	; 65
     f92:	0e 94 71 08 	call	0x10e2	; 0x10e2 <__divsf3>
     f96:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <__fixunssfsi>
     f9a:	60 93 b4 01 	sts	0x01B4, r22	; 0x8001b4 <u32_gs_tmr0nuofovs>
     f9e:	70 93 b5 01 	sts	0x01B5, r23	; 0x8001b5 <u32_gs_tmr0nuofovs+0x1>
     fa2:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <u32_gs_tmr0nuofovs+0x2>
     fa6:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <u32_gs_tmr0nuofovs+0x3>
	
        TCNT0 = 0 ;   /** SET THE INITIAL VALUE IN TCNT0 REGISTER **/
     faa:	12 be       	out	0x32, r1	; 50
	
	    en_a_delaystatus = VALID_DELAY ; /** VALID DELAY CONFIGURATIN **/
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
     fac:	0e 94 ad 07 	call	0xf5a	; 0xf5a <TMR0_start>
/** RETURNS    : TMR0_delay                                                    */
/*******************************************************************************/
TMR0_delay_error TMR0_delayms(uint32_t u32_a_delayms)
{
	
	uint32_t u32_a_overflowcounter = 0 ;
     fb0:	40 e0       	ldi	r20, 0x00	; 0
     fb2:	50 e0       	ldi	r21, 0x00	; 0
     fb4:	ba 01       	movw	r22, r20
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
	
	while ( u32_a_overflowcounter < u32_gs_tmr0nuofovs ) /** STUCK IN THIS LOOP UNTILL THIS CONDITION IS FALSE **/
     fb6:	0a c0       	rjmp	.+20     	; 0xfcc <TMR0_delayms+0x46>
	{
		while((TIFR & (1 << 0)) == 0); /** DO NOTHING UNTILL THIS FLAG RAISED (OVERFLOW HAPPENED) **/
     fb8:	08 b6       	in	r0, 0x38	; 56
     fba:	00 fe       	sbrs	r0, 0
     fbc:	fd cf       	rjmp	.-6      	; 0xfb8 <TMR0_delayms+0x32>
		
		set_bit(TIFR , 0);        /** CLEAR THE FLAG BY SOFTWARE **/
     fbe:	88 b7       	in	r24, 0x38	; 56
     fc0:	81 60       	ori	r24, 0x01	; 1
     fc2:	88 bf       	out	0x38, r24	; 56
		
		u32_a_overflowcounter++ ; /** INCREASE THE OVERFLOWS BY ONE **/
     fc4:	4f 5f       	subi	r20, 0xFF	; 255
     fc6:	5f 4f       	sbci	r21, 0xFF	; 255
     fc8:	6f 4f       	sbci	r22, 0xFF	; 255
     fca:	7f 4f       	sbci	r23, 0xFF	; 255
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
	
	while ( u32_a_overflowcounter < u32_gs_tmr0nuofovs ) /** STUCK IN THIS LOOP UNTILL THIS CONDITION IS FALSE **/
     fcc:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <u32_gs_tmr0nuofovs>
     fd0:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <u32_gs_tmr0nuofovs+0x1>
     fd4:	a0 91 b6 01 	lds	r26, 0x01B6	; 0x8001b6 <u32_gs_tmr0nuofovs+0x2>
     fd8:	b0 91 b7 01 	lds	r27, 0x01B7	; 0x8001b7 <u32_gs_tmr0nuofovs+0x3>
     fdc:	48 17       	cp	r20, r24
     fde:	59 07       	cpc	r21, r25
     fe0:	6a 07       	cpc	r22, r26
     fe2:	7b 07       	cpc	r23, r27
     fe4:	48 f3       	brcs	.-46     	; 0xfb8 <TMR0_delayms+0x32>
		set_bit(TIFR , 0);        /** CLEAR THE FLAG BY SOFTWARE **/
		
		u32_a_overflowcounter++ ; /** INCREASE THE OVERFLOWS BY ONE **/
	}
	
	u32_gs_tmr0nuofovs = 0 ; /** REINTIALIZE THE OVERFLOWS COUNTER TO 0 AGAIN **/
     fe6:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <u32_gs_tmr0nuofovs>
     fea:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <u32_gs_tmr0nuofovs+0x1>
     fee:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <u32_gs_tmr0nuofovs+0x2>
     ff2:	10 92 b7 01 	sts	0x01B7, r1	; 0x8001b7 <u32_gs_tmr0nuofovs+0x3>

	TMR0_stop();   /** STOP TMR0 TOSTART FROM 0 WHEN IT CALLED AGAIN **/
     ff6:	0e 94 b8 07 	call	0xf70	; 0xf70 <TMR0_stop>
	
	return en_a_delaystatus ; /** RETURN THE STATUS **/
}
     ffa:	80 e0       	ldi	r24, 0x00	; 0
     ffc:	08 95       	ret

00000ffe <__subsf3>:
     ffe:	50 58       	subi	r21, 0x80	; 128

00001000 <__addsf3>:
    1000:	bb 27       	eor	r27, r27
    1002:	aa 27       	eor	r26, r26
    1004:	0e 94 17 08 	call	0x102e	; 0x102e <__addsf3x>
    1008:	0c 94 91 09 	jmp	0x1322	; 0x1322 <__fp_round>
    100c:	0e 94 83 09 	call	0x1306	; 0x1306 <__fp_pscA>
    1010:	38 f0       	brcs	.+14     	; 0x1020 <__addsf3+0x20>
    1012:	0e 94 8a 09 	call	0x1314	; 0x1314 <__fp_pscB>
    1016:	20 f0       	brcs	.+8      	; 0x1020 <__addsf3+0x20>
    1018:	39 f4       	brne	.+14     	; 0x1028 <__addsf3+0x28>
    101a:	9f 3f       	cpi	r25, 0xFF	; 255
    101c:	19 f4       	brne	.+6      	; 0x1024 <__addsf3+0x24>
    101e:	26 f4       	brtc	.+8      	; 0x1028 <__addsf3+0x28>
    1020:	0c 94 80 09 	jmp	0x1300	; 0x1300 <__fp_nan>
    1024:	0e f4       	brtc	.+2      	; 0x1028 <__addsf3+0x28>
    1026:	e0 95       	com	r30
    1028:	e7 fb       	bst	r30, 7
    102a:	0c 94 7a 09 	jmp	0x12f4	; 0x12f4 <__fp_inf>

0000102e <__addsf3x>:
    102e:	e9 2f       	mov	r30, r25
    1030:	0e 94 a2 09 	call	0x1344	; 0x1344 <__fp_split3>
    1034:	58 f3       	brcs	.-42     	; 0x100c <__addsf3+0xc>
    1036:	ba 17       	cp	r27, r26
    1038:	62 07       	cpc	r22, r18
    103a:	73 07       	cpc	r23, r19
    103c:	84 07       	cpc	r24, r20
    103e:	95 07       	cpc	r25, r21
    1040:	20 f0       	brcs	.+8      	; 0x104a <__addsf3x+0x1c>
    1042:	79 f4       	brne	.+30     	; 0x1062 <__addsf3x+0x34>
    1044:	a6 f5       	brtc	.+104    	; 0x10ae <__addsf3x+0x80>
    1046:	0c 94 c4 09 	jmp	0x1388	; 0x1388 <__fp_zero>
    104a:	0e f4       	brtc	.+2      	; 0x104e <__addsf3x+0x20>
    104c:	e0 95       	com	r30
    104e:	0b 2e       	mov	r0, r27
    1050:	ba 2f       	mov	r27, r26
    1052:	a0 2d       	mov	r26, r0
    1054:	0b 01       	movw	r0, r22
    1056:	b9 01       	movw	r22, r18
    1058:	90 01       	movw	r18, r0
    105a:	0c 01       	movw	r0, r24
    105c:	ca 01       	movw	r24, r20
    105e:	a0 01       	movw	r20, r0
    1060:	11 24       	eor	r1, r1
    1062:	ff 27       	eor	r31, r31
    1064:	59 1b       	sub	r21, r25
    1066:	99 f0       	breq	.+38     	; 0x108e <__addsf3x+0x60>
    1068:	59 3f       	cpi	r21, 0xF9	; 249
    106a:	50 f4       	brcc	.+20     	; 0x1080 <__addsf3x+0x52>
    106c:	50 3e       	cpi	r21, 0xE0	; 224
    106e:	68 f1       	brcs	.+90     	; 0x10ca <__addsf3x+0x9c>
    1070:	1a 16       	cp	r1, r26
    1072:	f0 40       	sbci	r31, 0x00	; 0
    1074:	a2 2f       	mov	r26, r18
    1076:	23 2f       	mov	r18, r19
    1078:	34 2f       	mov	r19, r20
    107a:	44 27       	eor	r20, r20
    107c:	58 5f       	subi	r21, 0xF8	; 248
    107e:	f3 cf       	rjmp	.-26     	; 0x1066 <__addsf3x+0x38>
    1080:	46 95       	lsr	r20
    1082:	37 95       	ror	r19
    1084:	27 95       	ror	r18
    1086:	a7 95       	ror	r26
    1088:	f0 40       	sbci	r31, 0x00	; 0
    108a:	53 95       	inc	r21
    108c:	c9 f7       	brne	.-14     	; 0x1080 <__addsf3x+0x52>
    108e:	7e f4       	brtc	.+30     	; 0x10ae <__addsf3x+0x80>
    1090:	1f 16       	cp	r1, r31
    1092:	ba 0b       	sbc	r27, r26
    1094:	62 0b       	sbc	r22, r18
    1096:	73 0b       	sbc	r23, r19
    1098:	84 0b       	sbc	r24, r20
    109a:	ba f0       	brmi	.+46     	; 0x10ca <__addsf3x+0x9c>
    109c:	91 50       	subi	r25, 0x01	; 1
    109e:	a1 f0       	breq	.+40     	; 0x10c8 <__addsf3x+0x9a>
    10a0:	ff 0f       	add	r31, r31
    10a2:	bb 1f       	adc	r27, r27
    10a4:	66 1f       	adc	r22, r22
    10a6:	77 1f       	adc	r23, r23
    10a8:	88 1f       	adc	r24, r24
    10aa:	c2 f7       	brpl	.-16     	; 0x109c <__addsf3x+0x6e>
    10ac:	0e c0       	rjmp	.+28     	; 0x10ca <__addsf3x+0x9c>
    10ae:	ba 0f       	add	r27, r26
    10b0:	62 1f       	adc	r22, r18
    10b2:	73 1f       	adc	r23, r19
    10b4:	84 1f       	adc	r24, r20
    10b6:	48 f4       	brcc	.+18     	; 0x10ca <__addsf3x+0x9c>
    10b8:	87 95       	ror	r24
    10ba:	77 95       	ror	r23
    10bc:	67 95       	ror	r22
    10be:	b7 95       	ror	r27
    10c0:	f7 95       	ror	r31
    10c2:	9e 3f       	cpi	r25, 0xFE	; 254
    10c4:	08 f0       	brcs	.+2      	; 0x10c8 <__addsf3x+0x9a>
    10c6:	b0 cf       	rjmp	.-160    	; 0x1028 <__addsf3+0x28>
    10c8:	93 95       	inc	r25
    10ca:	88 0f       	add	r24, r24
    10cc:	08 f0       	brcs	.+2      	; 0x10d0 <__addsf3x+0xa2>
    10ce:	99 27       	eor	r25, r25
    10d0:	ee 0f       	add	r30, r30
    10d2:	97 95       	ror	r25
    10d4:	87 95       	ror	r24
    10d6:	08 95       	ret

000010d8 <__cmpsf2>:
    10d8:	0e 94 56 09 	call	0x12ac	; 0x12ac <__fp_cmp>
    10dc:	08 f4       	brcc	.+2      	; 0x10e0 <__cmpsf2+0x8>
    10de:	81 e0       	ldi	r24, 0x01	; 1
    10e0:	08 95       	ret

000010e2 <__divsf3>:
    10e2:	0e 94 85 08 	call	0x110a	; 0x110a <__divsf3x>
    10e6:	0c 94 91 09 	jmp	0x1322	; 0x1322 <__fp_round>
    10ea:	0e 94 8a 09 	call	0x1314	; 0x1314 <__fp_pscB>
    10ee:	58 f0       	brcs	.+22     	; 0x1106 <__divsf3+0x24>
    10f0:	0e 94 83 09 	call	0x1306	; 0x1306 <__fp_pscA>
    10f4:	40 f0       	brcs	.+16     	; 0x1106 <__divsf3+0x24>
    10f6:	29 f4       	brne	.+10     	; 0x1102 <__divsf3+0x20>
    10f8:	5f 3f       	cpi	r21, 0xFF	; 255
    10fa:	29 f0       	breq	.+10     	; 0x1106 <__divsf3+0x24>
    10fc:	0c 94 7a 09 	jmp	0x12f4	; 0x12f4 <__fp_inf>
    1100:	51 11       	cpse	r21, r1
    1102:	0c 94 c5 09 	jmp	0x138a	; 0x138a <__fp_szero>
    1106:	0c 94 80 09 	jmp	0x1300	; 0x1300 <__fp_nan>

0000110a <__divsf3x>:
    110a:	0e 94 a2 09 	call	0x1344	; 0x1344 <__fp_split3>
    110e:	68 f3       	brcs	.-38     	; 0x10ea <__divsf3+0x8>

00001110 <__divsf3_pse>:
    1110:	99 23       	and	r25, r25
    1112:	b1 f3       	breq	.-20     	; 0x1100 <__divsf3+0x1e>
    1114:	55 23       	and	r21, r21
    1116:	91 f3       	breq	.-28     	; 0x10fc <__divsf3+0x1a>
    1118:	95 1b       	sub	r25, r21
    111a:	55 0b       	sbc	r21, r21
    111c:	bb 27       	eor	r27, r27
    111e:	aa 27       	eor	r26, r26
    1120:	62 17       	cp	r22, r18
    1122:	73 07       	cpc	r23, r19
    1124:	84 07       	cpc	r24, r20
    1126:	38 f0       	brcs	.+14     	; 0x1136 <__divsf3_pse+0x26>
    1128:	9f 5f       	subi	r25, 0xFF	; 255
    112a:	5f 4f       	sbci	r21, 0xFF	; 255
    112c:	22 0f       	add	r18, r18
    112e:	33 1f       	adc	r19, r19
    1130:	44 1f       	adc	r20, r20
    1132:	aa 1f       	adc	r26, r26
    1134:	a9 f3       	breq	.-22     	; 0x1120 <__divsf3_pse+0x10>
    1136:	35 d0       	rcall	.+106    	; 0x11a2 <__divsf3_pse+0x92>
    1138:	0e 2e       	mov	r0, r30
    113a:	3a f0       	brmi	.+14     	; 0x114a <__divsf3_pse+0x3a>
    113c:	e0 e8       	ldi	r30, 0x80	; 128
    113e:	32 d0       	rcall	.+100    	; 0x11a4 <__divsf3_pse+0x94>
    1140:	91 50       	subi	r25, 0x01	; 1
    1142:	50 40       	sbci	r21, 0x00	; 0
    1144:	e6 95       	lsr	r30
    1146:	00 1c       	adc	r0, r0
    1148:	ca f7       	brpl	.-14     	; 0x113c <__divsf3_pse+0x2c>
    114a:	2b d0       	rcall	.+86     	; 0x11a2 <__divsf3_pse+0x92>
    114c:	fe 2f       	mov	r31, r30
    114e:	29 d0       	rcall	.+82     	; 0x11a2 <__divsf3_pse+0x92>
    1150:	66 0f       	add	r22, r22
    1152:	77 1f       	adc	r23, r23
    1154:	88 1f       	adc	r24, r24
    1156:	bb 1f       	adc	r27, r27
    1158:	26 17       	cp	r18, r22
    115a:	37 07       	cpc	r19, r23
    115c:	48 07       	cpc	r20, r24
    115e:	ab 07       	cpc	r26, r27
    1160:	b0 e8       	ldi	r27, 0x80	; 128
    1162:	09 f0       	breq	.+2      	; 0x1166 <__divsf3_pse+0x56>
    1164:	bb 0b       	sbc	r27, r27
    1166:	80 2d       	mov	r24, r0
    1168:	bf 01       	movw	r22, r30
    116a:	ff 27       	eor	r31, r31
    116c:	93 58       	subi	r25, 0x83	; 131
    116e:	5f 4f       	sbci	r21, 0xFF	; 255
    1170:	3a f0       	brmi	.+14     	; 0x1180 <__divsf3_pse+0x70>
    1172:	9e 3f       	cpi	r25, 0xFE	; 254
    1174:	51 05       	cpc	r21, r1
    1176:	78 f0       	brcs	.+30     	; 0x1196 <__divsf3_pse+0x86>
    1178:	0c 94 7a 09 	jmp	0x12f4	; 0x12f4 <__fp_inf>
    117c:	0c 94 c5 09 	jmp	0x138a	; 0x138a <__fp_szero>
    1180:	5f 3f       	cpi	r21, 0xFF	; 255
    1182:	e4 f3       	brlt	.-8      	; 0x117c <__divsf3_pse+0x6c>
    1184:	98 3e       	cpi	r25, 0xE8	; 232
    1186:	d4 f3       	brlt	.-12     	; 0x117c <__divsf3_pse+0x6c>
    1188:	86 95       	lsr	r24
    118a:	77 95       	ror	r23
    118c:	67 95       	ror	r22
    118e:	b7 95       	ror	r27
    1190:	f7 95       	ror	r31
    1192:	9f 5f       	subi	r25, 0xFF	; 255
    1194:	c9 f7       	brne	.-14     	; 0x1188 <__divsf3_pse+0x78>
    1196:	88 0f       	add	r24, r24
    1198:	91 1d       	adc	r25, r1
    119a:	96 95       	lsr	r25
    119c:	87 95       	ror	r24
    119e:	97 f9       	bld	r25, 7
    11a0:	08 95       	ret
    11a2:	e1 e0       	ldi	r30, 0x01	; 1
    11a4:	66 0f       	add	r22, r22
    11a6:	77 1f       	adc	r23, r23
    11a8:	88 1f       	adc	r24, r24
    11aa:	bb 1f       	adc	r27, r27
    11ac:	62 17       	cp	r22, r18
    11ae:	73 07       	cpc	r23, r19
    11b0:	84 07       	cpc	r24, r20
    11b2:	ba 07       	cpc	r27, r26
    11b4:	20 f0       	brcs	.+8      	; 0x11be <__divsf3_pse+0xae>
    11b6:	62 1b       	sub	r22, r18
    11b8:	73 0b       	sbc	r23, r19
    11ba:	84 0b       	sbc	r24, r20
    11bc:	ba 0b       	sbc	r27, r26
    11be:	ee 1f       	adc	r30, r30
    11c0:	88 f7       	brcc	.-30     	; 0x11a4 <__divsf3_pse+0x94>
    11c2:	e0 95       	com	r30
    11c4:	08 95       	ret

000011c6 <__fixsfsi>:
    11c6:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <__fixunssfsi>
    11ca:	68 94       	set
    11cc:	b1 11       	cpse	r27, r1
    11ce:	0c 94 c5 09 	jmp	0x138a	; 0x138a <__fp_szero>
    11d2:	08 95       	ret

000011d4 <__fixunssfsi>:
    11d4:	0e 94 aa 09 	call	0x1354	; 0x1354 <__fp_splitA>
    11d8:	88 f0       	brcs	.+34     	; 0x11fc <__fixunssfsi+0x28>
    11da:	9f 57       	subi	r25, 0x7F	; 127
    11dc:	98 f0       	brcs	.+38     	; 0x1204 <__fixunssfsi+0x30>
    11de:	b9 2f       	mov	r27, r25
    11e0:	99 27       	eor	r25, r25
    11e2:	b7 51       	subi	r27, 0x17	; 23
    11e4:	b0 f0       	brcs	.+44     	; 0x1212 <__fixunssfsi+0x3e>
    11e6:	e1 f0       	breq	.+56     	; 0x1220 <__fixunssfsi+0x4c>
    11e8:	66 0f       	add	r22, r22
    11ea:	77 1f       	adc	r23, r23
    11ec:	88 1f       	adc	r24, r24
    11ee:	99 1f       	adc	r25, r25
    11f0:	1a f0       	brmi	.+6      	; 0x11f8 <__fixunssfsi+0x24>
    11f2:	ba 95       	dec	r27
    11f4:	c9 f7       	brne	.-14     	; 0x11e8 <__fixunssfsi+0x14>
    11f6:	14 c0       	rjmp	.+40     	; 0x1220 <__fixunssfsi+0x4c>
    11f8:	b1 30       	cpi	r27, 0x01	; 1
    11fa:	91 f0       	breq	.+36     	; 0x1220 <__fixunssfsi+0x4c>
    11fc:	0e 94 c4 09 	call	0x1388	; 0x1388 <__fp_zero>
    1200:	b1 e0       	ldi	r27, 0x01	; 1
    1202:	08 95       	ret
    1204:	0c 94 c4 09 	jmp	0x1388	; 0x1388 <__fp_zero>
    1208:	67 2f       	mov	r22, r23
    120a:	78 2f       	mov	r23, r24
    120c:	88 27       	eor	r24, r24
    120e:	b8 5f       	subi	r27, 0xF8	; 248
    1210:	39 f0       	breq	.+14     	; 0x1220 <__fixunssfsi+0x4c>
    1212:	b9 3f       	cpi	r27, 0xF9	; 249
    1214:	cc f3       	brlt	.-14     	; 0x1208 <__fixunssfsi+0x34>
    1216:	86 95       	lsr	r24
    1218:	77 95       	ror	r23
    121a:	67 95       	ror	r22
    121c:	b3 95       	inc	r27
    121e:	d9 f7       	brne	.-10     	; 0x1216 <__fixunssfsi+0x42>
    1220:	3e f4       	brtc	.+14     	; 0x1230 <__fixunssfsi+0x5c>
    1222:	90 95       	com	r25
    1224:	80 95       	com	r24
    1226:	70 95       	com	r23
    1228:	61 95       	neg	r22
    122a:	7f 4f       	sbci	r23, 0xFF	; 255
    122c:	8f 4f       	sbci	r24, 0xFF	; 255
    122e:	9f 4f       	sbci	r25, 0xFF	; 255
    1230:	08 95       	ret

00001232 <__floatunsisf>:
    1232:	e8 94       	clt
    1234:	09 c0       	rjmp	.+18     	; 0x1248 <__floatsisf+0x12>

00001236 <__floatsisf>:
    1236:	97 fb       	bst	r25, 7
    1238:	3e f4       	brtc	.+14     	; 0x1248 <__floatsisf+0x12>
    123a:	90 95       	com	r25
    123c:	80 95       	com	r24
    123e:	70 95       	com	r23
    1240:	61 95       	neg	r22
    1242:	7f 4f       	sbci	r23, 0xFF	; 255
    1244:	8f 4f       	sbci	r24, 0xFF	; 255
    1246:	9f 4f       	sbci	r25, 0xFF	; 255
    1248:	99 23       	and	r25, r25
    124a:	a9 f0       	breq	.+42     	; 0x1276 <__floatsisf+0x40>
    124c:	f9 2f       	mov	r31, r25
    124e:	96 e9       	ldi	r25, 0x96	; 150
    1250:	bb 27       	eor	r27, r27
    1252:	93 95       	inc	r25
    1254:	f6 95       	lsr	r31
    1256:	87 95       	ror	r24
    1258:	77 95       	ror	r23
    125a:	67 95       	ror	r22
    125c:	b7 95       	ror	r27
    125e:	f1 11       	cpse	r31, r1
    1260:	f8 cf       	rjmp	.-16     	; 0x1252 <__floatsisf+0x1c>
    1262:	fa f4       	brpl	.+62     	; 0x12a2 <__floatsisf+0x6c>
    1264:	bb 0f       	add	r27, r27
    1266:	11 f4       	brne	.+4      	; 0x126c <__floatsisf+0x36>
    1268:	60 ff       	sbrs	r22, 0
    126a:	1b c0       	rjmp	.+54     	; 0x12a2 <__floatsisf+0x6c>
    126c:	6f 5f       	subi	r22, 0xFF	; 255
    126e:	7f 4f       	sbci	r23, 0xFF	; 255
    1270:	8f 4f       	sbci	r24, 0xFF	; 255
    1272:	9f 4f       	sbci	r25, 0xFF	; 255
    1274:	16 c0       	rjmp	.+44     	; 0x12a2 <__floatsisf+0x6c>
    1276:	88 23       	and	r24, r24
    1278:	11 f0       	breq	.+4      	; 0x127e <__floatsisf+0x48>
    127a:	96 e9       	ldi	r25, 0x96	; 150
    127c:	11 c0       	rjmp	.+34     	; 0x12a0 <__floatsisf+0x6a>
    127e:	77 23       	and	r23, r23
    1280:	21 f0       	breq	.+8      	; 0x128a <__floatsisf+0x54>
    1282:	9e e8       	ldi	r25, 0x8E	; 142
    1284:	87 2f       	mov	r24, r23
    1286:	76 2f       	mov	r23, r22
    1288:	05 c0       	rjmp	.+10     	; 0x1294 <__floatsisf+0x5e>
    128a:	66 23       	and	r22, r22
    128c:	71 f0       	breq	.+28     	; 0x12aa <__floatsisf+0x74>
    128e:	96 e8       	ldi	r25, 0x86	; 134
    1290:	86 2f       	mov	r24, r22
    1292:	70 e0       	ldi	r23, 0x00	; 0
    1294:	60 e0       	ldi	r22, 0x00	; 0
    1296:	2a f0       	brmi	.+10     	; 0x12a2 <__floatsisf+0x6c>
    1298:	9a 95       	dec	r25
    129a:	66 0f       	add	r22, r22
    129c:	77 1f       	adc	r23, r23
    129e:	88 1f       	adc	r24, r24
    12a0:	da f7       	brpl	.-10     	; 0x1298 <__floatsisf+0x62>
    12a2:	88 0f       	add	r24, r24
    12a4:	96 95       	lsr	r25
    12a6:	87 95       	ror	r24
    12a8:	97 f9       	bld	r25, 7
    12aa:	08 95       	ret

000012ac <__fp_cmp>:
    12ac:	99 0f       	add	r25, r25
    12ae:	00 08       	sbc	r0, r0
    12b0:	55 0f       	add	r21, r21
    12b2:	aa 0b       	sbc	r26, r26
    12b4:	e0 e8       	ldi	r30, 0x80	; 128
    12b6:	fe ef       	ldi	r31, 0xFE	; 254
    12b8:	16 16       	cp	r1, r22
    12ba:	17 06       	cpc	r1, r23
    12bc:	e8 07       	cpc	r30, r24
    12be:	f9 07       	cpc	r31, r25
    12c0:	c0 f0       	brcs	.+48     	; 0x12f2 <__fp_cmp+0x46>
    12c2:	12 16       	cp	r1, r18
    12c4:	13 06       	cpc	r1, r19
    12c6:	e4 07       	cpc	r30, r20
    12c8:	f5 07       	cpc	r31, r21
    12ca:	98 f0       	brcs	.+38     	; 0x12f2 <__fp_cmp+0x46>
    12cc:	62 1b       	sub	r22, r18
    12ce:	73 0b       	sbc	r23, r19
    12d0:	84 0b       	sbc	r24, r20
    12d2:	95 0b       	sbc	r25, r21
    12d4:	39 f4       	brne	.+14     	; 0x12e4 <__fp_cmp+0x38>
    12d6:	0a 26       	eor	r0, r26
    12d8:	61 f0       	breq	.+24     	; 0x12f2 <__fp_cmp+0x46>
    12da:	23 2b       	or	r18, r19
    12dc:	24 2b       	or	r18, r20
    12de:	25 2b       	or	r18, r21
    12e0:	21 f4       	brne	.+8      	; 0x12ea <__fp_cmp+0x3e>
    12e2:	08 95       	ret
    12e4:	0a 26       	eor	r0, r26
    12e6:	09 f4       	brne	.+2      	; 0x12ea <__fp_cmp+0x3e>
    12e8:	a1 40       	sbci	r26, 0x01	; 1
    12ea:	a6 95       	lsr	r26
    12ec:	8f ef       	ldi	r24, 0xFF	; 255
    12ee:	81 1d       	adc	r24, r1
    12f0:	81 1d       	adc	r24, r1
    12f2:	08 95       	ret

000012f4 <__fp_inf>:
    12f4:	97 f9       	bld	r25, 7
    12f6:	9f 67       	ori	r25, 0x7F	; 127
    12f8:	80 e8       	ldi	r24, 0x80	; 128
    12fa:	70 e0       	ldi	r23, 0x00	; 0
    12fc:	60 e0       	ldi	r22, 0x00	; 0
    12fe:	08 95       	ret

00001300 <__fp_nan>:
    1300:	9f ef       	ldi	r25, 0xFF	; 255
    1302:	80 ec       	ldi	r24, 0xC0	; 192
    1304:	08 95       	ret

00001306 <__fp_pscA>:
    1306:	00 24       	eor	r0, r0
    1308:	0a 94       	dec	r0
    130a:	16 16       	cp	r1, r22
    130c:	17 06       	cpc	r1, r23
    130e:	18 06       	cpc	r1, r24
    1310:	09 06       	cpc	r0, r25
    1312:	08 95       	ret

00001314 <__fp_pscB>:
    1314:	00 24       	eor	r0, r0
    1316:	0a 94       	dec	r0
    1318:	12 16       	cp	r1, r18
    131a:	13 06       	cpc	r1, r19
    131c:	14 06       	cpc	r1, r20
    131e:	05 06       	cpc	r0, r21
    1320:	08 95       	ret

00001322 <__fp_round>:
    1322:	09 2e       	mov	r0, r25
    1324:	03 94       	inc	r0
    1326:	00 0c       	add	r0, r0
    1328:	11 f4       	brne	.+4      	; 0x132e <__fp_round+0xc>
    132a:	88 23       	and	r24, r24
    132c:	52 f0       	brmi	.+20     	; 0x1342 <__fp_round+0x20>
    132e:	bb 0f       	add	r27, r27
    1330:	40 f4       	brcc	.+16     	; 0x1342 <__fp_round+0x20>
    1332:	bf 2b       	or	r27, r31
    1334:	11 f4       	brne	.+4      	; 0x133a <__fp_round+0x18>
    1336:	60 ff       	sbrs	r22, 0
    1338:	04 c0       	rjmp	.+8      	; 0x1342 <__fp_round+0x20>
    133a:	6f 5f       	subi	r22, 0xFF	; 255
    133c:	7f 4f       	sbci	r23, 0xFF	; 255
    133e:	8f 4f       	sbci	r24, 0xFF	; 255
    1340:	9f 4f       	sbci	r25, 0xFF	; 255
    1342:	08 95       	ret

00001344 <__fp_split3>:
    1344:	57 fd       	sbrc	r21, 7
    1346:	90 58       	subi	r25, 0x80	; 128
    1348:	44 0f       	add	r20, r20
    134a:	55 1f       	adc	r21, r21
    134c:	59 f0       	breq	.+22     	; 0x1364 <__fp_splitA+0x10>
    134e:	5f 3f       	cpi	r21, 0xFF	; 255
    1350:	71 f0       	breq	.+28     	; 0x136e <__fp_splitA+0x1a>
    1352:	47 95       	ror	r20

00001354 <__fp_splitA>:
    1354:	88 0f       	add	r24, r24
    1356:	97 fb       	bst	r25, 7
    1358:	99 1f       	adc	r25, r25
    135a:	61 f0       	breq	.+24     	; 0x1374 <__fp_splitA+0x20>
    135c:	9f 3f       	cpi	r25, 0xFF	; 255
    135e:	79 f0       	breq	.+30     	; 0x137e <__fp_splitA+0x2a>
    1360:	87 95       	ror	r24
    1362:	08 95       	ret
    1364:	12 16       	cp	r1, r18
    1366:	13 06       	cpc	r1, r19
    1368:	14 06       	cpc	r1, r20
    136a:	55 1f       	adc	r21, r21
    136c:	f2 cf       	rjmp	.-28     	; 0x1352 <__fp_split3+0xe>
    136e:	46 95       	lsr	r20
    1370:	f1 df       	rcall	.-30     	; 0x1354 <__fp_splitA>
    1372:	08 c0       	rjmp	.+16     	; 0x1384 <__fp_splitA+0x30>
    1374:	16 16       	cp	r1, r22
    1376:	17 06       	cpc	r1, r23
    1378:	18 06       	cpc	r1, r24
    137a:	99 1f       	adc	r25, r25
    137c:	f1 cf       	rjmp	.-30     	; 0x1360 <__fp_splitA+0xc>
    137e:	86 95       	lsr	r24
    1380:	71 05       	cpc	r23, r1
    1382:	61 05       	cpc	r22, r1
    1384:	08 94       	sec
    1386:	08 95       	ret

00001388 <__fp_zero>:
    1388:	e8 94       	clt

0000138a <__fp_szero>:
    138a:	bb 27       	eor	r27, r27
    138c:	66 27       	eor	r22, r22
    138e:	77 27       	eor	r23, r23
    1390:	cb 01       	movw	r24, r22
    1392:	97 f9       	bld	r25, 7
    1394:	08 95       	ret

00001396 <__divmodsi4>:
    1396:	05 2e       	mov	r0, r21
    1398:	97 fb       	bst	r25, 7
    139a:	1e f4       	brtc	.+6      	; 0x13a2 <__divmodsi4+0xc>
    139c:	00 94       	com	r0
    139e:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <__negsi2>
    13a2:	57 fd       	sbrc	r21, 7
    13a4:	07 d0       	rcall	.+14     	; 0x13b4 <__divmodsi4_neg2>
    13a6:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <__udivmodsi4>
    13aa:	07 fc       	sbrc	r0, 7
    13ac:	03 d0       	rcall	.+6      	; 0x13b4 <__divmodsi4_neg2>
    13ae:	4e f4       	brtc	.+18     	; 0x13c2 <__divmodsi4_exit>
    13b0:	0c 94 e2 09 	jmp	0x13c4	; 0x13c4 <__negsi2>

000013b4 <__divmodsi4_neg2>:
    13b4:	50 95       	com	r21
    13b6:	40 95       	com	r20
    13b8:	30 95       	com	r19
    13ba:	21 95       	neg	r18
    13bc:	3f 4f       	sbci	r19, 0xFF	; 255
    13be:	4f 4f       	sbci	r20, 0xFF	; 255
    13c0:	5f 4f       	sbci	r21, 0xFF	; 255

000013c2 <__divmodsi4_exit>:
    13c2:	08 95       	ret

000013c4 <__negsi2>:
    13c4:	90 95       	com	r25
    13c6:	80 95       	com	r24
    13c8:	70 95       	com	r23
    13ca:	61 95       	neg	r22
    13cc:	7f 4f       	sbci	r23, 0xFF	; 255
    13ce:	8f 4f       	sbci	r24, 0xFF	; 255
    13d0:	9f 4f       	sbci	r25, 0xFF	; 255
    13d2:	08 95       	ret

000013d4 <__umulhisi3>:
    13d4:	a2 9f       	mul	r26, r18
    13d6:	b0 01       	movw	r22, r0
    13d8:	b3 9f       	mul	r27, r19
    13da:	c0 01       	movw	r24, r0
    13dc:	a3 9f       	mul	r26, r19
    13de:	70 0d       	add	r23, r0
    13e0:	81 1d       	adc	r24, r1
    13e2:	11 24       	eor	r1, r1
    13e4:	91 1d       	adc	r25, r1
    13e6:	b2 9f       	mul	r27, r18
    13e8:	70 0d       	add	r23, r0
    13ea:	81 1d       	adc	r24, r1
    13ec:	11 24       	eor	r1, r1
    13ee:	91 1d       	adc	r25, r1
    13f0:	08 95       	ret

000013f2 <__udivmodsi4>:
    13f2:	a1 e2       	ldi	r26, 0x21	; 33
    13f4:	1a 2e       	mov	r1, r26
    13f6:	aa 1b       	sub	r26, r26
    13f8:	bb 1b       	sub	r27, r27
    13fa:	fd 01       	movw	r30, r26
    13fc:	0d c0       	rjmp	.+26     	; 0x1418 <__udivmodsi4_ep>

000013fe <__udivmodsi4_loop>:
    13fe:	aa 1f       	adc	r26, r26
    1400:	bb 1f       	adc	r27, r27
    1402:	ee 1f       	adc	r30, r30
    1404:	ff 1f       	adc	r31, r31
    1406:	a2 17       	cp	r26, r18
    1408:	b3 07       	cpc	r27, r19
    140a:	e4 07       	cpc	r30, r20
    140c:	f5 07       	cpc	r31, r21
    140e:	20 f0       	brcs	.+8      	; 0x1418 <__udivmodsi4_ep>
    1410:	a2 1b       	sub	r26, r18
    1412:	b3 0b       	sbc	r27, r19
    1414:	e4 0b       	sbc	r30, r20
    1416:	f5 0b       	sbc	r31, r21

00001418 <__udivmodsi4_ep>:
    1418:	66 1f       	adc	r22, r22
    141a:	77 1f       	adc	r23, r23
    141c:	88 1f       	adc	r24, r24
    141e:	99 1f       	adc	r25, r25
    1420:	1a 94       	dec	r1
    1422:	69 f7       	brne	.-38     	; 0x13fe <__udivmodsi4_loop>
    1424:	60 95       	com	r22
    1426:	70 95       	com	r23
    1428:	80 95       	com	r24
    142a:	90 95       	com	r25
    142c:	9b 01       	movw	r18, r22
    142e:	ac 01       	movw	r20, r24
    1430:	bd 01       	movw	r22, r26
    1432:	cf 01       	movw	r24, r30
    1434:	08 95       	ret

00001436 <strcmp>:
    1436:	fb 01       	movw	r30, r22
    1438:	dc 01       	movw	r26, r24
    143a:	8d 91       	ld	r24, X+
    143c:	01 90       	ld	r0, Z+
    143e:	80 19       	sub	r24, r0
    1440:	01 10       	cpse	r0, r1
    1442:	d9 f3       	breq	.-10     	; 0x143a <strcmp+0x4>
    1444:	99 0b       	sbc	r25, r25
    1446:	08 95       	ret

00001448 <_exit>:
    1448:	f8 94       	cli

0000144a <__stop_program>:
    144a:	ff cf       	rjmp	.-2      	; 0x144a <__stop_program>
