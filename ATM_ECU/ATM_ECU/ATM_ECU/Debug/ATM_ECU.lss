
ATM_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000df4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000072  00800060  00000df4  00000e88  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  008000d2  008000d2  00000efa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000efa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000f2c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d8  00000000  00000000  00000f68  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000222f  00000000  00000000  00001140  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c24  00000000  00000000  0000336f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001408  00000000  00000000  00003f93  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000388  00000000  00000000  0000539c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a6f  00000000  00000000  00005724  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000dce  00000000  00000000  00006193  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  00006f61  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ef       	ldi	r30, 0xF4	; 244
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 3d       	cpi	r26, 0xD2	; 210
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 ed       	ldi	r26, 0xD2	; 210
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ab 3d       	cpi	r26, 0xDB	; 219
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 a0 03 	call	0x740	; 0x740 <main>
  8a:	0c 94 f8 06 	jmp	0xdf0	; 0xdf0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <APP_init>:

/** INITIALIZATION FUNCTION **/
void APP_init()
{
	//Button_init(BUTTON1_PORT , BUTTON1_PIN); /** ZERO/SET BUTTON **/
	Button_init(BUTTON2_PORT , BUTTON2_PIN); /** START TRIGGER FROM CARD ECU **/
  92:	60 e0       	ldi	r22, 0x00	; 0
  94:	80 e0       	ldi	r24, 0x00	; 0
  96:	0e 94 77 01 	call	0x2ee	; 0x2ee <Button_init>
	
	DIO_setpindir(DIO_PORTB , DIO_PIN0 , DIO_PIN_OUTPUT); /** TRIGGER PIN TO START COMMUNICATION **/
  9a:	41 e0       	ldi	r20, 0x01	; 1
  9c:	60 e0       	ldi	r22, 0x00	; 0
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	0e 94 ab 03 	call	0x756	; 0x756 <DIO_setpindir>
	DIO_setpinvalue(DIO_PORTB , DIO_PIN0 , DIO_PIN_LOW);  /** INITIAL VALUE IS ZERO **/
  a4:	40 e0       	ldi	r20, 0x00	; 0
  a6:	60 e0       	ldi	r22, 0x00	; 0
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	0e 94 2a 04 	call	0x854	; 0x854 <DIO_setpinvalue>
	
	TMR0_init(); /** TIMER 0 INITIALIZATION **/
  ae:	0e 94 5d 05 	call	0xaba	; 0xaba <TMR0_init>
	
	SPI_initslave(); /** INITIALIZE SPI MASTER **/
  b2:	0e 94 21 05 	call	0xa42	; 0xa42 <SPI_initslave>
	
	KEYPAD_init(); /** INITIALIZE THE KEYPAD **/
  b6:	0e 94 9a 01 	call	0x334	; 0x334 <KEYPAD_init>
	
	LCD_init();  /** INITIALIZE LCD **/
  ba:	0e 94 ed 02 	call	0x5da	; 0x5da <LCD_init>
	TMR0_delayms(20); /** SET DELAY FOR LCD INITILIZATION **/
  be:	64 e1       	ldi	r22, 0x14	; 20
  c0:	70 e0       	ldi	r23, 0x00	; 0
  c2:	80 e0       	ldi	r24, 0x00	; 0
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	0e 94 84 05 	call	0xb08	; 0xb08 <TMR0_delayms>
	
	LCD_writestr(" WELCOME TO ATM !"); /** DISPLAY WELCOME MESSAGE FOR 1 SEC **/
  ca:	80 e8       	ldi	r24, 0x80	; 128
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	0e 94 75 03 	call	0x6ea	; 0x6ea <LCD_writestr>
	TMR0_delayms(500);
  d2:	64 ef       	ldi	r22, 0xF4	; 244
  d4:	71 e0       	ldi	r23, 0x01	; 1
  d6:	80 e0       	ldi	r24, 0x00	; 0
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	0e 94 84 05 	call	0xb08	; 0xb08 <TMR0_delayms>
	
	LCD_sendcmd(LCD_CLEAR);
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	0e 94 a4 02 	call	0x548	; 0x548 <LCD_sendcmd>
	TMR0_delayms(20);
  e4:	64 e1       	ldi	r22, 0x14	; 20
  e6:	70 e0       	ldi	r23, 0x00	; 0
  e8:	80 e0       	ldi	r24, 0x00	; 0
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	0e 94 84 05 	call	0xb08	; 0xb08 <TMR0_delayms>
	
	LCD_goto(0 ,1);
  f0:	61 e0       	ldi	r22, 0x01	; 1
  f2:	80 e0       	ldi	r24, 0x00	; 0
  f4:	0e 94 88 03 	call	0x710	; 0x710 <LCD_goto>
	LCD_writestr("Insert A Card"); /** ASK USER TO INSERT HIS CARD **/
  f8:	82 e9       	ldi	r24, 0x92	; 146
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	0e 94 75 03 	call	0x6ea	; 0x6ea <LCD_writestr>
	
	do  /** WAIT FOR THE CARD ECU TRIGGER **/
	{
		Is_pressed(BUTTON2_PORT , BUTTON2_PIN , &triggerstatus);
 100:	42 ed       	ldi	r20, 0xD2	; 210
 102:	50 e0       	ldi	r21, 0x00	; 0
 104:	60 e0       	ldi	r22, 0x00	; 0
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <Is_pressed>
	} while (triggerstatus == 0);
 10c:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <__data_end>
 110:	88 23       	and	r24, r24
 112:	b1 f3       	breq	.-20     	; 0x100 <APP_init+0x6e>
	
	/** WAIT UNTILL TRIGGER ACTION FROM THE CARD ECU **/
	LCD_sendcmd(LCD_CLEAR); /** CLEAR THE LCD **/
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	0e 94 a4 02 	call	0x548	; 0x548 <LCD_sendcmd>
	TMR0_delayms(20);
 11a:	64 e1       	ldi	r22, 0x14	; 20
 11c:	70 e0       	ldi	r23, 0x00	; 0
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	0e 94 84 05 	call	0xb08	; 0xb08 <TMR0_delayms>
 126:	08 95       	ret

00000128 <APP_readuserpin>:
}

/** FUNCTION TO READ USER PIN **/
void APP_readuserpin()
{
	LCD_sendcmd(LCD_CLEAR); /** CLEAR THE LCD **/
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	0e 94 a4 02 	call	0x548	; 0x548 <LCD_sendcmd>
	TMR0_delayms(20);
 12e:	64 e1       	ldi	r22, 0x14	; 20
 130:	70 e0       	ldi	r23, 0x00	; 0
 132:	80 e0       	ldi	r24, 0x00	; 0
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	0e 94 84 05 	call	0xb08	; 0xb08 <TMR0_delayms>
	
	LCD_goto(0 , 1);
 13a:	61 e0       	ldi	r22, 0x01	; 1
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	0e 94 88 03 	call	0x710	; 0x710 <LCD_goto>
	LCD_writestr("Enter Your PIN"); /** SAK USER TO INSERT CARD PIN **/
 142:	80 ea       	ldi	r24, 0xA0	; 160
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	0e 94 75 03 	call	0x6ea	; 0x6ea <LCD_writestr>
	
 	for(counter = 0 ; counter < 4 ; counter++) 
 14a:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <counter>
 14e:	24 c0       	rjmp	.+72     	; 0x198 <APP_readuserpin+0x70>
 	 {		
		while ((KEYPAD_read(&u8_a_pressednum) == KEYPAD_readFail)); /** POLLING UNTILL NUMBER PRESSED **/
 150:	85 ed       	ldi	r24, 0xD5	; 213
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <KEYPAD_read>
 158:	81 30       	cpi	r24, 0x01	; 1
 15a:	d1 f3       	breq	.-12     	; 0x150 <APP_readuserpin+0x28>
		
		LCD_goto(1 , counter); /** DISPLAY * WITH EACH PRESSED NUMBER **/
 15c:	60 91 da 00 	lds	r22, 0x00DA	; 0x8000da <counter>
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	0e 94 88 03 	call	0x710	; 0x710 <LCD_goto>
		LCD_writechar('*');
 166:	8a e2       	ldi	r24, 0x2A	; 42
 168:	0e 94 2e 03 	call	0x65c	; 0x65c <LCD_writechar>
		
		u8_g_userpin[counter] = u8_a_pressednum ; /** STORE THE PRESSED NUMBER **/
 16c:	e0 91 da 00 	lds	r30, 0x00DA	; 0x8000da <counter>
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	ee 59       	subi	r30, 0x9E	; 158
 174:	ff 4f       	sbci	r31, 0xFF	; 255
 176:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <u8_a_pressednum>
 17a:	80 83       	st	Z, r24
		TMR0_delayms(200);
 17c:	68 ec       	ldi	r22, 0xC8	; 200
 17e:	70 e0       	ldi	r23, 0x00	; 0
 180:	80 e0       	ldi	r24, 0x00	; 0
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	0e 94 84 05 	call	0xb08	; 0xb08 <TMR0_delayms>
			
		u8_returnstatus = KEYPAD_readFail; /** REINITIALIZE STATE TO ACCEPT NEW NUMBER **/
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <u8_returnstatus>
	TMR0_delayms(20);
	
	LCD_goto(0 , 1);
	LCD_writestr("Enter Your PIN"); /** SAK USER TO INSERT CARD PIN **/
	
 	for(counter = 0 ; counter < 4 ; counter++) 
 18e:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <counter>
 192:	8f 5f       	subi	r24, 0xFF	; 255
 194:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <counter>
 198:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <counter>
 19c:	84 30       	cpi	r24, 0x04	; 4
 19e:	c0 f2       	brcs	.-80     	; 0x150 <APP_readuserpin+0x28>
		u8_returnstatus = KEYPAD_readFail; /** REINITIALIZE STATE TO ACCEPT NEW NUMBER **/
	 } 
	 
	 do /** LONG PRESS FOR 2 SECONDS ON ZERO **/
	 {
		 KEYPAD_read(&status); /** READ THE ZERO FROM KEYPAD **/
 1a0:	84 ed       	ldi	r24, 0xD4	; 212
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <KEYPAD_read>
		 TMR0_delayms(1000);   /** DELAY FOR 2000 SECONDS    **/
 1a8:	68 ee       	ldi	r22, 0xE8	; 232
 1aa:	73 e0       	ldi	r23, 0x03	; 3
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	0e 94 84 05 	call	0xb08	; 0xb08 <TMR0_delayms>
		 KEYPAD_read(&status); /** READ THE ZERO FROM KEYPAD **/
 1b4:	84 ed       	ldi	r24, 0xD4	; 212
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <KEYPAD_read>
		 
	 } while (status != '0');
 1bc:	80 91 d4 00 	lds	r24, 0x00D4	; 0x8000d4 <status>
 1c0:	80 33       	cpi	r24, 0x30	; 48
 1c2:	71 f7       	brne	.-36     	; 0x1a0 <APP_readuserpin+0x78>
	 
}
 1c4:	08 95       	ret

000001c6 <APP_startcardcomm>:

/** FUNCTION TO COMMUNICATE WITH CARD ECU TO GET PIN/PAN **/
void APP_startcardcomm() 
{
	/** INITIATE COMMUNICATION BETWEEN THE CARD ECU VIA TRIGGER ACTION **/
	DIO_setpinvalue(DIO_PORTB , DIO_PIN0 , DIO_PIN_HIGH);
 1c6:	41 e0       	ldi	r20, 0x01	; 1
 1c8:	60 e0       	ldi	r22, 0x00	; 0
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	0e 94 2a 04 	call	0x854	; 0x854 <DIO_setpinvalue>
	
	SPI_receivestring(&u8_g_cardpin); /** RECEIVE THE PIN **/
 1d0:	8b e7       	ldi	r24, 0x7B	; 123
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	0e 94 48 05 	call	0xa90	; 0xa90 <SPI_receivestring>
	TMR0_delayms(30);
 1d8:	6e e1       	ldi	r22, 0x1E	; 30
 1da:	70 e0       	ldi	r23, 0x00	; 0
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	0e 94 84 05 	call	0xb08	; 0xb08 <TMR0_delayms>
	
	SPI_receivestring(&u8_g_cardpan); /** RECEIVE THE PAN **/
 1e4:	87 e6       	ldi	r24, 0x67	; 103
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	0e 94 48 05 	call	0xa90	; 0xa90 <SPI_receivestring>
	
	/** VERIFY THE USER INSERTED PIN **/
	u8_a_pinnotmatched = 1 ;
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	while (u8_a_pintry <= 2 && u8_a_pinnotmatched != 0  ) /** CHECK PIN MATCHING FOR TWO TIMES **/
 1f2:	31 c0       	rjmp	.+98     	; 0x256 <APP_startcardcomm+0x90>
	{
		u8_a_pinnotmatched = strcmp(u8_g_cardpin , u8_g_userpin); /** COMPARE THE TWO PINs **/ 
 1f4:	62 e6       	ldi	r22, 0x62	; 98
 1f6:	70 e0       	ldi	r23, 0x00	; 0
 1f8:	8b e7       	ldi	r24, 0x7B	; 123
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	0e 94 ef 06 	call	0xdde	; 0xdde <strcmp>
 200:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		
		if (u8_a_pinnotmatched == 0) /** PIN MATCHED **/
 204:	88 23       	and	r24, r24
 206:	79 f1       	breq	.+94     	; 0x266 <APP_startcardcomm+0xa0>
			break ;
		}
		
		else /** PIN NOT MATCHED **/
		{
			LCD_sendcmd(LCD_CLEAR); /** CLEAR THE LCD **/
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	0e 94 a4 02 	call	0x548	; 0x548 <LCD_sendcmd>
			TMR0_delayms(20);
 20e:	64 e1       	ldi	r22, 0x14	; 20
 210:	70 e0       	ldi	r23, 0x00	; 0
 212:	80 e0       	ldi	r24, 0x00	; 0
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	0e 94 84 05 	call	0xb08	; 0xb08 <TMR0_delayms>
			
			LCD_goto(0,0);
 21a:	60 e0       	ldi	r22, 0x00	; 0
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	0e 94 88 03 	call	0x710	; 0x710 <LCD_goto>
			LCD_writestr("PIN NOT MATCHED !"); /** DISPLAY MESSAGE FOR 1 SEC **/
 222:	8f ea       	ldi	r24, 0xAF	; 175
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	0e 94 75 03 	call	0x6ea	; 0x6ea <LCD_writestr>
			TMR0_delayms(500);
 22a:	64 ef       	ldi	r22, 0xF4	; 244
 22c:	71 e0       	ldi	r23, 0x01	; 1
 22e:	80 e0       	ldi	r24, 0x00	; 0
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	0e 94 84 05 	call	0xb08	; 0xb08 <TMR0_delayms>
			
			LCD_sendcmd(LCD_CLEAR); /** CLEAR THE LCD **/
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	0e 94 a4 02 	call	0x548	; 0x548 <LCD_sendcmd>
			TMR0_delayms(20);
 23c:	64 e1       	ldi	r22, 0x14	; 20
 23e:	70 e0       	ldi	r23, 0x00	; 0
 240:	80 e0       	ldi	r24, 0x00	; 0
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	0e 94 84 05 	call	0xb08	; 0xb08 <TMR0_delayms>
			
			APP_readuserpin(); /** READ THE PIN AGAIN **/
 248:	0e 94 94 00 	call	0x128	; 0x128 <APP_readuserpin>
		}
		
		u8_a_pintry++ ; /** TRY FOR MORE ATTEMPT **/
 24c:	80 91 d3 00 	lds	r24, 0x00D3	; 0x8000d3 <u8_a_pintry>
 250:	8f 5f       	subi	r24, 0xFF	; 255
 252:	80 93 d3 00 	sts	0x00D3, r24	; 0x8000d3 <u8_a_pintry>
	
	SPI_receivestring(&u8_g_cardpan); /** RECEIVE THE PAN **/
	
	/** VERIFY THE USER INSERTED PIN **/
	u8_a_pinnotmatched = 1 ;
	while (u8_a_pintry <= 2 && u8_a_pinnotmatched != 0  ) /** CHECK PIN MATCHING FOR TWO TIMES **/
 256:	80 91 d3 00 	lds	r24, 0x00D3	; 0x8000d3 <u8_a_pintry>
 25a:	83 30       	cpi	r24, 0x03	; 3
 25c:	20 f4       	brcc	.+8      	; 0x266 <APP_startcardcomm+0xa0>
 25e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 262:	81 11       	cpse	r24, r1
 264:	c7 cf       	rjmp	.-114    	; 0x1f4 <APP_startcardcomm+0x2e>
 266:	08 95       	ret

00000268 <APP_getamount>:
	}
}

void APP_getamount()
{
	LCD_sendcmd(LCD_CLEAR); /** CLEAR THE LCD **/
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	0e 94 a4 02 	call	0x548	; 0x548 <LCD_sendcmd>
	TMR0_delayms(20);
 26e:	64 e1       	ldi	r22, 0x14	; 20
 270:	70 e0       	ldi	r23, 0x00	; 0
 272:	80 e0       	ldi	r24, 0x00	; 0
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	0e 94 84 05 	call	0xb08	; 0xb08 <TMR0_delayms>
	
	LCD_writestr("ENTER THE AMOUNT"); /** ASK USER TO ENTER THE AMOUNT NEEDED **/
 27a:	81 ec       	ldi	r24, 0xC1	; 193
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	0e 94 75 03 	call	0x6ea	; 0x6ea <LCD_writestr>
	TMR0_delayms(100);
 282:	64 e6       	ldi	r22, 0x64	; 100
 284:	70 e0       	ldi	r23, 0x00	; 0
 286:	80 e0       	ldi	r24, 0x00	; 0
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	0e 94 84 05 	call	0xb08	; 0xb08 <TMR0_delayms>
	
	LCD_goto(1,2);
 28e:	62 e0       	ldi	r22, 0x02	; 2
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	0e 94 88 03 	call	0x710	; 0x710 <LCD_goto>

	for(counter = 0 ; counter <= 6 ; counter++)
 296:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <counter>
 29a:	24 c0       	rjmp	.+72     	; 0x2e4 <APP_getamount+0x7c>
	{
		u8_a_pressednum = KEYPAD_readFail ;
 29c:	91 e0       	ldi	r25, 0x01	; 1
 29e:	90 93 d5 00 	sts	0x00D5, r25	; 0x8000d5 <u8_a_pressednum>
		
		if (counter == 4)
 2a2:	84 30       	cpi	r24, 0x04	; 4
 2a4:	39 f4       	brne	.+14     	; 0x2b4 <APP_getamount+0x4c>
		{
			LCD_writechar('.'); /** DECIMEL POINT **/
 2a6:	8e e2       	ldi	r24, 0x2E	; 46
 2a8:	0e 94 2e 03 	call	0x65c	; 0x65c <LCD_writechar>
			u8_returnstatus = KEYPAD_readFail; /** REINITIALIZE STATE TO ACCEPT NEW NUMBER **/
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <u8_returnstatus>
			continue ;
 2b2:	13 c0       	rjmp	.+38     	; 0x2da <APP_getamount+0x72>
		}
		
		while ((KEYPAD_read(&u8_a_pressednum) == KEYPAD_readFail)); /** POLLING UNTILL NUMBER PRESSED **/
 2b4:	85 ed       	ldi	r24, 0xD5	; 213
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <KEYPAD_read>
 2bc:	81 30       	cpi	r24, 0x01	; 1
 2be:	d1 f3       	breq	.-12     	; 0x2b4 <APP_getamount+0x4c>
		
		TMR0_delayms(200);
 2c0:	68 ec       	ldi	r22, 0xC8	; 200
 2c2:	70 e0       	ldi	r23, 0x00	; 0
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	0e 94 84 05 	call	0xb08	; 0xb08 <TMR0_delayms>
		LCD_writechar(u8_a_pressednum);
 2cc:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <u8_a_pressednum>
 2d0:	0e 94 2e 03 	call	0x65c	; 0x65c <LCD_writechar>
		
		u8_returnstatus = KEYPAD_readFail; /** REINITIALIZE STATE TO ACCEPT NEW NUMBER **/
 2d4:	81 e0       	ldi	r24, 0x01	; 1
 2d6:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <u8_returnstatus>
	LCD_writestr("ENTER THE AMOUNT"); /** ASK USER TO ENTER THE AMOUNT NEEDED **/
	TMR0_delayms(100);
	
	LCD_goto(1,2);

	for(counter = 0 ; counter <= 6 ; counter++)
 2da:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <counter>
 2de:	8f 5f       	subi	r24, 0xFF	; 255
 2e0:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <counter>
 2e4:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <counter>
 2e8:	87 30       	cpi	r24, 0x07	; 7
 2ea:	c0 f2       	brcs	.-80     	; 0x29c <APP_getamount+0x34>
		LCD_writechar(u8_a_pressednum);
		
		u8_returnstatus = KEYPAD_readFail; /** REINITIALIZE STATE TO ACCEPT NEW NUMBER **/
	}
	
 2ec:	08 95       	ret

000002ee <Button_init>:
/* RETURN    : void                                              */
/*****************************************************************/
void Button_init(uint8_t Button_port , uint8_t Button_pin)
{
	/** SET THE DIRECTION OF BUTTON AS INPUT **/
	DIO_setpindir(Button_port , Button_pin , DIO_PIN_INPUT);
 2ee:	40 e0       	ldi	r20, 0x00	; 0
 2f0:	0e 94 ab 03 	call	0x756	; 0x756 <DIO_setpindir>
 2f4:	08 95       	ret

000002f6 <Is_pressed>:
/* FUNCTION TO CHECK THE BUTTON STATUS PRESSED OR NOT            */
/* ARGUMENTS : TAKES THE BUTTON PIN                              */
/* RETURN    : RETURNS BUTTON_t type                             */
/*****************************************************************/
button_t Is_pressed(uint8_t Button_port , uint8_t Button_pin , uint8_t * value)
{
 2f6:	0f 93       	push	r16
 2f8:	1f 93       	push	r17
 2fa:	cf 93       	push	r28
 2fc:	df 93       	push	r29
 2fe:	1f 92       	push	r1
 300:	cd b7       	in	r28, 0x3d	; 61
 302:	de b7       	in	r29, 0x3e	; 62
 304:	8a 01       	movw	r16, r20
	button_t button_state = Button_Notpressed ; /* VARIABLE TO HOLD THE RETURN TYPE OF THE FUNCTION */
	
	PinRead_t pin_status = NOT_VALID_READ ;  /** VARIABLE TO HOLD THE STATE OF PIN READ **/
	
	uint8_t pvalue = 0 ;
 306:	19 82       	std	Y+1, r1	; 0x01
	
	pin_status = DIO_readpin(Button_port , Button_pin , &pvalue); /** READ THE BUTTON PIN VALUE */
 308:	ae 01       	movw	r20, r28
 30a:	4f 5f       	subi	r20, 0xFF	; 255
 30c:	5f 4f       	sbci	r21, 0xFF	; 255
 30e:	0e 94 a9 04 	call	0x952	; 0x952 <DIO_readpin>
	
	if (!pin_status) 
 312:	81 11       	cpse	r24, r1
 314:	05 c0       	rjmp	.+10     	; 0x320 <Is_pressed+0x2a>
	{
		button_state = Button_pressed ; /** RETURN THE STATUS AS BUTTON IS PRESSED **/
		*value = pvalue ;
 316:	89 81       	ldd	r24, Y+1	; 0x01
 318:	f8 01       	movw	r30, r16
 31a:	80 83       	st	Z, r24
	
	pin_status = DIO_readpin(Button_port , Button_pin , &pvalue); /** READ THE BUTTON PIN VALUE */
	
	if (!pin_status) 
	{
		button_state = Button_pressed ; /** RETURN THE STATUS AS BUTTON IS PRESSED **/
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	04 c0       	rjmp	.+8      	; 0x328 <Is_pressed+0x32>
	}
	
	else
	{
		button_state = Button_Notpressed ; /** RETURN THE STATUS AS BUTTON IS PRESSED **/
		*value = pvalue ;
 320:	89 81       	ldd	r24, Y+1	; 0x01
 322:	f8 01       	movw	r30, r16
 324:	80 83       	st	Z, r24
		*value = pvalue ;
	}
	
	else
	{
		button_state = Button_Notpressed ; /** RETURN THE STATUS AS BUTTON IS PRESSED **/
 326:	80 e0       	ldi	r24, 0x00	; 0
		*value = pvalue ;
	}
	
	return button_state ; /** RETURN THE STATUS OF THE BUTTON **/
}
 328:	0f 90       	pop	r0
 32a:	df 91       	pop	r29
 32c:	cf 91       	pop	r28
 32e:	1f 91       	pop	r17
 330:	0f 91       	pop	r16
 332:	08 95       	ret

00000334 <KEYPAD_init>:
/** @return KEYPAD_initFail                                                */
/***************************************************************************/
KEYPAD_initError KEYPAD_init(void)
{
    /*Rows direction initialization*/
    DIO_setpindir(ROW_PORT_DATA, R1 , DIO_PIN_OUTPUT);
 334:	41 e0       	ldi	r20, 0x01	; 1
 336:	62 e0       	ldi	r22, 0x02	; 2
 338:	82 e0       	ldi	r24, 0x02	; 2
 33a:	0e 94 ab 03 	call	0x756	; 0x756 <DIO_setpindir>
	DIO_setpindir(ROW_PORT_DATA, R2 , DIO_PIN_OUTPUT);
 33e:	41 e0       	ldi	r20, 0x01	; 1
 340:	63 e0       	ldi	r22, 0x03	; 3
 342:	82 e0       	ldi	r24, 0x02	; 2
 344:	0e 94 ab 03 	call	0x756	; 0x756 <DIO_setpindir>
	DIO_setpindir(ROW_PORT_DATA, R3 , DIO_PIN_OUTPUT);
 348:	41 e0       	ldi	r20, 0x01	; 1
 34a:	64 e0       	ldi	r22, 0x04	; 4
 34c:	82 e0       	ldi	r24, 0x02	; 2
 34e:	0e 94 ab 03 	call	0x756	; 0x756 <DIO_setpindir>
	DIO_setpindir(DIO_PORTD, R4 , DIO_PIN_OUTPUT);
 352:	41 e0       	ldi	r20, 0x01	; 1
 354:	60 e0       	ldi	r22, 0x00	; 0
 356:	83 e0       	ldi	r24, 0x03	; 3
 358:	0e 94 ab 03 	call	0x756	; 0x756 <DIO_setpindir>
	
    /*Columns direction initialization*/
	DIO_setpindir(COLUMN_PORT_DATA , C1 , DIO_PIN_INPUT);
 35c:	40 e0       	ldi	r20, 0x00	; 0
 35e:	65 e0       	ldi	r22, 0x05	; 5
 360:	82 e0       	ldi	r24, 0x02	; 2
 362:	0e 94 ab 03 	call	0x756	; 0x756 <DIO_setpindir>
	DIO_setpindir(COLUMN_PORT_DATA , C2 , DIO_PIN_INPUT);
 366:	40 e0       	ldi	r20, 0x00	; 0
 368:	66 e0       	ldi	r22, 0x06	; 6
 36a:	82 e0       	ldi	r24, 0x02	; 2
 36c:	0e 94 ab 03 	call	0x756	; 0x756 <DIO_setpindir>
	DIO_setpindir(COLUMN_PORT_DATA , C3 , DIO_PIN_INPUT);
 370:	40 e0       	ldi	r20, 0x00	; 0
 372:	67 e0       	ldi	r22, 0x07	; 7
 374:	82 e0       	ldi	r24, 0x02	; 2
 376:	0e 94 ab 03 	call	0x756	; 0x756 <DIO_setpindir>
	DIO_setpinvalue(DIO_PORTD , R4 ,  DIO_PIN_LOW);
	

    #elif CONNECTION == 'U'
	
	DIO_setpinvalue(ROW_PORT_DATA , R1 , DIO_PIN_HIGH);
 37a:	41 e0       	ldi	r20, 0x01	; 1
 37c:	62 e0       	ldi	r22, 0x02	; 2
 37e:	82 e0       	ldi	r24, 0x02	; 2
 380:	0e 94 2a 04 	call	0x854	; 0x854 <DIO_setpinvalue>
	DIO_setpinvalue(ROW_PORT_DATA , R2 , DIO_PIN_HIGH);
 384:	41 e0       	ldi	r20, 0x01	; 1
 386:	63 e0       	ldi	r22, 0x03	; 3
 388:	82 e0       	ldi	r24, 0x02	; 2
 38a:	0e 94 2a 04 	call	0x854	; 0x854 <DIO_setpinvalue>
	DIO_setpinvalue(ROW_PORT_DATA , R3 , DIO_PIN_HIGH);
 38e:	41 e0       	ldi	r20, 0x01	; 1
 390:	64 e0       	ldi	r22, 0x04	; 4
 392:	82 e0       	ldi	r24, 0x02	; 2
 394:	0e 94 2a 04 	call	0x854	; 0x854 <DIO_setpinvalue>
	DIO_setpinvalue(DIO_PORTD , R4 , DIO_PIN_HIGH);
 398:	41 e0       	ldi	r20, 0x01	; 1
 39a:	60 e0       	ldi	r22, 0x00	; 0
 39c:	83 e0       	ldi	r24, 0x03	; 3
 39e:	0e 94 2a 04 	call	0x854	; 0x854 <DIO_setpinvalue>
	
	DIO_setpinvalue(COLUMN_PORT_DATA , C1 , DIO_PIN_HIGH);
 3a2:	41 e0       	ldi	r20, 0x01	; 1
 3a4:	65 e0       	ldi	r22, 0x05	; 5
 3a6:	82 e0       	ldi	r24, 0x02	; 2
 3a8:	0e 94 2a 04 	call	0x854	; 0x854 <DIO_setpinvalue>
	DIO_setpinvalue(COLUMN_PORT_DATA , C2 , DIO_PIN_HIGH);
 3ac:	41 e0       	ldi	r20, 0x01	; 1
 3ae:	66 e0       	ldi	r22, 0x06	; 6
 3b0:	82 e0       	ldi	r24, 0x02	; 2
 3b2:	0e 94 2a 04 	call	0x854	; 0x854 <DIO_setpinvalue>
	DIO_setpinvalue(COLUMN_PORT_DATA , C3 , DIO_PIN_HIGH);
 3b6:	41 e0       	ldi	r20, 0x01	; 1
 3b8:	67 e0       	ldi	r22, 0x07	; 7
 3ba:	82 e0       	ldi	r24, 0x02	; 2
 3bc:	0e 94 2a 04 	call	0x854	; 0x854 <DIO_setpinvalue>
	
    #endif
    return KEYPAD_initSuccess;
}
 3c0:	80 e0       	ldi	r24, 0x00	; 0
 3c2:	08 95       	ret

000003c4 <KEYPAD_read>:
/** @param *u8_a_value refrence to store the read value in                 */
/** @return KEYPAD_readSuccess                                             */
/** @return KEYPAD_readFail                                                */
/***************************************************************************/
KEYPAD_readError KEYPAD_read(uint8_t *u8_a_value)
{
 3c4:	ef 92       	push	r14
 3c6:	ff 92       	push	r15
 3c8:	0f 93       	push	r16
 3ca:	1f 93       	push	r17
 3cc:	cf 93       	push	r28
 3ce:	df 93       	push	r29
 3d0:	cd b7       	in	r28, 0x3d	; 61
 3d2:	de b7       	in	r29, 0x3e	; 62
 3d4:	27 97       	sbiw	r28, 0x07	; 7
 3d6:	0f b6       	in	r0, 0x3f	; 63
 3d8:	f8 94       	cli
 3da:	de bf       	out	0x3e, r29	; 62
 3dc:	0f be       	out	0x3f, r0	; 63
 3de:	cd bf       	out	0x3d, r28	; 61
 3e0:	7c 01       	movw	r14, r24
    #elif CONNECTION == 'D'
    #define u8_l_readCheck DIO_PIN_HIGH
    #define u8_l_pinValue  DIO_PIN_HIGH
    #endif

    uint8_t u8_l_Rows[ROWS_SIZE] = {R1, R2, R3};
 3e2:	19 82       	std	Y+1, r1	; 0x01
 3e4:	1a 82       	std	Y+2, r1	; 0x02
 3e6:	1b 82       	std	Y+3, r1	; 0x03
 3e8:	1c 82       	std	Y+4, r1	; 0x04
 3ea:	82 e0       	ldi	r24, 0x02	; 2
 3ec:	89 83       	std	Y+1, r24	; 0x01
 3ee:	83 e0       	ldi	r24, 0x03	; 3
 3f0:	8a 83       	std	Y+2, r24	; 0x02
 3f2:	84 e0       	ldi	r24, 0x04	; 4
 3f4:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t u8_l_Columns[COLUMNS_SIZE] = {C1, C2, C3};
 3f6:	85 e0       	ldi	r24, 0x05	; 5
 3f8:	8d 83       	std	Y+5, r24	; 0x05
 3fa:	86 e0       	ldi	r24, 0x06	; 6
 3fc:	8e 83       	std	Y+6, r24	; 0x06
 3fe:	87 e0       	ldi	r24, 0x07	; 7
 400:	8f 83       	std	Y+7, r24	; 0x07

    for (u8_a_rowiterator = 0; u8_a_rowiterator < ROWS_SIZE; u8_a_rowiterator++)
 402:	00 e0       	ldi	r16, 0x00	; 0
 404:	90 c0       	rjmp	.+288    	; 0x526 <__EEPROM_REGION_LENGTH__+0x126>
    {
		if (u8_a_rowiterator == 3 )
 406:	03 30       	cpi	r16, 0x03	; 3
 408:	39 f4       	brne	.+14     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
		{
			DIO_setpinvalue(DIO_PORTD , DIO_PIN0, u8_l_pinValue);
 40a:	40 e0       	ldi	r20, 0x00	; 0
 40c:	60 e0       	ldi	r22, 0x00	; 0
 40e:	83 e0       	ldi	r24, 0x03	; 3
 410:	0e 94 2a 04 	call	0x854	; 0x854 <DIO_setpinvalue>
/** @param *u8_a_value refrence to store the read value in                 */
/** @return KEYPAD_readSuccess                                             */
/** @return KEYPAD_readFail                                                */
/***************************************************************************/
KEYPAD_readError KEYPAD_read(uint8_t *u8_a_value)
{
 414:	10 e0       	ldi	r17, 0x00	; 0
 416:	72 c0       	rjmp	.+228    	; 0x4fc <__EEPROM_REGION_LENGTH__+0xfc>
		{
			DIO_setpinvalue(DIO_PORTD , DIO_PIN0, u8_l_pinValue);
		}
		else
		{
			DIO_setpinvalue(ROW_PORT_DATA , u8_l_Rows[u8_a_rowiterator] , u8_l_pinValue);
 418:	e1 e0       	ldi	r30, 0x01	; 1
 41a:	f0 e0       	ldi	r31, 0x00	; 0
 41c:	ec 0f       	add	r30, r28
 41e:	fd 1f       	adc	r31, r29
 420:	e0 0f       	add	r30, r16
 422:	f1 1d       	adc	r31, r1
 424:	40 e0       	ldi	r20, 0x00	; 0
 426:	60 81       	ld	r22, Z
 428:	82 e0       	ldi	r24, 0x02	; 2
 42a:	0e 94 2a 04 	call	0x854	; 0x854 <DIO_setpinvalue>
 42e:	f2 cf       	rjmp	.-28     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
		}

        for (u8_a_coulumniterator = 0; u8_a_coulumniterator < COLUMNS_SIZE; u8_a_coulumniterator++)
        {
            DIO_readpin(COLUMN_PORT_DATA , u8_l_Columns[u8_a_coulumniterator] , u8_a_value);
 430:	e5 e0       	ldi	r30, 0x05	; 5
 432:	f0 e0       	ldi	r31, 0x00	; 0
 434:	ec 0f       	add	r30, r28
 436:	fd 1f       	adc	r31, r29
 438:	e1 0f       	add	r30, r17
 43a:	f1 1d       	adc	r31, r1
 43c:	a7 01       	movw	r20, r14
 43e:	60 81       	ld	r22, Z
 440:	82 e0       	ldi	r24, 0x02	; 2
 442:	0e 94 a9 04 	call	0x952	; 0x952 <DIO_readpin>
            if (*u8_a_value == u8_l_readCheck)
 446:	f7 01       	movw	r30, r14
 448:	80 81       	ld	r24, Z
 44a:	81 11       	cpse	r24, r1
 44c:	56 c0       	rjmp	.+172    	; 0x4fa <__EEPROM_REGION_LENGTH__+0xfa>
            {
                if (u8_a_rowiterator == 0)
 44e:	01 11       	cpse	r16, r1
 450:	11 c0       	rjmp	.+34     	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
                {
                    if (u8_a_coulumniterator == 0)
 452:	11 11       	cpse	r17, r1
 454:	03 c0       	rjmp	.+6      	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
                    {
                        *u8_a_value = '1' ;
 456:	81 e3       	ldi	r24, 0x31	; 49
 458:	80 83       	st	Z, r24
 45a:	3b c0       	rjmp	.+118    	; 0x4d2 <__EEPROM_REGION_LENGTH__+0xd2>
                    }
                    else if (u8_a_coulumniterator == 1)
 45c:	11 30       	cpi	r17, 0x01	; 1
 45e:	21 f4       	brne	.+8      	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
                    {
                        *u8_a_value = '2' ;
 460:	82 e3       	ldi	r24, 0x32	; 50
 462:	f7 01       	movw	r30, r14
 464:	80 83       	st	Z, r24
 466:	35 c0       	rjmp	.+106    	; 0x4d2 <__EEPROM_REGION_LENGTH__+0xd2>
                    }
                    else if (u8_a_coulumniterator == 2)
 468:	12 30       	cpi	r17, 0x02	; 2
 46a:	99 f5       	brne	.+102    	; 0x4d2 <__EEPROM_REGION_LENGTH__+0xd2>
                    {
                        *u8_a_value = '3' ;
 46c:	83 e3       	ldi	r24, 0x33	; 51
 46e:	f7 01       	movw	r30, r14
 470:	80 83       	st	Z, r24
 472:	2f c0       	rjmp	.+94     	; 0x4d2 <__EEPROM_REGION_LENGTH__+0xd2>
                    }
                }

                else if (u8_a_rowiterator == 1)
 474:	01 30       	cpi	r16, 0x01	; 1
 476:	91 f4       	brne	.+36     	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
                {
                    if (u8_a_coulumniterator == 0)
 478:	11 11       	cpse	r17, r1
 47a:	04 c0       	rjmp	.+8      	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
                    {
                        *u8_a_value = '4' ;
 47c:	84 e3       	ldi	r24, 0x34	; 52
 47e:	f7 01       	movw	r30, r14
 480:	80 83       	st	Z, r24
 482:	27 c0       	rjmp	.+78     	; 0x4d2 <__EEPROM_REGION_LENGTH__+0xd2>
                    }
                    else if (u8_a_coulumniterator == 1)
 484:	11 30       	cpi	r17, 0x01	; 1
 486:	21 f4       	brne	.+8      	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
                    {
                        *u8_a_value = '5' ;
 488:	85 e3       	ldi	r24, 0x35	; 53
 48a:	f7 01       	movw	r30, r14
 48c:	80 83       	st	Z, r24
 48e:	21 c0       	rjmp	.+66     	; 0x4d2 <__EEPROM_REGION_LENGTH__+0xd2>
                    }
                    else if (u8_a_coulumniterator == 2)
 490:	12 30       	cpi	r17, 0x02	; 2
 492:	f9 f4       	brne	.+62     	; 0x4d2 <__EEPROM_REGION_LENGTH__+0xd2>
                    {
                        *u8_a_value = '6' ;
 494:	86 e3       	ldi	r24, 0x36	; 54
 496:	f7 01       	movw	r30, r14
 498:	80 83       	st	Z, r24
 49a:	1b c0       	rjmp	.+54     	; 0x4d2 <__EEPROM_REGION_LENGTH__+0xd2>
                    }
                }

                else if (u8_a_rowiterator == 2)
 49c:	02 30       	cpi	r16, 0x02	; 2
 49e:	91 f4       	brne	.+36     	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
                {
                    if (u8_a_coulumniterator == 0)
 4a0:	11 11       	cpse	r17, r1
 4a2:	04 c0       	rjmp	.+8      	; 0x4ac <__EEPROM_REGION_LENGTH__+0xac>
                    {
                        *u8_a_value = '7' ;
 4a4:	87 e3       	ldi	r24, 0x37	; 55
 4a6:	f7 01       	movw	r30, r14
 4a8:	80 83       	st	Z, r24
 4aa:	13 c0       	rjmp	.+38     	; 0x4d2 <__EEPROM_REGION_LENGTH__+0xd2>
                    }
                    else if (u8_a_coulumniterator == 1)
 4ac:	11 30       	cpi	r17, 0x01	; 1
 4ae:	21 f4       	brne	.+8      	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
                    {
                        *u8_a_value = '8' ;
 4b0:	88 e3       	ldi	r24, 0x38	; 56
 4b2:	f7 01       	movw	r30, r14
 4b4:	80 83       	st	Z, r24
 4b6:	0d c0       	rjmp	.+26     	; 0x4d2 <__EEPROM_REGION_LENGTH__+0xd2>
                    }
                    else if (u8_a_coulumniterator == 2)
 4b8:	12 30       	cpi	r17, 0x02	; 2
 4ba:	59 f4       	brne	.+22     	; 0x4d2 <__EEPROM_REGION_LENGTH__+0xd2>
                    {
                        *u8_a_value = '9' ;
 4bc:	89 e3       	ldi	r24, 0x39	; 57
 4be:	f7 01       	movw	r30, r14
 4c0:	80 83       	st	Z, r24
 4c2:	07 c0       	rjmp	.+14     	; 0x4d2 <__EEPROM_REGION_LENGTH__+0xd2>
                    }
                }
				
				else if (u8_a_rowiterator == 3)
 4c4:	03 30       	cpi	r16, 0x03	; 3
 4c6:	29 f4       	brne	.+10     	; 0x4d2 <__EEPROM_REGION_LENGTH__+0xd2>
				{
					if (u8_a_coulumniterator == 0)
 4c8:	11 11       	cpse	r17, r1
 4ca:	03 c0       	rjmp	.+6      	; 0x4d2 <__EEPROM_REGION_LENGTH__+0xd2>
					{
						*u8_a_value = '0' ;
 4cc:	80 e3       	ldi	r24, 0x30	; 48
 4ce:	f7 01       	movw	r30, r14
 4d0:	80 83       	st	Z, r24
					}
				}
				if (u8_a_rowiterator == 3)
 4d2:	03 30       	cpi	r16, 0x03	; 3
 4d4:	31 f4       	brne	.+12     	; 0x4e2 <__EEPROM_REGION_LENGTH__+0xe2>
				{
					DIO_togglepin( DIO_PORTD , DIO_PIN0);
 4d6:	60 e0       	ldi	r22, 0x00	; 0
 4d8:	83 e0       	ldi	r24, 0x03	; 3
 4da:	0e 94 e7 04 	call	0x9ce	; 0x9ce <DIO_togglepin>
					return KEYPAD_readSuccess;
 4de:	80 e0       	ldi	r24, 0x00	; 0
 4e0:	26 c0       	rjmp	.+76     	; 0x52e <__EEPROM_REGION_LENGTH__+0x12e>
				}
				else
				{
					
					DIO_togglepin( ROW_PORT_DATA , u8_l_Rows[u8_a_rowiterator] );
 4e2:	e1 e0       	ldi	r30, 0x01	; 1
 4e4:	f0 e0       	ldi	r31, 0x00	; 0
 4e6:	ec 0f       	add	r30, r28
 4e8:	fd 1f       	adc	r31, r29
 4ea:	e0 0f       	add	r30, r16
 4ec:	f1 1d       	adc	r31, r1
 4ee:	60 81       	ld	r22, Z
 4f0:	82 e0       	ldi	r24, 0x02	; 2
 4f2:	0e 94 e7 04 	call	0x9ce	; 0x9ce <DIO_togglepin>
					return KEYPAD_readSuccess;
 4f6:	80 e0       	ldi	r24, 0x00	; 0
 4f8:	1a c0       	rjmp	.+52     	; 0x52e <__EEPROM_REGION_LENGTH__+0x12e>
		else
		{
			DIO_setpinvalue(ROW_PORT_DATA , u8_l_Rows[u8_a_rowiterator] , u8_l_pinValue);
		}

        for (u8_a_coulumniterator = 0; u8_a_coulumniterator < COLUMNS_SIZE; u8_a_coulumniterator++)
 4fa:	1f 5f       	subi	r17, 0xFF	; 255
 4fc:	13 30       	cpi	r17, 0x03	; 3
 4fe:	08 f4       	brcc	.+2      	; 0x502 <__EEPROM_REGION_LENGTH__+0x102>
 500:	97 cf       	rjmp	.-210    	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
					DIO_togglepin( ROW_PORT_DATA , u8_l_Rows[u8_a_rowiterator] );
					return KEYPAD_readSuccess;
				}
            }
        }
		if (u8_a_rowiterator == 3)
 502:	03 30       	cpi	r16, 0x03	; 3
 504:	29 f4       	brne	.+10     	; 0x510 <__EEPROM_REGION_LENGTH__+0x110>
		{
			DIO_togglepin( DIO_PORTD , DIO_PIN0);
 506:	60 e0       	ldi	r22, 0x00	; 0
 508:	83 e0       	ldi	r24, 0x03	; 3
 50a:	0e 94 e7 04 	call	0x9ce	; 0x9ce <DIO_togglepin>
 50e:	0a c0       	rjmp	.+20     	; 0x524 <__EEPROM_REGION_LENGTH__+0x124>
		}
		else
		{
			DIO_togglepin( ROW_PORT_DATA , u8_l_Rows[u8_a_rowiterator] );
 510:	e1 e0       	ldi	r30, 0x01	; 1
 512:	f0 e0       	ldi	r31, 0x00	; 0
 514:	ec 0f       	add	r30, r28
 516:	fd 1f       	adc	r31, r29
 518:	e0 0f       	add	r30, r16
 51a:	f1 1d       	adc	r31, r1
 51c:	60 81       	ld	r22, Z
 51e:	82 e0       	ldi	r24, 0x02	; 2
 520:	0e 94 e7 04 	call	0x9ce	; 0x9ce <DIO_togglepin>
    #endif

    uint8_t u8_l_Rows[ROWS_SIZE] = {R1, R2, R3};
    uint8_t u8_l_Columns[COLUMNS_SIZE] = {C1, C2, C3};

    for (u8_a_rowiterator = 0; u8_a_rowiterator < ROWS_SIZE; u8_a_rowiterator++)
 524:	0f 5f       	subi	r16, 0xFF	; 255
 526:	04 30       	cpi	r16, 0x04	; 4
 528:	08 f4       	brcc	.+2      	; 0x52c <__EEPROM_REGION_LENGTH__+0x12c>
 52a:	6d cf       	rjmp	.-294    	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
		else
		{
			DIO_togglepin( ROW_PORT_DATA , u8_l_Rows[u8_a_rowiterator] );
		}
    }
    return KEYPAD_readFail;
 52c:	81 e0       	ldi	r24, 0x01	; 1
 52e:	27 96       	adiw	r28, 0x07	; 7
 530:	0f b6       	in	r0, 0x3f	; 63
 532:	f8 94       	cli
 534:	de bf       	out	0x3e, r29	; 62
 536:	0f be       	out	0x3f, r0	; 63
 538:	cd bf       	out	0x3d, r28	; 61
 53a:	df 91       	pop	r29
 53c:	cf 91       	pop	r28
 53e:	1f 91       	pop	r17
 540:	0f 91       	pop	r16
 542:	ff 90       	pop	r15
 544:	ef 90       	pop	r14
 546:	08 95       	ret

00000548 <LCD_sendcmd>:
/** FUNCTION TO SEND COMMAND TO LCD                       */
/** ARGUMENTS   : COMMAND                                 */
/** RETURNS     : ERROR STATUS                            */
/**********************************************************/
LCD_status LCD_sendcmd(uint8_t u8_a_cmd)
{
 548:	cf 93       	push	r28
 54a:	c8 2f       	mov	r28, r24
	TMR0_init();
 54c:	0e 94 5d 05 	call	0xaba	; 0xaba <TMR0_init>
		DIO_setpinvalue(LCD_8BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_LOW);  /** LATCH **/
		TMR0_delayms(5); /** LOW **/
		
		#elif LCD_MODE == BIT_MODE_4    /** IF LCD CONFIGURED AS 4 BIT MODE **/
		
		DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_RS_PIN , DIO_PIN_LOW);  /** COMMAND MODE       **/
 550:	40 e0       	ldi	r20, 0x00	; 0
 552:	61 e0       	ldi	r22, 0x01	; 1
 554:	80 e0       	ldi	r24, 0x00	; 0
 556:	0e 94 2a 04 	call	0x854	; 0x854 <DIO_setpinvalue>
		DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_RW_PIN , DIO_PIN_LOW);  /** WRITE TO LCD MODE  **/
 55a:	40 e0       	ldi	r20, 0x00	; 0
 55c:	62 e0       	ldi	r22, 0x02	; 2
 55e:	80 e0       	ldi	r24, 0x00	; 0
 560:	0e 94 2a 04 	call	0x854	; 0x854 <DIO_setpinvalue>
		DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_LOW);   /** PREPARE FOR LATCH  **/
 564:	40 e0       	ldi	r20, 0x00	; 0
 566:	63 e0       	ldi	r22, 0x03	; 3
 568:	80 e0       	ldi	r24, 0x00	; 0
 56a:	0e 94 2a 04 	call	0x854	; 0x854 <DIO_setpinvalue>
		
		PORTA = ((u8_a_cmd & 0xF0) | (PORTA & 0x0F)); /** SEND THE MSB(HIGH NIBBLE) **/
 56e:	8b b3       	in	r24, 0x1b	; 27
 570:	9c 2f       	mov	r25, r28
 572:	90 7f       	andi	r25, 0xF0	; 240
 574:	8f 70       	andi	r24, 0x0F	; 15
 576:	89 2b       	or	r24, r25
 578:	8b bb       	out	0x1b, r24	; 27
		
		DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_HIGH); /** LATCH **/
 57a:	41 e0       	ldi	r20, 0x01	; 1
 57c:	63 e0       	ldi	r22, 0x03	; 3
 57e:	80 e0       	ldi	r24, 0x00	; 0
 580:	0e 94 2a 04 	call	0x854	; 0x854 <DIO_setpinvalue>
		TMR0_delayms(1);
 584:	61 e0       	ldi	r22, 0x01	; 1
 586:	70 e0       	ldi	r23, 0x00	; 0
 588:	80 e0       	ldi	r24, 0x00	; 0
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	0e 94 84 05 	call	0xb08	; 0xb08 <TMR0_delayms>
		DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_LOW);  /** LATCH **/
 590:	40 e0       	ldi	r20, 0x00	; 0
 592:	63 e0       	ldi	r22, 0x03	; 3
 594:	80 e0       	ldi	r24, 0x00	; 0
 596:	0e 94 2a 04 	call	0x854	; 0x854 <DIO_setpinvalue>
		
		
		PORTA = (((u8_a_cmd << 4) & 0xF0) | (PORTA & 0x0F)); /** SEND THE LSB(LOW NIBBLE) **/
 59a:	20 e1       	ldi	r18, 0x10	; 16
 59c:	c2 9f       	mul	r28, r18
 59e:	c0 01       	movw	r24, r0
 5a0:	11 24       	eor	r1, r1
 5a2:	9b b3       	in	r25, 0x1b	; 27
 5a4:	9f 70       	andi	r25, 0x0F	; 15
 5a6:	89 2b       	or	r24, r25
 5a8:	8b bb       	out	0x1b, r24	; 27
		
		DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_HIGH); /** LATCH **/
 5aa:	41 e0       	ldi	r20, 0x01	; 1
 5ac:	63 e0       	ldi	r22, 0x03	; 3
 5ae:	80 e0       	ldi	r24, 0x00	; 0
 5b0:	0e 94 2a 04 	call	0x854	; 0x854 <DIO_setpinvalue>
		TMR0_delayms(1);
 5b4:	61 e0       	ldi	r22, 0x01	; 1
 5b6:	70 e0       	ldi	r23, 0x00	; 0
 5b8:	80 e0       	ldi	r24, 0x00	; 0
 5ba:	90 e0       	ldi	r25, 0x00	; 0
 5bc:	0e 94 84 05 	call	0xb08	; 0xb08 <TMR0_delayms>
		
		DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_LOW);    /** LATCH **/
 5c0:	40 e0       	ldi	r20, 0x00	; 0
 5c2:	63 e0       	ldi	r22, 0x03	; 3
 5c4:	80 e0       	ldi	r24, 0x00	; 0
 5c6:	0e 94 2a 04 	call	0x854	; 0x854 <DIO_setpinvalue>
		
		TMR0_delayms(5); /** 5 ms BEFORE SENDING THE NEXT COMMAND **/
 5ca:	65 e0       	ldi	r22, 0x05	; 5
 5cc:	70 e0       	ldi	r23, 0x00	; 0
 5ce:	80 e0       	ldi	r24, 0x00	; 0
 5d0:	90 e0       	ldi	r25, 0x00	; 0
 5d2:	0e 94 84 05 	call	0xb08	; 0xb08 <TMR0_delayms>
		
		#endif
}
 5d6:	cf 91       	pop	r28
 5d8:	08 95       	ret

000005da <LCD_init>:
/**********************************************************/
LCD_status LCD_init(void)
{
	LCD_status en_a_lcdinitstatus = VALID__LCD_INIT ; /** VARIABLE TO OLD THE RETURN STATUS OF THE FUNCTION **/
	
	TMR0_init();
 5da:	0e 94 5d 05 	call	0xaba	; 0xaba <TMR0_init>
		LCD_sendcmd(LCD_CLEAR);       /** CLEAR THE LCD                                    **/
		
		
		#elif LCD_MODE == BIT_MODE_4    /** IF LCD CONFIGURED AS 4 BIT MODE **/
		
		DIO_setpindir(LCD_4BIT_CMD_PORT , LCD_RS_PIN , DIO_PIN_OUTPUT); /** SET RS PIN AS OUTPUT PIN **/
 5de:	41 e0       	ldi	r20, 0x01	; 1
 5e0:	61 e0       	ldi	r22, 0x01	; 1
 5e2:	80 e0       	ldi	r24, 0x00	; 0
 5e4:	0e 94 ab 03 	call	0x756	; 0x756 <DIO_setpindir>
		DIO_setpindir(LCD_4BIT_CMD_PORT , LCD_RW_PIN , DIO_PIN_OUTPUT); /** SET RW PIN AS OUTPUT PIN **/
 5e8:	41 e0       	ldi	r20, 0x01	; 1
 5ea:	62 e0       	ldi	r22, 0x02	; 2
 5ec:	80 e0       	ldi	r24, 0x00	; 0
 5ee:	0e 94 ab 03 	call	0x756	; 0x756 <DIO_setpindir>
		DIO_setpindir(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_OUTPUT);  /** SET E PIN AS OUTPUT PIN  **/
 5f2:	41 e0       	ldi	r20, 0x01	; 1
 5f4:	63 e0       	ldi	r22, 0x03	; 3
 5f6:	80 e0       	ldi	r24, 0x00	; 0
 5f8:	0e 94 ab 03 	call	0x756	; 0x756 <DIO_setpindir>
		
		DIO_setpindir(LCD_4BIT_DATA_PORT , LCD_D4_PIN , DIO_PIN_OUTPUT); /** 4 DATA PINS AS OUTPUT **/
 5fc:	41 e0       	ldi	r20, 0x01	; 1
 5fe:	64 e0       	ldi	r22, 0x04	; 4
 600:	80 e0       	ldi	r24, 0x00	; 0
 602:	0e 94 ab 03 	call	0x756	; 0x756 <DIO_setpindir>
		DIO_setpindir(LCD_4BIT_DATA_PORT , LCD_D5_PIN , DIO_PIN_OUTPUT);
 606:	41 e0       	ldi	r20, 0x01	; 1
 608:	65 e0       	ldi	r22, 0x05	; 5
 60a:	80 e0       	ldi	r24, 0x00	; 0
 60c:	0e 94 ab 03 	call	0x756	; 0x756 <DIO_setpindir>
		DIO_setpindir(LCD_4BIT_DATA_PORT , LCD_D6_PIN , DIO_PIN_OUTPUT);
 610:	41 e0       	ldi	r20, 0x01	; 1
 612:	66 e0       	ldi	r22, 0x06	; 6
 614:	80 e0       	ldi	r24, 0x00	; 0
 616:	0e 94 ab 03 	call	0x756	; 0x756 <DIO_setpindir>
		DIO_setpindir(LCD_4BIT_DATA_PORT , LCD_D7_PIN , DIO_PIN_OUTPUT);
 61a:	41 e0       	ldi	r20, 0x01	; 1
 61c:	67 e0       	ldi	r22, 0x07	; 7
 61e:	80 e0       	ldi	r24, 0x00	; 0
 620:	0e 94 ab 03 	call	0x756	; 0x756 <DIO_setpindir>
		
		TMR0_delayms(20); /** DELAY FOR LCD TO BE INITIALIZED **/
 624:	64 e1       	ldi	r22, 0x14	; 20
 626:	70 e0       	ldi	r23, 0x00	; 0
 628:	80 e0       	ldi	r24, 0x00	; 0
 62a:	90 e0       	ldi	r25, 0x00	; 0
 62c:	0e 94 84 05 	call	0xb08	; 0xb08 <TMR0_delayms>
		
		/** SEND SOME COMMANDS TO THE LCD FOR INITIAL SET   **/
		
		LCD_sendcmd(LCD_4BIT_MODE_CMD1); /** SEND THREE COMMANDS FOR LCD TO SET 4 BIT OPERATION MODE ( 2 LINES , 5*8 MATRIX ) **/
 630:	83 e3       	ldi	r24, 0x33	; 51
 632:	0e 94 a4 02 	call	0x548	; 0x548 <LCD_sendcmd>
		LCD_sendcmd(LCD_4BIT_MODE_CMD2);
 636:	82 e3       	ldi	r24, 0x32	; 50
 638:	0e 94 a4 02 	call	0x548	; 0x548 <LCD_sendcmd>
		LCD_sendcmd(LCD_4BIT_MODE_CMD3);
 63c:	88 e2       	ldi	r24, 0x28	; 40
 63e:	0e 94 a4 02 	call	0x548	; 0x548 <LCD_sendcmd>
		
		LCD_sendcmd(LCD_CURSOR_OFF);     /** NO NEED FOR CURSOR SO IT IS OFF                  **/
 642:	8c e0       	ldi	r24, 0x0C	; 12
 644:	0e 94 a4 02 	call	0x548	; 0x548 <LCD_sendcmd>
		LCD_sendcmd(LCD_CURSOR_INC);     /** DIRECTION OF WRITING FROM LEFT TO RIGHT          **/
 648:	86 e0       	ldi	r24, 0x06	; 6
 64a:	0e 94 a4 02 	call	0x548	; 0x548 <LCD_sendcmd>
		LCD_sendcmd(LCD_RETURN_HOME);    /** CURSOR STARTS FROM ITS HOME POSITION             **/
 64e:	82 e0       	ldi	r24, 0x02	; 2
 650:	0e 94 a4 02 	call	0x548	; 0x548 <LCD_sendcmd>
		LCD_sendcmd(LCD_CLEAR);          /** CLEAR THE LCD                                    **/
 654:	81 e0       	ldi	r24, 0x01	; 1
 656:	0e 94 a4 02 	call	0x548	; 0x548 <LCD_sendcmd>
		
		#endif 
		
}
 65a:	08 95       	ret

0000065c <LCD_writechar>:
/** FUNCTION TO DISPLAY CHARACTER ON LCD                  */
/** ARGUMENTS   : CHARACTER                               */
/** RETURNS     : ERROR STATUS                            */
/**********************************************************/
LCD_status LCD_writechar(uint8_t u8_a_chr)
{
 65c:	cf 93       	push	r28
 65e:	c8 2f       	mov	r28, r24
	
	TMR0_delayms(5); /** 5 ms BEFORE SENDING THE NEXT CHARACTER **/
	
	#elif LCD_MODE == BIT_MODE_4    /** IF LCD CONFIGURED AS 4 BIT MODE **/
	
	DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_RS_PIN , DIO_PIN_HIGH);  /** DATA MODE         **/
 660:	41 e0       	ldi	r20, 0x01	; 1
 662:	61 e0       	ldi	r22, 0x01	; 1
 664:	80 e0       	ldi	r24, 0x00	; 0
 666:	0e 94 2a 04 	call	0x854	; 0x854 <DIO_setpinvalue>
	DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_RW_PIN , DIO_PIN_LOW);   /** WRITE TO LCD MODE **/
 66a:	40 e0       	ldi	r20, 0x00	; 0
 66c:	62 e0       	ldi	r22, 0x02	; 2
 66e:	80 e0       	ldi	r24, 0x00	; 0
 670:	0e 94 2a 04 	call	0x854	; 0x854 <DIO_setpinvalue>
	DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_LOW);    /** DATA MODE         **/
 674:	40 e0       	ldi	r20, 0x00	; 0
 676:	63 e0       	ldi	r22, 0x03	; 3
 678:	80 e0       	ldi	r24, 0x00	; 0
 67a:	0e 94 2a 04 	call	0x854	; 0x854 <DIO_setpinvalue>
	
	
	PORTA = ((u8_a_chr & 0xF0) | (PORTA & 0x0F)); /** SEND THE MSB (HIGH NIBBLE) **/
 67e:	8b b3       	in	r24, 0x1b	; 27
 680:	9c 2f       	mov	r25, r28
 682:	90 7f       	andi	r25, 0xF0	; 240
 684:	8f 70       	andi	r24, 0x0F	; 15
 686:	89 2b       	or	r24, r25
 688:	8b bb       	out	0x1b, r24	; 27
	
	DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_HIGH); /** LATCH **/
 68a:	41 e0       	ldi	r20, 0x01	; 1
 68c:	63 e0       	ldi	r22, 0x03	; 3
 68e:	80 e0       	ldi	r24, 0x00	; 0
 690:	0e 94 2a 04 	call	0x854	; 0x854 <DIO_setpinvalue>
	TMR0_delayms(1);
 694:	61 e0       	ldi	r22, 0x01	; 1
 696:	70 e0       	ldi	r23, 0x00	; 0
 698:	80 e0       	ldi	r24, 0x00	; 0
 69a:	90 e0       	ldi	r25, 0x00	; 0
 69c:	0e 94 84 05 	call	0xb08	; 0xb08 <TMR0_delayms>
	DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_LOW); /** LATCH **/
 6a0:	40 e0       	ldi	r20, 0x00	; 0
 6a2:	63 e0       	ldi	r22, 0x03	; 3
 6a4:	80 e0       	ldi	r24, 0x00	; 0
 6a6:	0e 94 2a 04 	call	0x854	; 0x854 <DIO_setpinvalue>
		
	PORTA = (((u8_a_chr << 4) & 0xF0) | (PORTA & 0x0F)); /** SEND THE LSB (LOW NIBBLE) **/
 6aa:	20 e1       	ldi	r18, 0x10	; 16
 6ac:	c2 9f       	mul	r28, r18
 6ae:	c0 01       	movw	r24, r0
 6b0:	11 24       	eor	r1, r1
 6b2:	9b b3       	in	r25, 0x1b	; 27
 6b4:	9f 70       	andi	r25, 0x0F	; 15
 6b6:	89 2b       	or	r24, r25
 6b8:	8b bb       	out	0x1b, r24	; 27
	
	DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_HIGH); /** LATCH **/
 6ba:	41 e0       	ldi	r20, 0x01	; 1
 6bc:	63 e0       	ldi	r22, 0x03	; 3
 6be:	80 e0       	ldi	r24, 0x00	; 0
 6c0:	0e 94 2a 04 	call	0x854	; 0x854 <DIO_setpinvalue>
	TMR0_delayms(1);
 6c4:	61 e0       	ldi	r22, 0x01	; 1
 6c6:	70 e0       	ldi	r23, 0x00	; 0
 6c8:	80 e0       	ldi	r24, 0x00	; 0
 6ca:	90 e0       	ldi	r25, 0x00	; 0
 6cc:	0e 94 84 05 	call	0xb08	; 0xb08 <TMR0_delayms>
	DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_LOW);  /** LATCH **/
 6d0:	40 e0       	ldi	r20, 0x00	; 0
 6d2:	63 e0       	ldi	r22, 0x03	; 3
 6d4:	80 e0       	ldi	r24, 0x00	; 0
 6d6:	0e 94 2a 04 	call	0x854	; 0x854 <DIO_setpinvalue>
	
	TMR0_delayms(5); /** 5 ms BEFORE SENDING THE NEXT CHARACTER **/
 6da:	65 e0       	ldi	r22, 0x05	; 5
 6dc:	70 e0       	ldi	r23, 0x00	; 0
 6de:	80 e0       	ldi	r24, 0x00	; 0
 6e0:	90 e0       	ldi	r25, 0x00	; 0
 6e2:	0e 94 84 05 	call	0xb08	; 0xb08 <TMR0_delayms>
	
	#endif
}
 6e6:	cf 91       	pop	r28
 6e8:	08 95       	ret

000006ea <LCD_writestr>:
/** FUNCTION TO DISPLAY STRING ON LCD                     */
/** ARGUMENTS   : STRING                                  */
/** RETURNS     : ERROR STATUS                            */
/**********************************************************/
LCD_status LCD_writestr(uint8_t* u8_s_str)
{
 6ea:	0f 93       	push	r16
 6ec:	1f 93       	push	r17
 6ee:	cf 93       	push	r28
 6f0:	8c 01       	movw	r16, r24
	uint8_t u8_a_letter = 0;   /** VARIABLE SIMULATES LETTER **/
 6f2:	c0 e0       	ldi	r28, 0x00	; 0
	
	while (u8_s_str[u8_a_letter] != '\0') /** WHILE LETTER ISN'T NULL **/
 6f4:	03 c0       	rjmp	.+6      	; 0x6fc <LCD_writestr+0x12>
	{
		LCD_writechar(u8_s_str[u8_a_letter]); /** SEND LETTER TO LCD **/
 6f6:	0e 94 2e 03 	call	0x65c	; 0x65c <LCD_writechar>
		
		u8_a_letter++; /** JUMP TO THE NEXT LETTER **/
 6fa:	cf 5f       	subi	r28, 0xFF	; 255
/**********************************************************/
LCD_status LCD_writestr(uint8_t* u8_s_str)
{
	uint8_t u8_a_letter = 0;   /** VARIABLE SIMULATES LETTER **/
	
	while (u8_s_str[u8_a_letter] != '\0') /** WHILE LETTER ISN'T NULL **/
 6fc:	f8 01       	movw	r30, r16
 6fe:	ec 0f       	add	r30, r28
 700:	f1 1d       	adc	r31, r1
 702:	80 81       	ld	r24, Z
 704:	81 11       	cpse	r24, r1
 706:	f7 cf       	rjmp	.-18     	; 0x6f6 <LCD_writestr+0xc>
	{
		LCD_writechar(u8_s_str[u8_a_letter]); /** SEND LETTER TO LCD **/
		
		u8_a_letter++; /** JUMP TO THE NEXT LETTER **/
	}
}
 708:	cf 91       	pop	r28
 70a:	1f 91       	pop	r17
 70c:	0f 91       	pop	r16
 70e:	08 95       	ret

00000710 <LCD_goto>:
/** FUNCTION TO JUMP TO SPECIFIC POSITION ON LCD          */
/** ARGUMENTS   : ROW , COLUMN (POSITION)                 */
/** RETURNS     : ERROR STATUS                            */
/**********************************************************/
LCD_status  LCD_goto(uint8_t u8_a_row , uint8_t u8_a_column)
{
 710:	cf 93       	push	r28
 712:	df 93       	push	r29
 714:	00 d0       	rcall	.+0      	; 0x716 <LCD_goto+0x6>
 716:	cd b7       	in	r28, 0x3d	; 61
 718:	de b7       	in	r29, 0x3e	; 62
	uint8_t positions[2] = {0x80 , 0xC0}; /** POSITIONS OF 1st & 2nd ROWS **/
 71a:	90 e8       	ldi	r25, 0x80	; 128
 71c:	99 83       	std	Y+1, r25	; 0x01
 71e:	90 ec       	ldi	r25, 0xC0	; 192
 720:	9a 83       	std	Y+2, r25	; 0x02
	
	LCD_sendcmd(positions[u8_a_row] + u8_a_column); /** GO TO SPECIFIC MATRIX **/
 722:	e1 e0       	ldi	r30, 0x01	; 1
 724:	f0 e0       	ldi	r31, 0x00	; 0
 726:	ec 0f       	add	r30, r28
 728:	fd 1f       	adc	r31, r29
 72a:	e8 0f       	add	r30, r24
 72c:	f1 1d       	adc	r31, r1
 72e:	80 81       	ld	r24, Z
 730:	86 0f       	add	r24, r22
 732:	0e 94 a4 02 	call	0x548	; 0x548 <LCD_sendcmd>
}
 736:	0f 90       	pop	r0
 738:	0f 90       	pop	r0
 73a:	df 91       	pop	r29
 73c:	cf 91       	pop	r28
 73e:	08 95       	ret

00000740 <main>:

#include "APP/APP.h"

int main(void)
{
	APP_init(); /** INITIALIZATION **/
 740:	0e 94 49 00 	call	0x92	; 0x92 <APP_init>
	
	APP_readuserpin(); /** READ USER PIN **/
 744:	0e 94 94 00 	call	0x128	; 0x128 <APP_readuserpin>
	
	APP_startcardcomm();  /** START **/ 
 748:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <APP_startcardcomm>
	
	APP_getamount(); /** GET NEEDED MONEY **/
 74c:	0e 94 34 01 	call	0x268	; 0x268 <APP_getamount>
// 	while (1)
// 	{
// 		
// 	
// 	}
}
 750:	80 e0       	ldi	r24, 0x00	; 0
 752:	90 e0       	ldi	r25, 0x00	; 0
 754:	08 95       	ret

00000756 <DIO_setpindir>:
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
	
	switch(u8_a_pindir) /** SWITCH CASE ON THE DIRECTION VALUE **/
 756:	44 23       	and	r20, r20
 758:	19 f0       	breq	.+6      	; 0x760 <DIO_setpindir+0xa>
 75a:	41 30       	cpi	r20, 0x01	; 1
 75c:	e9 f1       	breq	.+122    	; 0x7d8 <DIO_setpindir+0x82>
 75e:	74 c0       	rjmp	.+232    	; 0x848 <__DATA_REGION_LENGTH__+0x48>
	{
		case DIO_PIN_INPUT:  /* INPUT CASE  */
		
		switch(u8_a_portid) /** SWITCH CASE ON THE PORT ID */
 760:	81 30       	cpi	r24, 0x01	; 1
 762:	99 f0       	breq	.+38     	; 0x78a <DIO_setpindir+0x34>
 764:	28 f0       	brcs	.+10     	; 0x770 <DIO_setpindir+0x1a>
 766:	82 30       	cpi	r24, 0x02	; 2
 768:	e9 f0       	breq	.+58     	; 0x7a4 <DIO_setpindir+0x4e>
 76a:	83 30       	cpi	r24, 0x03	; 3
 76c:	41 f1       	breq	.+80     	; 0x7be <DIO_setpindir+0x68>
 76e:	6e c0       	rjmp	.+220    	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
		{
			case DIO_PORTA:
			clear_bit(DDRA , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTA AS INPUT PIN **/
 770:	2a b3       	in	r18, 0x1a	; 26
 772:	81 e0       	ldi	r24, 0x01	; 1
 774:	90 e0       	ldi	r25, 0x00	; 0
 776:	02 c0       	rjmp	.+4      	; 0x77c <DIO_setpindir+0x26>
 778:	88 0f       	add	r24, r24
 77a:	99 1f       	adc	r25, r25
 77c:	6a 95       	dec	r22
 77e:	e2 f7       	brpl	.-8      	; 0x778 <DIO_setpindir+0x22>
 780:	80 95       	com	r24
 782:	82 23       	and	r24, r18
 784:	8a bb       	out	0x1a, r24	; 26
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
 786:	80 e0       	ldi	r24, 0x00	; 0
		
		switch(u8_a_portid) /** SWITCH CASE ON THE PORT ID */
		{
			case DIO_PORTA:
			clear_bit(DDRA , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTA AS INPUT PIN **/
			break;
 788:	08 95       	ret
			
			case DIO_PORTB:
			clear_bit(DDRB , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTB AS INPUT PIN **/
 78a:	27 b3       	in	r18, 0x17	; 23
 78c:	81 e0       	ldi	r24, 0x01	; 1
 78e:	90 e0       	ldi	r25, 0x00	; 0
 790:	02 c0       	rjmp	.+4      	; 0x796 <DIO_setpindir+0x40>
 792:	88 0f       	add	r24, r24
 794:	99 1f       	adc	r25, r25
 796:	6a 95       	dec	r22
 798:	e2 f7       	brpl	.-8      	; 0x792 <DIO_setpindir+0x3c>
 79a:	80 95       	com	r24
 79c:	82 23       	and	r24, r18
 79e:	87 bb       	out	0x17, r24	; 23
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
 7a0:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(DDRA , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTA AS INPUT PIN **/
			break;
			
			case DIO_PORTB:
			clear_bit(DDRB , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTB AS INPUT PIN **/
			break;
 7a2:	08 95       	ret
			
			case DIO_PORTC:
			clear_bit(DDRC , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTC AS INPUT PIN **/
 7a4:	24 b3       	in	r18, 0x14	; 20
 7a6:	81 e0       	ldi	r24, 0x01	; 1
 7a8:	90 e0       	ldi	r25, 0x00	; 0
 7aa:	02 c0       	rjmp	.+4      	; 0x7b0 <DIO_setpindir+0x5a>
 7ac:	88 0f       	add	r24, r24
 7ae:	99 1f       	adc	r25, r25
 7b0:	6a 95       	dec	r22
 7b2:	e2 f7       	brpl	.-8      	; 0x7ac <DIO_setpindir+0x56>
 7b4:	80 95       	com	r24
 7b6:	82 23       	and	r24, r18
 7b8:	84 bb       	out	0x14, r24	; 20
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
 7ba:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(DDRB , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTB AS INPUT PIN **/
			break;
			
			case DIO_PORTC:
			clear_bit(DDRC , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTC AS INPUT PIN **/
			break;
 7bc:	08 95       	ret
			
			case DIO_PORTD:
			clear_bit(DDRD , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTD AS INPUT PIN **/
 7be:	21 b3       	in	r18, 0x11	; 17
 7c0:	81 e0       	ldi	r24, 0x01	; 1
 7c2:	90 e0       	ldi	r25, 0x00	; 0
 7c4:	02 c0       	rjmp	.+4      	; 0x7ca <DIO_setpindir+0x74>
 7c6:	88 0f       	add	r24, r24
 7c8:	99 1f       	adc	r25, r25
 7ca:	6a 95       	dec	r22
 7cc:	e2 f7       	brpl	.-8      	; 0x7c6 <DIO_setpindir+0x70>
 7ce:	80 95       	com	r24
 7d0:	82 23       	and	r24, r18
 7d2:	81 bb       	out	0x11, r24	; 17
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
 7d4:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(DDRC , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTC AS INPUT PIN **/
			break;
			
			case DIO_PORTD:
			clear_bit(DDRD , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTD AS INPUT PIN **/
			break;
 7d6:	08 95       	ret
		} 
		break;
		
		case DIO_PIN_OUTPUT:  /* OUTPUT CASE  */
		
		switch(u8_a_portid) /** SWITCH CASE ON THE PORT ID */
 7d8:	81 30       	cpi	r24, 0x01	; 1
 7da:	91 f0       	breq	.+36     	; 0x800 <__DATA_REGION_LENGTH__>
 7dc:	28 f0       	brcs	.+10     	; 0x7e8 <DIO_setpindir+0x92>
 7de:	82 30       	cpi	r24, 0x02	; 2
 7e0:	d9 f0       	breq	.+54     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 7e2:	83 30       	cpi	r24, 0x03	; 3
 7e4:	29 f1       	breq	.+74     	; 0x830 <__DATA_REGION_LENGTH__+0x30>
 7e6:	34 c0       	rjmp	.+104    	; 0x850 <__DATA_REGION_LENGTH__+0x50>
		{
			case DIO_PORTA:
			set_bit(DDRA , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
 7e8:	2a b3       	in	r18, 0x1a	; 26
 7ea:	81 e0       	ldi	r24, 0x01	; 1
 7ec:	90 e0       	ldi	r25, 0x00	; 0
 7ee:	02 c0       	rjmp	.+4      	; 0x7f4 <DIO_setpindir+0x9e>
 7f0:	88 0f       	add	r24, r24
 7f2:	99 1f       	adc	r25, r25
 7f4:	6a 95       	dec	r22
 7f6:	e2 f7       	brpl	.-8      	; 0x7f0 <DIO_setpindir+0x9a>
 7f8:	82 2b       	or	r24, r18
 7fa:	8a bb       	out	0x1a, r24	; 26
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
 7fc:	80 e0       	ldi	r24, 0x00	; 0
		
		switch(u8_a_portid) /** SWITCH CASE ON THE PORT ID */
		{
			case DIO_PORTA:
			set_bit(DDRA , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
 7fe:	08 95       	ret
			
			case DIO_PORTB:
			set_bit(DDRB , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
 800:	27 b3       	in	r18, 0x17	; 23
 802:	81 e0       	ldi	r24, 0x01	; 1
 804:	90 e0       	ldi	r25, 0x00	; 0
 806:	02 c0       	rjmp	.+4      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 808:	88 0f       	add	r24, r24
 80a:	99 1f       	adc	r25, r25
 80c:	6a 95       	dec	r22
 80e:	e2 f7       	brpl	.-8      	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 810:	82 2b       	or	r24, r18
 812:	87 bb       	out	0x17, r24	; 23
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
 814:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(DDRA , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
			
			case DIO_PORTB:
			set_bit(DDRB , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
 816:	08 95       	ret
			
			case DIO_PORTC:
			set_bit(DDRC , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
 818:	24 b3       	in	r18, 0x14	; 20
 81a:	81 e0       	ldi	r24, 0x01	; 1
 81c:	90 e0       	ldi	r25, 0x00	; 0
 81e:	02 c0       	rjmp	.+4      	; 0x824 <__DATA_REGION_LENGTH__+0x24>
 820:	88 0f       	add	r24, r24
 822:	99 1f       	adc	r25, r25
 824:	6a 95       	dec	r22
 826:	e2 f7       	brpl	.-8      	; 0x820 <__DATA_REGION_LENGTH__+0x20>
 828:	82 2b       	or	r24, r18
 82a:	84 bb       	out	0x14, r24	; 20
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
 82c:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(DDRB , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
			
			case DIO_PORTC:
			set_bit(DDRC , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
 82e:	08 95       	ret
			
			case DIO_PORTD:
			set_bit(DDRD , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
 830:	21 b3       	in	r18, 0x11	; 17
 832:	81 e0       	ldi	r24, 0x01	; 1
 834:	90 e0       	ldi	r25, 0x00	; 0
 836:	02 c0       	rjmp	.+4      	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
 838:	88 0f       	add	r24, r24
 83a:	99 1f       	adc	r25, r25
 83c:	6a 95       	dec	r22
 83e:	e2 f7       	brpl	.-8      	; 0x838 <__DATA_REGION_LENGTH__+0x38>
 840:	82 2b       	or	r24, r18
 842:	81 bb       	out	0x11, r24	; 17
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
 844:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(DDRC , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
			
			case DIO_PORTD:
			set_bit(DDRD , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
 846:	08 95       	ret
		} 
		break;
		 
		 
		default:  /** DIRECTION ISN'T INPUT OR OUTPUT */
		en_a_dirstate = NOT_VALID_DIRECTION ; /** RETURN AS DIR NOT VALID ERRORS **/
 848:	81 e0       	ldi	r24, 0x01	; 1
 84a:	08 95       	ret
			case DIO_PORTD:
			clear_bit(DDRD , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTD AS INPUT PIN **/
			break;
			
			default: /** DO NOTHING **/
			en_a_dirstate = NOT_VALID_DIRECTION ; /** RETURN AS DIR NOT VALID ERRORS **/
 84c:	81 e0       	ldi	r24, 0x01	; 1
 84e:	08 95       	ret
			case DIO_PORTD:
			set_bit(DDRD , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
			
			default:  /** DO NOTHING **/
			en_a_dirstate = NOT_VALID_DIRECTION ; /** RETURN AS DIR NOT VALID ERRORS **/
 850:	81 e0       	ldi	r24, 0x01	; 1
		en_a_dirstate = NOT_VALID_DIRECTION ; /** RETURN AS DIR NOT VALID ERRORS **/
		break ; 
	} 
	
	return en_a_dirstate ; /** RETURN THE STATE OF FUNCTION **/
}
 852:	08 95       	ret

00000854 <DIO_setpinvalue>:
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
	
	switch(u8_a_pinval)
 854:	44 23       	and	r20, r20
 856:	19 f0       	breq	.+6      	; 0x85e <DIO_setpinvalue+0xa>
 858:	41 30       	cpi	r20, 0x01	; 1
 85a:	e9 f1       	breq	.+122    	; 0x8d6 <__stack+0x77>
 85c:	74 c0       	rjmp	.+232    	; 0x946 <__stack+0xe7>
	{
		case DIO_PIN_LOW:  /** IN CASE PIN VALUE IS LOW */
		
		switch(u8_a_portid)  /** SWITCH CASE ON THE PORT ID */ 
 85e:	81 30       	cpi	r24, 0x01	; 1
 860:	99 f0       	breq	.+38     	; 0x888 <__stack+0x29>
 862:	28 f0       	brcs	.+10     	; 0x86e <__stack+0xf>
 864:	82 30       	cpi	r24, 0x02	; 2
 866:	e9 f0       	breq	.+58     	; 0x8a2 <__stack+0x43>
 868:	83 30       	cpi	r24, 0x03	; 3
 86a:	41 f1       	breq	.+80     	; 0x8bc <__stack+0x5d>
 86c:	6e c0       	rjmp	.+220    	; 0x94a <__stack+0xeb>
		{
			case DIO_PORTA:
			clear_bit(PORTA , u8_a_pinid);       /** SET THIS PIN AS LOW **/
 86e:	2b b3       	in	r18, 0x1b	; 27
 870:	81 e0       	ldi	r24, 0x01	; 1
 872:	90 e0       	ldi	r25, 0x00	; 0
 874:	02 c0       	rjmp	.+4      	; 0x87a <__stack+0x1b>
 876:	88 0f       	add	r24, r24
 878:	99 1f       	adc	r25, r25
 87a:	6a 95       	dec	r22
 87c:	e2 f7       	brpl	.-8      	; 0x876 <__stack+0x17>
 87e:	80 95       	com	r24
 880:	82 23       	and	r24, r18
 882:	8b bb       	out	0x1b, r24	; 27
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
 884:	80 e0       	ldi	r24, 0x00	; 0
		
		switch(u8_a_portid)  /** SWITCH CASE ON THE PORT ID */ 
		{
			case DIO_PORTA:
			clear_bit(PORTA , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
 886:	08 95       	ret
			
			case DIO_PORTB:
			clear_bit(PORTB , u8_a_pinid);       /** SET THIS PIN AS LOW **/
 888:	28 b3       	in	r18, 0x18	; 24
 88a:	81 e0       	ldi	r24, 0x01	; 1
 88c:	90 e0       	ldi	r25, 0x00	; 0
 88e:	02 c0       	rjmp	.+4      	; 0x894 <__stack+0x35>
 890:	88 0f       	add	r24, r24
 892:	99 1f       	adc	r25, r25
 894:	6a 95       	dec	r22
 896:	e2 f7       	brpl	.-8      	; 0x890 <__stack+0x31>
 898:	80 95       	com	r24
 89a:	82 23       	and	r24, r18
 89c:	88 bb       	out	0x18, r24	; 24
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
 89e:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(PORTA , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
			
			case DIO_PORTB:
			clear_bit(PORTB , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
 8a0:	08 95       	ret
			
			case DIO_PORTC:
			clear_bit(PORTC , u8_a_pinid);       /** SET THIS PIN AS LOW **/
 8a2:	25 b3       	in	r18, 0x15	; 21
 8a4:	81 e0       	ldi	r24, 0x01	; 1
 8a6:	90 e0       	ldi	r25, 0x00	; 0
 8a8:	02 c0       	rjmp	.+4      	; 0x8ae <__stack+0x4f>
 8aa:	88 0f       	add	r24, r24
 8ac:	99 1f       	adc	r25, r25
 8ae:	6a 95       	dec	r22
 8b0:	e2 f7       	brpl	.-8      	; 0x8aa <__stack+0x4b>
 8b2:	80 95       	com	r24
 8b4:	82 23       	and	r24, r18
 8b6:	85 bb       	out	0x15, r24	; 21
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
 8b8:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(PORTB , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
			
			case DIO_PORTC:
			clear_bit(PORTC , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
 8ba:	08 95       	ret
			
			case DIO_PORTD:
			clear_bit(PORTD , u8_a_pinid);       /** SET THIS PIN AS LOW **/
 8bc:	22 b3       	in	r18, 0x12	; 18
 8be:	81 e0       	ldi	r24, 0x01	; 1
 8c0:	90 e0       	ldi	r25, 0x00	; 0
 8c2:	02 c0       	rjmp	.+4      	; 0x8c8 <__stack+0x69>
 8c4:	88 0f       	add	r24, r24
 8c6:	99 1f       	adc	r25, r25
 8c8:	6a 95       	dec	r22
 8ca:	e2 f7       	brpl	.-8      	; 0x8c4 <__stack+0x65>
 8cc:	80 95       	com	r24
 8ce:	82 23       	and	r24, r18
 8d0:	82 bb       	out	0x12, r24	; 18
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
 8d2:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(PORTC , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
			
			case DIO_PORTD:
			clear_bit(PORTD , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
 8d4:	08 95       	ret
		} 
		break;
		
		case DIO_PIN_HIGH:
		
		switch(u8_a_portid)
 8d6:	81 30       	cpi	r24, 0x01	; 1
 8d8:	91 f0       	breq	.+36     	; 0x8fe <__stack+0x9f>
 8da:	28 f0       	brcs	.+10     	; 0x8e6 <__stack+0x87>
 8dc:	82 30       	cpi	r24, 0x02	; 2
 8de:	d9 f0       	breq	.+54     	; 0x916 <__stack+0xb7>
 8e0:	83 30       	cpi	r24, 0x03	; 3
 8e2:	29 f1       	breq	.+74     	; 0x92e <__stack+0xcf>
 8e4:	34 c0       	rjmp	.+104    	; 0x94e <__stack+0xef>
		{
			case DIO_PORTA:
			set_bit(PORTA , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
 8e6:	2b b3       	in	r18, 0x1b	; 27
 8e8:	81 e0       	ldi	r24, 0x01	; 1
 8ea:	90 e0       	ldi	r25, 0x00	; 0
 8ec:	02 c0       	rjmp	.+4      	; 0x8f2 <__stack+0x93>
 8ee:	88 0f       	add	r24, r24
 8f0:	99 1f       	adc	r25, r25
 8f2:	6a 95       	dec	r22
 8f4:	e2 f7       	brpl	.-8      	; 0x8ee <__stack+0x8f>
 8f6:	82 2b       	or	r24, r18
 8f8:	8b bb       	out	0x1b, r24	; 27
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
 8fa:	80 e0       	ldi	r24, 0x00	; 0
		
		switch(u8_a_portid)
		{
			case DIO_PORTA:
			set_bit(PORTA , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
 8fc:	08 95       	ret
			
			case DIO_PORTB:
			set_bit(PORTB , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
 8fe:	28 b3       	in	r18, 0x18	; 24
 900:	81 e0       	ldi	r24, 0x01	; 1
 902:	90 e0       	ldi	r25, 0x00	; 0
 904:	02 c0       	rjmp	.+4      	; 0x90a <__stack+0xab>
 906:	88 0f       	add	r24, r24
 908:	99 1f       	adc	r25, r25
 90a:	6a 95       	dec	r22
 90c:	e2 f7       	brpl	.-8      	; 0x906 <__stack+0xa7>
 90e:	82 2b       	or	r24, r18
 910:	88 bb       	out	0x18, r24	; 24
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
 912:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(PORTA , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
			
			case DIO_PORTB:
			set_bit(PORTB , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
 914:	08 95       	ret
			
			case DIO_PORTC:
			set_bit(PORTC , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
 916:	25 b3       	in	r18, 0x15	; 21
 918:	81 e0       	ldi	r24, 0x01	; 1
 91a:	90 e0       	ldi	r25, 0x00	; 0
 91c:	02 c0       	rjmp	.+4      	; 0x922 <__stack+0xc3>
 91e:	88 0f       	add	r24, r24
 920:	99 1f       	adc	r25, r25
 922:	6a 95       	dec	r22
 924:	e2 f7       	brpl	.-8      	; 0x91e <__stack+0xbf>
 926:	82 2b       	or	r24, r18
 928:	85 bb       	out	0x15, r24	; 21
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
 92a:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(PORTB , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
			
			case DIO_PORTC:
			set_bit(PORTC , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
 92c:	08 95       	ret
			
			case DIO_PORTD:
			set_bit(PORTD , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
 92e:	22 b3       	in	r18, 0x12	; 18
 930:	81 e0       	ldi	r24, 0x01	; 1
 932:	90 e0       	ldi	r25, 0x00	; 0
 934:	02 c0       	rjmp	.+4      	; 0x93a <__stack+0xdb>
 936:	88 0f       	add	r24, r24
 938:	99 1f       	adc	r25, r25
 93a:	6a 95       	dec	r22
 93c:	e2 f7       	brpl	.-8      	; 0x936 <__stack+0xd7>
 93e:	82 2b       	or	r24, r18
 940:	82 bb       	out	0x12, r24	; 18
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
 942:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(PORTC , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
			
			case DIO_PORTD:
			set_bit(PORTD , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
 944:	08 95       	ret
			break;
		} 
		break;
		
		default :
		en_a_valstate = NOT_VALID_VALUE ;  /** RETURN VALUE AS NOT VALID **/
 946:	81 e0       	ldi	r24, 0x01	; 1
 948:	08 95       	ret
			case DIO_PORTD:
			clear_bit(PORTD , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
			
			default:
			en_a_valstate = NOT_VALID_VALUE ;  /** RETURN VALUE AS NOT VALID **/
 94a:	81 e0       	ldi	r24, 0x01	; 1
 94c:	08 95       	ret
			case DIO_PORTD:
			set_bit(PORTD , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
			
			default:
			en_a_valstate = NOT_VALID_VALUE ;  /** RETURN VALUE AS NOT VALID **/
 94e:	81 e0       	ldi	r24, 0x01	; 1
		en_a_valstate = NOT_VALID_VALUE ;  /** RETURN VALUE AS NOT VALID **/
		break ;
	} 
	
	return en_a_valstate ; /** RETURN THE FINAL STATE OF THE FUNCTION */
}
 950:	08 95       	ret

00000952 <DIO_readpin>:
/******************************************************************/
PinRead_t DIO_readpin(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t* u8_a_val)
{
	PinRead_t en_a_Pinstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
	
	switch(u8_a_portid)  /** SWITCH CASE ON PORT ID **/
 952:	81 30       	cpi	r24, 0x01	; 1
 954:	99 f0       	breq	.+38     	; 0x97c <DIO_readpin+0x2a>
 956:	28 f0       	brcs	.+10     	; 0x962 <DIO_readpin+0x10>
 958:	82 30       	cpi	r24, 0x02	; 2
 95a:	e9 f0       	breq	.+58     	; 0x996 <DIO_readpin+0x44>
 95c:	83 30       	cpi	r24, 0x03	; 3
 95e:	41 f1       	breq	.+80     	; 0x9b0 <DIO_readpin+0x5e>
 960:	34 c0       	rjmp	.+104    	; 0x9ca <DIO_readpin+0x78>
	{
		case DIO_PORTA:               /** PORTA  **/
		*u8_a_val = get_bit(PINA , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
 962:	89 b3       	in	r24, 0x19	; 25
 964:	90 e0       	ldi	r25, 0x00	; 0
 966:	02 c0       	rjmp	.+4      	; 0x96c <DIO_readpin+0x1a>
 968:	95 95       	asr	r25
 96a:	87 95       	ror	r24
 96c:	6a 95       	dec	r22
 96e:	e2 f7       	brpl	.-8      	; 0x968 <DIO_readpin+0x16>
 970:	81 70       	andi	r24, 0x01	; 1
 972:	89 bb       	out	0x19, r24	; 25
 974:	fa 01       	movw	r30, r20
 976:	80 83       	st	Z, r24
/* INPUT   : u8_a_portid , PINID , POINTER TO SET THE VALUE IN IT      */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_readpin(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t* u8_a_val)
{
	PinRead_t en_a_Pinstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
 978:	80 e0       	ldi	r24, 0x00	; 0
	
	switch(u8_a_portid)  /** SWITCH CASE ON PORT ID **/
	{
		case DIO_PORTA:               /** PORTA  **/
		*u8_a_val = get_bit(PINA , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
 97a:	08 95       	ret
		
		case DIO_PORTB:               /** PORTB  **/
		*u8_a_val = get_bit(PINB , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
 97c:	86 b3       	in	r24, 0x16	; 22
 97e:	90 e0       	ldi	r25, 0x00	; 0
 980:	02 c0       	rjmp	.+4      	; 0x986 <DIO_readpin+0x34>
 982:	95 95       	asr	r25
 984:	87 95       	ror	r24
 986:	6a 95       	dec	r22
 988:	e2 f7       	brpl	.-8      	; 0x982 <DIO_readpin+0x30>
 98a:	81 70       	andi	r24, 0x01	; 1
 98c:	86 bb       	out	0x16, r24	; 22
 98e:	fa 01       	movw	r30, r20
 990:	80 83       	st	Z, r24
/* INPUT   : u8_a_portid , PINID , POINTER TO SET THE VALUE IN IT      */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_readpin(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t* u8_a_val)
{
	PinRead_t en_a_Pinstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
 992:	80 e0       	ldi	r24, 0x00	; 0
		*u8_a_val = get_bit(PINA , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
		
		case DIO_PORTB:               /** PORTB  **/
		*u8_a_val = get_bit(PINB , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
 994:	08 95       	ret
		
		case DIO_PORTC:               /** PORTC  **/
		*u8_a_val = get_bit(PINC , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
 996:	83 b3       	in	r24, 0x13	; 19
 998:	90 e0       	ldi	r25, 0x00	; 0
 99a:	02 c0       	rjmp	.+4      	; 0x9a0 <DIO_readpin+0x4e>
 99c:	95 95       	asr	r25
 99e:	87 95       	ror	r24
 9a0:	6a 95       	dec	r22
 9a2:	e2 f7       	brpl	.-8      	; 0x99c <DIO_readpin+0x4a>
 9a4:	81 70       	andi	r24, 0x01	; 1
 9a6:	83 bb       	out	0x13, r24	; 19
 9a8:	fa 01       	movw	r30, r20
 9aa:	80 83       	st	Z, r24
/* INPUT   : u8_a_portid , PINID , POINTER TO SET THE VALUE IN IT      */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_readpin(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t* u8_a_val)
{
	PinRead_t en_a_Pinstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
 9ac:	80 e0       	ldi	r24, 0x00	; 0
		*u8_a_val = get_bit(PINB , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
		
		case DIO_PORTC:               /** PORTC  **/
		*u8_a_val = get_bit(PINC , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
 9ae:	08 95       	ret
		
		case DIO_PORTD:               /** PORTD  **/
		*u8_a_val = get_bit(PIND , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
 9b0:	80 b3       	in	r24, 0x10	; 16
 9b2:	90 e0       	ldi	r25, 0x00	; 0
 9b4:	02 c0       	rjmp	.+4      	; 0x9ba <DIO_readpin+0x68>
 9b6:	95 95       	asr	r25
 9b8:	87 95       	ror	r24
 9ba:	6a 95       	dec	r22
 9bc:	e2 f7       	brpl	.-8      	; 0x9b6 <DIO_readpin+0x64>
 9be:	81 70       	andi	r24, 0x01	; 1
 9c0:	80 bb       	out	0x10, r24	; 16
 9c2:	fa 01       	movw	r30, r20
 9c4:	80 83       	st	Z, r24
/* INPUT   : u8_a_portid , PINID , POINTER TO SET THE VALUE IN IT      */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_readpin(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t* u8_a_val)
{
	PinRead_t en_a_Pinstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
 9c6:	80 e0       	ldi	r24, 0x00	; 0
		*u8_a_val = get_bit(PINC , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
		
		case DIO_PORTD:               /** PORTD  **/
		*u8_a_val = get_bit(PIND , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
 9c8:	08 95       	ret
		
		default:
		en_a_Pinstate = NOT_VALID_READ ;  /** READ IS NOT VALID  **/
 9ca:	81 e0       	ldi	r24, 0x01	; 1
		break;
	} 
	
	return en_a_Pinstate ; /** RETURN THE FINAL STATE OF THE FUNCTION **/	
}
 9cc:	08 95       	ret

000009ce <DIO_togglepin>:
/******************************************************************/
PinRead_t DIO_togglepin(uint8_t u8_a_portid , uint8_t u8_a_pinid )
{
	PinRead_t en_a_Pinreadstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
	
	switch(u8_a_portid) /** SWITCH ON THE PORT ID **/
 9ce:	81 30       	cpi	r24, 0x01	; 1
 9d0:	91 f0       	breq	.+36     	; 0x9f6 <DIO_togglepin+0x28>
 9d2:	28 f0       	brcs	.+10     	; 0x9de <DIO_togglepin+0x10>
 9d4:	82 30       	cpi	r24, 0x02	; 2
 9d6:	d9 f0       	breq	.+54     	; 0xa0e <DIO_togglepin+0x40>
 9d8:	83 30       	cpi	r24, 0x03	; 3
 9da:	29 f1       	breq	.+74     	; 0xa26 <DIO_togglepin+0x58>
 9dc:	30 c0       	rjmp	.+96     	; 0xa3e <DIO_togglepin+0x70>
	{
		case DIO_PORTA:
		toggle_bit(PORTA , u8_a_pinid);
 9de:	2b b3       	in	r18, 0x1b	; 27
 9e0:	81 e0       	ldi	r24, 0x01	; 1
 9e2:	90 e0       	ldi	r25, 0x00	; 0
 9e4:	02 c0       	rjmp	.+4      	; 0x9ea <DIO_togglepin+0x1c>
 9e6:	88 0f       	add	r24, r24
 9e8:	99 1f       	adc	r25, r25
 9ea:	6a 95       	dec	r22
 9ec:	e2 f7       	brpl	.-8      	; 0x9e6 <DIO_togglepin+0x18>
 9ee:	82 27       	eor	r24, r18
 9f0:	8b bb       	out	0x1b, r24	; 27
/* INPUT   : u8_a_portid , PINID                                  */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_togglepin(uint8_t u8_a_portid , uint8_t u8_a_pinid )
{
	PinRead_t en_a_Pinreadstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
 9f2:	80 e0       	ldi	r24, 0x00	; 0
	
	switch(u8_a_portid) /** SWITCH ON THE PORT ID **/
	{
		case DIO_PORTA:
		toggle_bit(PORTA , u8_a_pinid);
		break;
 9f4:	08 95       	ret
		
		case DIO_PORTB:
		toggle_bit(PORTB , u8_a_pinid);
 9f6:	28 b3       	in	r18, 0x18	; 24
 9f8:	81 e0       	ldi	r24, 0x01	; 1
 9fa:	90 e0       	ldi	r25, 0x00	; 0
 9fc:	02 c0       	rjmp	.+4      	; 0xa02 <DIO_togglepin+0x34>
 9fe:	88 0f       	add	r24, r24
 a00:	99 1f       	adc	r25, r25
 a02:	6a 95       	dec	r22
 a04:	e2 f7       	brpl	.-8      	; 0x9fe <DIO_togglepin+0x30>
 a06:	82 27       	eor	r24, r18
 a08:	88 bb       	out	0x18, r24	; 24
/* INPUT   : u8_a_portid , PINID                                  */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_togglepin(uint8_t u8_a_portid , uint8_t u8_a_pinid )
{
	PinRead_t en_a_Pinreadstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
 a0a:	80 e0       	ldi	r24, 0x00	; 0
		toggle_bit(PORTA , u8_a_pinid);
		break;
		
		case DIO_PORTB:
		toggle_bit(PORTB , u8_a_pinid);
		break;
 a0c:	08 95       	ret
		
		case DIO_PORTC:
		toggle_bit(PORTC , u8_a_pinid);
 a0e:	25 b3       	in	r18, 0x15	; 21
 a10:	81 e0       	ldi	r24, 0x01	; 1
 a12:	90 e0       	ldi	r25, 0x00	; 0
 a14:	02 c0       	rjmp	.+4      	; 0xa1a <DIO_togglepin+0x4c>
 a16:	88 0f       	add	r24, r24
 a18:	99 1f       	adc	r25, r25
 a1a:	6a 95       	dec	r22
 a1c:	e2 f7       	brpl	.-8      	; 0xa16 <DIO_togglepin+0x48>
 a1e:	82 27       	eor	r24, r18
 a20:	85 bb       	out	0x15, r24	; 21
/* INPUT   : u8_a_portid , PINID                                  */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_togglepin(uint8_t u8_a_portid , uint8_t u8_a_pinid )
{
	PinRead_t en_a_Pinreadstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
 a22:	80 e0       	ldi	r24, 0x00	; 0
		toggle_bit(PORTB , u8_a_pinid);
		break;
		
		case DIO_PORTC:
		toggle_bit(PORTC , u8_a_pinid);
		break;
 a24:	08 95       	ret
		
		case DIO_PORTD:
		toggle_bit(PORTD , u8_a_pinid);
 a26:	22 b3       	in	r18, 0x12	; 18
 a28:	81 e0       	ldi	r24, 0x01	; 1
 a2a:	90 e0       	ldi	r25, 0x00	; 0
 a2c:	02 c0       	rjmp	.+4      	; 0xa32 <DIO_togglepin+0x64>
 a2e:	88 0f       	add	r24, r24
 a30:	99 1f       	adc	r25, r25
 a32:	6a 95       	dec	r22
 a34:	e2 f7       	brpl	.-8      	; 0xa2e <DIO_togglepin+0x60>
 a36:	82 27       	eor	r24, r18
 a38:	82 bb       	out	0x12, r24	; 18
/* INPUT   : u8_a_portid , PINID                                  */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_togglepin(uint8_t u8_a_portid , uint8_t u8_a_pinid )
{
	PinRead_t en_a_Pinreadstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
 a3a:	80 e0       	ldi	r24, 0x00	; 0
		toggle_bit(PORTC , u8_a_pinid);
		break;
		
		case DIO_PORTD:
		toggle_bit(PORTD , u8_a_pinid);
		break;
 a3c:	08 95       	ret
		
		default:
		/** DO NOTHING **/
		en_a_Pinreadstate = NOT_VALID_READ ; /** RETURN AN ERROR **/
 a3e:	81 e0       	ldi	r24, 0x01	; 1
		break;
	} 
	
	return en_a_Pinreadstate ; /** RETURN THE FINAL STATE OF THE FUNCTION **/
}
 a40:	08 95       	ret

00000a42 <SPI_initslave>:
	{
		SPI_sendbyte(u8_a_str[u8_L_counter]); /** SEND CHARACTER **/
		
		u8_L_counter++; /* MOVE TO THE SECOND LETTER */
	}
}
 a42:	40 e0       	ldi	r20, 0x00	; 0
 a44:	64 e0       	ldi	r22, 0x04	; 4
 a46:	81 e0       	ldi	r24, 0x01	; 1
 a48:	0e 94 ab 03 	call	0x756	; 0x756 <DIO_setpindir>
 a4c:	40 e0       	ldi	r20, 0x00	; 0
 a4e:	65 e0       	ldi	r22, 0x05	; 5
 a50:	81 e0       	ldi	r24, 0x01	; 1
 a52:	0e 94 ab 03 	call	0x756	; 0x756 <DIO_setpindir>
 a56:	41 e0       	ldi	r20, 0x01	; 1
 a58:	66 e0       	ldi	r22, 0x06	; 6
 a5a:	81 e0       	ldi	r24, 0x01	; 1
 a5c:	0e 94 ab 03 	call	0x756	; 0x756 <DIO_setpindir>
 a60:	40 e0       	ldi	r20, 0x00	; 0
 a62:	67 e0       	ldi	r22, 0x07	; 7
 a64:	81 e0       	ldi	r24, 0x01	; 1
 a66:	0e 94 ab 03 	call	0x756	; 0x756 <DIO_setpindir>
 a6a:	8d b1       	in	r24, 0x0d	; 13
 a6c:	80 64       	ori	r24, 0x40	; 64
 a6e:	8d b9       	out	0x0d, r24	; 13
 a70:	8d b1       	in	r24, 0x0d	; 13
 a72:	8f 7e       	andi	r24, 0xEF	; 239
 a74:	8d b9       	out	0x0d, r24	; 13
 a76:	8d b1       	in	r24, 0x0d	; 13
 a78:	87 7f       	andi	r24, 0xF7	; 247
 a7a:	8d b9       	out	0x0d, r24	; 13
 a7c:	8d b1       	in	r24, 0x0d	; 13
 a7e:	8b 7f       	andi	r24, 0xFB	; 251
 a80:	8d b9       	out	0x0d, r24	; 13
 a82:	08 95       	ret

00000a84 <SPI_receivebyte>:
 a84:	77 9b       	sbis	0x0e, 7	; 14
 a86:	fe cf       	rjmp	.-4      	; 0xa84 <SPI_receivebyte>
 a88:	2f b1       	in	r18, 0x0f	; 15
 a8a:	fc 01       	movw	r30, r24
 a8c:	20 83       	st	Z, r18
 a8e:	08 95       	ret

00000a90 <SPI_receivestring>:
/** FUNCTION FOR MASTER TO SEND STRING                          **/
/** ARGUMENTS  : u8_a_str (string)                              **/
/** RETURNS    : en_a_spierrstatus                              **/
/*****************************************************************/
en_a_spierrstatus SPI_receivestring(uint8_t * u8_a_str)
{
 a90:	0f 93       	push	r16
 a92:	1f 93       	push	r17
 a94:	cf 93       	push	r28
 a96:	8c 01       	movw	r16, r24
	uint8_t u8_L_counter = 0 ; /** COUNTER FOR STRING LETTERS **/
 a98:	c0 e0       	ldi	r28, 0x00	; 0
	
	//str[counter] = SPI_RECEIVE_BYTE();
	
	while (u8_a_str[u8_L_counter] != '\0')
 a9a:	03 c0       	rjmp	.+6      	; 0xaa2 <SPI_receivestring+0x12>
	{
		SPI_receivebyte(&u8_a_str[u8_L_counter]); /** RECEIVE CHARACTER **/
 a9c:	0e 94 42 05 	call	0xa84	; 0xa84 <SPI_receivebyte>
		
		u8_L_counter++ ; /* MOVE TO THE SECOND LETTER */
 aa0:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t u8_L_counter = 0 ; /** COUNTER FOR STRING LETTERS **/
	
	//str[counter] = SPI_RECEIVE_BYTE();
	
	while (u8_a_str[u8_L_counter] != '\0')
 aa2:	c8 01       	movw	r24, r16
 aa4:	8c 0f       	add	r24, r28
 aa6:	91 1d       	adc	r25, r1
 aa8:	fc 01       	movw	r30, r24
 aaa:	20 81       	ld	r18, Z
 aac:	21 11       	cpse	r18, r1
 aae:	f6 cf       	rjmp	.-20     	; 0xa9c <SPI_receivestring+0xc>
		
		u8_L_counter++ ; /* MOVE TO THE SECOND LETTER */
	}
	
	
	u8_a_str[u8_L_counter] = '\0' ; /* TERMINATOR OF STRING */
 ab0:	10 82       	st	Z, r1
}
 ab2:	cf 91       	pop	r28
 ab4:	1f 91       	pop	r17
 ab6:	0f 91       	pop	r16
 ab8:	08 95       	ret

00000aba <TMR0_init>:
	 /* TIMER MODE OF TMR0 */
	#elif TIMER0_CLK_SRC == INTERNAL_CLK_SRC
	
	 #if TIMER0_MODE == TMR0_NORMAL_MODE
	 
	 clear_bit(TCCR0 , 7);
 aba:	83 b7       	in	r24, 0x33	; 51
 abc:	8f 77       	andi	r24, 0x7F	; 127
 abe:	83 bf       	out	0x33, r24	; 51
	 clear_bit(TCCR0 , 6);
 ac0:	83 b7       	in	r24, 0x33	; 51
 ac2:	8f 7b       	andi	r24, 0xBF	; 191
 ac4:	83 bf       	out	0x33, r24	; 51
	 clear_bit(TCCR0 , 3);
 ac6:	83 b7       	in	r24, 0x33	; 51
 ac8:	87 7f       	andi	r24, 0xF7	; 247
 aca:	83 bf       	out	0x33, r24	; 51
	 clear_bit(TCCR0 , 4);
 acc:	83 b7       	in	r24, 0x33	; 51
 ace:	8f 7e       	andi	r24, 0xEF	; 239
 ad0:	83 bf       	out	0x33, r24	; 51
	 clear_bit(TCCR0 , 5);
 ad2:	83 b7       	in	r24, 0x33	; 51
 ad4:	8f 7d       	andi	r24, 0xDF	; 223
 ad6:	83 bf       	out	0x33, r24	; 51
	  #endif
	 #endif
	#endif
	
	return en_a_initstatus ; /** RETURN THE STATUS OF INITIALIZATION **/
}
 ad8:	80 e0       	ldi	r24, 0x00	; 0
 ada:	08 95       	ret

00000adc <TMR0_start>:
{
	TMR0_start_error en_a_startstatus = VALID_START ; /** VARIABLE TO RETURN THE STATUS OF START **/
	
	#if TIMER0_PRESCALER_VAL == PRESCALER_1024
	
	set_bit(TCCR0 , 0);
 adc:	83 b7       	in	r24, 0x33	; 51
 ade:	81 60       	ori	r24, 0x01	; 1
 ae0:	83 bf       	out	0x33, r24	; 51
	clear_bit(TCCR0 , 1);
 ae2:	83 b7       	in	r24, 0x33	; 51
 ae4:	8d 7f       	andi	r24, 0xFD	; 253
 ae6:	83 bf       	out	0x33, r24	; 51
	set_bit(TCCR0 , 2);
 ae8:	83 b7       	in	r24, 0x33	; 51
 aea:	84 60       	ori	r24, 0x04	; 4
 aec:	83 bf       	out	0x33, r24	; 51
	en_a_startstatus = VALID_START ; /** START DONE PROBERLY **/
	
	#endif
	
	return en_a_startstatus ; /** RETURN THE STATUS **/
}
 aee:	80 e0       	ldi	r24, 0x00	; 0
 af0:	08 95       	ret

00000af2 <TMR0_stop>:
TMR0_stop_error TMR0_stop(void)
{
	TMR0_stop_error en_a_stopStatus = VALID_STOP ; /** VARIABLE TO RETURN THE STATUS **/
	
	/** SET CONFIGURATIONS AS NO CLOCK SOURCE **/
	clear_bit(TCCR0 , 0);
 af2:	83 b7       	in	r24, 0x33	; 51
 af4:	8e 7f       	andi	r24, 0xFE	; 254
 af6:	83 bf       	out	0x33, r24	; 51
	clear_bit(TCCR0 , 1);
 af8:	83 b7       	in	r24, 0x33	; 51
 afa:	8d 7f       	andi	r24, 0xFD	; 253
 afc:	83 bf       	out	0x33, r24	; 51
	clear_bit(TCCR0 , 2);
 afe:	83 b7       	in	r24, 0x33	; 51
 b00:	8b 7f       	andi	r24, 0xFB	; 251
 b02:	83 bf       	out	0x33, r24	; 51
	
	en_a_stopStatus = VALID_STOP ; /** STOP DONE PROPERLY **/
	
	return en_a_stopStatus ; /** RETURN THE STATUS **/
	
}
 b04:	80 e0       	ldi	r24, 0x00	; 0
 b06:	08 95       	ret

00000b08 <TMR0_delayms>:
	/******************************************************************************************/
	/**               THIS CALCULATIONS CONFIGURED AS F_CPU   16 MHZ                         **/
	/******************************************************************************************/
	#if TIMER0_PRESCALER_VAL == PRESCALER_1024  /** CHECK THE PRESCALLER FROM CONFIG FILE **/
	 
        u32_gs_tmr0nuofovs = (u32_a_delayms / 16.384);   /** CALCULATING NUMBER OF OVERFLOWS ( DESIRED DELAY / TIME OF OVER FLOW ) **/ 
 b08:	0e 94 61 06 	call	0xcc2	; 0xcc2 <__floatunsisf>
 b0c:	2f e6       	ldi	r18, 0x6F	; 111
 b0e:	32 e1       	ldi	r19, 0x12	; 18
 b10:	43 e8       	ldi	r20, 0x83	; 131
 b12:	51 e4       	ldi	r21, 0x41	; 65
 b14:	0e 94 c0 05 	call	0xb80	; 0xb80 <__divsf3>
 b18:	0e 94 32 06 	call	0xc64	; 0xc64 <__fixunssfsi>
 b1c:	60 93 d6 00 	sts	0x00D6, r22	; 0x8000d6 <u32_gs_tmr0nuofovs>
 b20:	70 93 d7 00 	sts	0x00D7, r23	; 0x8000d7 <u32_gs_tmr0nuofovs+0x1>
 b24:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <u32_gs_tmr0nuofovs+0x2>
 b28:	90 93 d9 00 	sts	0x00D9, r25	; 0x8000d9 <u32_gs_tmr0nuofovs+0x3>
	
        TCNT0 = 0 ;   /** SET THE INITIAL VALUE IN TCNT0 REGISTER **/
 b2c:	12 be       	out	0x32, r1	; 50
	
	    en_a_delaystatus = VALID_DELAY ; /** VALID DELAY CONFIGURATIN **/
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
 b2e:	0e 94 6e 05 	call	0xadc	; 0xadc <TMR0_start>
/** RETURNS    : TMR0_delay                                                    */
/*******************************************************************************/
TMR0_delay_error TMR0_delayms(uint32_t u32_a_delayms)
{
	
	uint32_t u32_a_overflowcounter = 0 ;
 b32:	40 e0       	ldi	r20, 0x00	; 0
 b34:	50 e0       	ldi	r21, 0x00	; 0
 b36:	ba 01       	movw	r22, r20
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
	
	while ( u32_a_overflowcounter < u32_gs_tmr0nuofovs ) /** STUCK IN THIS LOOP UNTILL THIS CONDITION IS FALSE **/
 b38:	0a c0       	rjmp	.+20     	; 0xb4e <TMR0_delayms+0x46>
	{
		while((TIFR & (1 << 0)) == 0); /** DO NOTHING UNTILL THIS FLAG RAISED (OVERFLOW HAPPENED) **/
 b3a:	08 b6       	in	r0, 0x38	; 56
 b3c:	00 fe       	sbrs	r0, 0
 b3e:	fd cf       	rjmp	.-6      	; 0xb3a <TMR0_delayms+0x32>
		
		set_bit(TIFR , 0);        /** CLEAR THE FLAG BY SOFTWARE **/
 b40:	88 b7       	in	r24, 0x38	; 56
 b42:	81 60       	ori	r24, 0x01	; 1
 b44:	88 bf       	out	0x38, r24	; 56
		
		u32_a_overflowcounter++ ; /** INCREASE THE OVERFLOWS BY ONE **/
 b46:	4f 5f       	subi	r20, 0xFF	; 255
 b48:	5f 4f       	sbci	r21, 0xFF	; 255
 b4a:	6f 4f       	sbci	r22, 0xFF	; 255
 b4c:	7f 4f       	sbci	r23, 0xFF	; 255
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
	
	while ( u32_a_overflowcounter < u32_gs_tmr0nuofovs ) /** STUCK IN THIS LOOP UNTILL THIS CONDITION IS FALSE **/
 b4e:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <u32_gs_tmr0nuofovs>
 b52:	90 91 d7 00 	lds	r25, 0x00D7	; 0x8000d7 <u32_gs_tmr0nuofovs+0x1>
 b56:	a0 91 d8 00 	lds	r26, 0x00D8	; 0x8000d8 <u32_gs_tmr0nuofovs+0x2>
 b5a:	b0 91 d9 00 	lds	r27, 0x00D9	; 0x8000d9 <u32_gs_tmr0nuofovs+0x3>
 b5e:	48 17       	cp	r20, r24
 b60:	59 07       	cpc	r21, r25
 b62:	6a 07       	cpc	r22, r26
 b64:	7b 07       	cpc	r23, r27
 b66:	48 f3       	brcs	.-46     	; 0xb3a <TMR0_delayms+0x32>
		set_bit(TIFR , 0);        /** CLEAR THE FLAG BY SOFTWARE **/
		
		u32_a_overflowcounter++ ; /** INCREASE THE OVERFLOWS BY ONE **/
	}
	
	u32_gs_tmr0nuofovs = 0 ; /** REINTIALIZE THE OVERFLOWS COUNTER TO 0 AGAIN **/
 b68:	10 92 d6 00 	sts	0x00D6, r1	; 0x8000d6 <u32_gs_tmr0nuofovs>
 b6c:	10 92 d7 00 	sts	0x00D7, r1	; 0x8000d7 <u32_gs_tmr0nuofovs+0x1>
 b70:	10 92 d8 00 	sts	0x00D8, r1	; 0x8000d8 <u32_gs_tmr0nuofovs+0x2>
 b74:	10 92 d9 00 	sts	0x00D9, r1	; 0x8000d9 <u32_gs_tmr0nuofovs+0x3>

	TMR0_stop();   /** STOP TMR0 TOSTART FROM 0 WHEN IT CALLED AGAIN **/
 b78:	0e 94 79 05 	call	0xaf2	; 0xaf2 <TMR0_stop>
	
	return en_a_delaystatus ; /** RETURN THE STATUS **/
}
 b7c:	80 e0       	ldi	r24, 0x00	; 0
 b7e:	08 95       	ret

00000b80 <__divsf3>:
 b80:	0e 94 d4 05 	call	0xba8	; 0xba8 <__divsf3x>
 b84:	0c 94 b5 06 	jmp	0xd6a	; 0xd6a <__fp_round>
 b88:	0e 94 ae 06 	call	0xd5c	; 0xd5c <__fp_pscB>
 b8c:	58 f0       	brcs	.+22     	; 0xba4 <__divsf3+0x24>
 b8e:	0e 94 a7 06 	call	0xd4e	; 0xd4e <__fp_pscA>
 b92:	40 f0       	brcs	.+16     	; 0xba4 <__divsf3+0x24>
 b94:	29 f4       	brne	.+10     	; 0xba0 <__divsf3+0x20>
 b96:	5f 3f       	cpi	r21, 0xFF	; 255
 b98:	29 f0       	breq	.+10     	; 0xba4 <__divsf3+0x24>
 b9a:	0c 94 9e 06 	jmp	0xd3c	; 0xd3c <__fp_inf>
 b9e:	51 11       	cpse	r21, r1
 ba0:	0c 94 e9 06 	jmp	0xdd2	; 0xdd2 <__fp_szero>
 ba4:	0c 94 a4 06 	jmp	0xd48	; 0xd48 <__fp_nan>

00000ba8 <__divsf3x>:
 ba8:	0e 94 c6 06 	call	0xd8c	; 0xd8c <__fp_split3>
 bac:	68 f3       	brcs	.-38     	; 0xb88 <__divsf3+0x8>

00000bae <__divsf3_pse>:
 bae:	99 23       	and	r25, r25
 bb0:	b1 f3       	breq	.-20     	; 0xb9e <__divsf3+0x1e>
 bb2:	55 23       	and	r21, r21
 bb4:	91 f3       	breq	.-28     	; 0xb9a <__divsf3+0x1a>
 bb6:	95 1b       	sub	r25, r21
 bb8:	55 0b       	sbc	r21, r21
 bba:	bb 27       	eor	r27, r27
 bbc:	aa 27       	eor	r26, r26
 bbe:	62 17       	cp	r22, r18
 bc0:	73 07       	cpc	r23, r19
 bc2:	84 07       	cpc	r24, r20
 bc4:	38 f0       	brcs	.+14     	; 0xbd4 <__divsf3_pse+0x26>
 bc6:	9f 5f       	subi	r25, 0xFF	; 255
 bc8:	5f 4f       	sbci	r21, 0xFF	; 255
 bca:	22 0f       	add	r18, r18
 bcc:	33 1f       	adc	r19, r19
 bce:	44 1f       	adc	r20, r20
 bd0:	aa 1f       	adc	r26, r26
 bd2:	a9 f3       	breq	.-22     	; 0xbbe <__divsf3_pse+0x10>
 bd4:	35 d0       	rcall	.+106    	; 0xc40 <__divsf3_pse+0x92>
 bd6:	0e 2e       	mov	r0, r30
 bd8:	3a f0       	brmi	.+14     	; 0xbe8 <__divsf3_pse+0x3a>
 bda:	e0 e8       	ldi	r30, 0x80	; 128
 bdc:	32 d0       	rcall	.+100    	; 0xc42 <__divsf3_pse+0x94>
 bde:	91 50       	subi	r25, 0x01	; 1
 be0:	50 40       	sbci	r21, 0x00	; 0
 be2:	e6 95       	lsr	r30
 be4:	00 1c       	adc	r0, r0
 be6:	ca f7       	brpl	.-14     	; 0xbda <__divsf3_pse+0x2c>
 be8:	2b d0       	rcall	.+86     	; 0xc40 <__divsf3_pse+0x92>
 bea:	fe 2f       	mov	r31, r30
 bec:	29 d0       	rcall	.+82     	; 0xc40 <__divsf3_pse+0x92>
 bee:	66 0f       	add	r22, r22
 bf0:	77 1f       	adc	r23, r23
 bf2:	88 1f       	adc	r24, r24
 bf4:	bb 1f       	adc	r27, r27
 bf6:	26 17       	cp	r18, r22
 bf8:	37 07       	cpc	r19, r23
 bfa:	48 07       	cpc	r20, r24
 bfc:	ab 07       	cpc	r26, r27
 bfe:	b0 e8       	ldi	r27, 0x80	; 128
 c00:	09 f0       	breq	.+2      	; 0xc04 <__divsf3_pse+0x56>
 c02:	bb 0b       	sbc	r27, r27
 c04:	80 2d       	mov	r24, r0
 c06:	bf 01       	movw	r22, r30
 c08:	ff 27       	eor	r31, r31
 c0a:	93 58       	subi	r25, 0x83	; 131
 c0c:	5f 4f       	sbci	r21, 0xFF	; 255
 c0e:	3a f0       	brmi	.+14     	; 0xc1e <__divsf3_pse+0x70>
 c10:	9e 3f       	cpi	r25, 0xFE	; 254
 c12:	51 05       	cpc	r21, r1
 c14:	78 f0       	brcs	.+30     	; 0xc34 <__divsf3_pse+0x86>
 c16:	0c 94 9e 06 	jmp	0xd3c	; 0xd3c <__fp_inf>
 c1a:	0c 94 e9 06 	jmp	0xdd2	; 0xdd2 <__fp_szero>
 c1e:	5f 3f       	cpi	r21, 0xFF	; 255
 c20:	e4 f3       	brlt	.-8      	; 0xc1a <__divsf3_pse+0x6c>
 c22:	98 3e       	cpi	r25, 0xE8	; 232
 c24:	d4 f3       	brlt	.-12     	; 0xc1a <__divsf3_pse+0x6c>
 c26:	86 95       	lsr	r24
 c28:	77 95       	ror	r23
 c2a:	67 95       	ror	r22
 c2c:	b7 95       	ror	r27
 c2e:	f7 95       	ror	r31
 c30:	9f 5f       	subi	r25, 0xFF	; 255
 c32:	c9 f7       	brne	.-14     	; 0xc26 <__divsf3_pse+0x78>
 c34:	88 0f       	add	r24, r24
 c36:	91 1d       	adc	r25, r1
 c38:	96 95       	lsr	r25
 c3a:	87 95       	ror	r24
 c3c:	97 f9       	bld	r25, 7
 c3e:	08 95       	ret
 c40:	e1 e0       	ldi	r30, 0x01	; 1
 c42:	66 0f       	add	r22, r22
 c44:	77 1f       	adc	r23, r23
 c46:	88 1f       	adc	r24, r24
 c48:	bb 1f       	adc	r27, r27
 c4a:	62 17       	cp	r22, r18
 c4c:	73 07       	cpc	r23, r19
 c4e:	84 07       	cpc	r24, r20
 c50:	ba 07       	cpc	r27, r26
 c52:	20 f0       	brcs	.+8      	; 0xc5c <__divsf3_pse+0xae>
 c54:	62 1b       	sub	r22, r18
 c56:	73 0b       	sbc	r23, r19
 c58:	84 0b       	sbc	r24, r20
 c5a:	ba 0b       	sbc	r27, r26
 c5c:	ee 1f       	adc	r30, r30
 c5e:	88 f7       	brcc	.-30     	; 0xc42 <__divsf3_pse+0x94>
 c60:	e0 95       	com	r30
 c62:	08 95       	ret

00000c64 <__fixunssfsi>:
 c64:	0e 94 ce 06 	call	0xd9c	; 0xd9c <__fp_splitA>
 c68:	88 f0       	brcs	.+34     	; 0xc8c <__fixunssfsi+0x28>
 c6a:	9f 57       	subi	r25, 0x7F	; 127
 c6c:	98 f0       	brcs	.+38     	; 0xc94 <__fixunssfsi+0x30>
 c6e:	b9 2f       	mov	r27, r25
 c70:	99 27       	eor	r25, r25
 c72:	b7 51       	subi	r27, 0x17	; 23
 c74:	b0 f0       	brcs	.+44     	; 0xca2 <__fixunssfsi+0x3e>
 c76:	e1 f0       	breq	.+56     	; 0xcb0 <__fixunssfsi+0x4c>
 c78:	66 0f       	add	r22, r22
 c7a:	77 1f       	adc	r23, r23
 c7c:	88 1f       	adc	r24, r24
 c7e:	99 1f       	adc	r25, r25
 c80:	1a f0       	brmi	.+6      	; 0xc88 <__fixunssfsi+0x24>
 c82:	ba 95       	dec	r27
 c84:	c9 f7       	brne	.-14     	; 0xc78 <__fixunssfsi+0x14>
 c86:	14 c0       	rjmp	.+40     	; 0xcb0 <__fixunssfsi+0x4c>
 c88:	b1 30       	cpi	r27, 0x01	; 1
 c8a:	91 f0       	breq	.+36     	; 0xcb0 <__fixunssfsi+0x4c>
 c8c:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <__fp_zero>
 c90:	b1 e0       	ldi	r27, 0x01	; 1
 c92:	08 95       	ret
 c94:	0c 94 e8 06 	jmp	0xdd0	; 0xdd0 <__fp_zero>
 c98:	67 2f       	mov	r22, r23
 c9a:	78 2f       	mov	r23, r24
 c9c:	88 27       	eor	r24, r24
 c9e:	b8 5f       	subi	r27, 0xF8	; 248
 ca0:	39 f0       	breq	.+14     	; 0xcb0 <__fixunssfsi+0x4c>
 ca2:	b9 3f       	cpi	r27, 0xF9	; 249
 ca4:	cc f3       	brlt	.-14     	; 0xc98 <__fixunssfsi+0x34>
 ca6:	86 95       	lsr	r24
 ca8:	77 95       	ror	r23
 caa:	67 95       	ror	r22
 cac:	b3 95       	inc	r27
 cae:	d9 f7       	brne	.-10     	; 0xca6 <__fixunssfsi+0x42>
 cb0:	3e f4       	brtc	.+14     	; 0xcc0 <__fixunssfsi+0x5c>
 cb2:	90 95       	com	r25
 cb4:	80 95       	com	r24
 cb6:	70 95       	com	r23
 cb8:	61 95       	neg	r22
 cba:	7f 4f       	sbci	r23, 0xFF	; 255
 cbc:	8f 4f       	sbci	r24, 0xFF	; 255
 cbe:	9f 4f       	sbci	r25, 0xFF	; 255
 cc0:	08 95       	ret

00000cc2 <__floatunsisf>:
 cc2:	e8 94       	clt
 cc4:	09 c0       	rjmp	.+18     	; 0xcd8 <__floatsisf+0x12>

00000cc6 <__floatsisf>:
 cc6:	97 fb       	bst	r25, 7
 cc8:	3e f4       	brtc	.+14     	; 0xcd8 <__floatsisf+0x12>
 cca:	90 95       	com	r25
 ccc:	80 95       	com	r24
 cce:	70 95       	com	r23
 cd0:	61 95       	neg	r22
 cd2:	7f 4f       	sbci	r23, 0xFF	; 255
 cd4:	8f 4f       	sbci	r24, 0xFF	; 255
 cd6:	9f 4f       	sbci	r25, 0xFF	; 255
 cd8:	99 23       	and	r25, r25
 cda:	a9 f0       	breq	.+42     	; 0xd06 <__floatsisf+0x40>
 cdc:	f9 2f       	mov	r31, r25
 cde:	96 e9       	ldi	r25, 0x96	; 150
 ce0:	bb 27       	eor	r27, r27
 ce2:	93 95       	inc	r25
 ce4:	f6 95       	lsr	r31
 ce6:	87 95       	ror	r24
 ce8:	77 95       	ror	r23
 cea:	67 95       	ror	r22
 cec:	b7 95       	ror	r27
 cee:	f1 11       	cpse	r31, r1
 cf0:	f8 cf       	rjmp	.-16     	; 0xce2 <__floatsisf+0x1c>
 cf2:	fa f4       	brpl	.+62     	; 0xd32 <__floatsisf+0x6c>
 cf4:	bb 0f       	add	r27, r27
 cf6:	11 f4       	brne	.+4      	; 0xcfc <__floatsisf+0x36>
 cf8:	60 ff       	sbrs	r22, 0
 cfa:	1b c0       	rjmp	.+54     	; 0xd32 <__floatsisf+0x6c>
 cfc:	6f 5f       	subi	r22, 0xFF	; 255
 cfe:	7f 4f       	sbci	r23, 0xFF	; 255
 d00:	8f 4f       	sbci	r24, 0xFF	; 255
 d02:	9f 4f       	sbci	r25, 0xFF	; 255
 d04:	16 c0       	rjmp	.+44     	; 0xd32 <__floatsisf+0x6c>
 d06:	88 23       	and	r24, r24
 d08:	11 f0       	breq	.+4      	; 0xd0e <__floatsisf+0x48>
 d0a:	96 e9       	ldi	r25, 0x96	; 150
 d0c:	11 c0       	rjmp	.+34     	; 0xd30 <__floatsisf+0x6a>
 d0e:	77 23       	and	r23, r23
 d10:	21 f0       	breq	.+8      	; 0xd1a <__floatsisf+0x54>
 d12:	9e e8       	ldi	r25, 0x8E	; 142
 d14:	87 2f       	mov	r24, r23
 d16:	76 2f       	mov	r23, r22
 d18:	05 c0       	rjmp	.+10     	; 0xd24 <__floatsisf+0x5e>
 d1a:	66 23       	and	r22, r22
 d1c:	71 f0       	breq	.+28     	; 0xd3a <__floatsisf+0x74>
 d1e:	96 e8       	ldi	r25, 0x86	; 134
 d20:	86 2f       	mov	r24, r22
 d22:	70 e0       	ldi	r23, 0x00	; 0
 d24:	60 e0       	ldi	r22, 0x00	; 0
 d26:	2a f0       	brmi	.+10     	; 0xd32 <__floatsisf+0x6c>
 d28:	9a 95       	dec	r25
 d2a:	66 0f       	add	r22, r22
 d2c:	77 1f       	adc	r23, r23
 d2e:	88 1f       	adc	r24, r24
 d30:	da f7       	brpl	.-10     	; 0xd28 <__floatsisf+0x62>
 d32:	88 0f       	add	r24, r24
 d34:	96 95       	lsr	r25
 d36:	87 95       	ror	r24
 d38:	97 f9       	bld	r25, 7
 d3a:	08 95       	ret

00000d3c <__fp_inf>:
 d3c:	97 f9       	bld	r25, 7
 d3e:	9f 67       	ori	r25, 0x7F	; 127
 d40:	80 e8       	ldi	r24, 0x80	; 128
 d42:	70 e0       	ldi	r23, 0x00	; 0
 d44:	60 e0       	ldi	r22, 0x00	; 0
 d46:	08 95       	ret

00000d48 <__fp_nan>:
 d48:	9f ef       	ldi	r25, 0xFF	; 255
 d4a:	80 ec       	ldi	r24, 0xC0	; 192
 d4c:	08 95       	ret

00000d4e <__fp_pscA>:
 d4e:	00 24       	eor	r0, r0
 d50:	0a 94       	dec	r0
 d52:	16 16       	cp	r1, r22
 d54:	17 06       	cpc	r1, r23
 d56:	18 06       	cpc	r1, r24
 d58:	09 06       	cpc	r0, r25
 d5a:	08 95       	ret

00000d5c <__fp_pscB>:
 d5c:	00 24       	eor	r0, r0
 d5e:	0a 94       	dec	r0
 d60:	12 16       	cp	r1, r18
 d62:	13 06       	cpc	r1, r19
 d64:	14 06       	cpc	r1, r20
 d66:	05 06       	cpc	r0, r21
 d68:	08 95       	ret

00000d6a <__fp_round>:
 d6a:	09 2e       	mov	r0, r25
 d6c:	03 94       	inc	r0
 d6e:	00 0c       	add	r0, r0
 d70:	11 f4       	brne	.+4      	; 0xd76 <__fp_round+0xc>
 d72:	88 23       	and	r24, r24
 d74:	52 f0       	brmi	.+20     	; 0xd8a <__fp_round+0x20>
 d76:	bb 0f       	add	r27, r27
 d78:	40 f4       	brcc	.+16     	; 0xd8a <__fp_round+0x20>
 d7a:	bf 2b       	or	r27, r31
 d7c:	11 f4       	brne	.+4      	; 0xd82 <__fp_round+0x18>
 d7e:	60 ff       	sbrs	r22, 0
 d80:	04 c0       	rjmp	.+8      	; 0xd8a <__fp_round+0x20>
 d82:	6f 5f       	subi	r22, 0xFF	; 255
 d84:	7f 4f       	sbci	r23, 0xFF	; 255
 d86:	8f 4f       	sbci	r24, 0xFF	; 255
 d88:	9f 4f       	sbci	r25, 0xFF	; 255
 d8a:	08 95       	ret

00000d8c <__fp_split3>:
 d8c:	57 fd       	sbrc	r21, 7
 d8e:	90 58       	subi	r25, 0x80	; 128
 d90:	44 0f       	add	r20, r20
 d92:	55 1f       	adc	r21, r21
 d94:	59 f0       	breq	.+22     	; 0xdac <__fp_splitA+0x10>
 d96:	5f 3f       	cpi	r21, 0xFF	; 255
 d98:	71 f0       	breq	.+28     	; 0xdb6 <__fp_splitA+0x1a>
 d9a:	47 95       	ror	r20

00000d9c <__fp_splitA>:
 d9c:	88 0f       	add	r24, r24
 d9e:	97 fb       	bst	r25, 7
 da0:	99 1f       	adc	r25, r25
 da2:	61 f0       	breq	.+24     	; 0xdbc <__fp_splitA+0x20>
 da4:	9f 3f       	cpi	r25, 0xFF	; 255
 da6:	79 f0       	breq	.+30     	; 0xdc6 <__fp_splitA+0x2a>
 da8:	87 95       	ror	r24
 daa:	08 95       	ret
 dac:	12 16       	cp	r1, r18
 dae:	13 06       	cpc	r1, r19
 db0:	14 06       	cpc	r1, r20
 db2:	55 1f       	adc	r21, r21
 db4:	f2 cf       	rjmp	.-28     	; 0xd9a <__fp_split3+0xe>
 db6:	46 95       	lsr	r20
 db8:	f1 df       	rcall	.-30     	; 0xd9c <__fp_splitA>
 dba:	08 c0       	rjmp	.+16     	; 0xdcc <__fp_splitA+0x30>
 dbc:	16 16       	cp	r1, r22
 dbe:	17 06       	cpc	r1, r23
 dc0:	18 06       	cpc	r1, r24
 dc2:	99 1f       	adc	r25, r25
 dc4:	f1 cf       	rjmp	.-30     	; 0xda8 <__fp_splitA+0xc>
 dc6:	86 95       	lsr	r24
 dc8:	71 05       	cpc	r23, r1
 dca:	61 05       	cpc	r22, r1
 dcc:	08 94       	sec
 dce:	08 95       	ret

00000dd0 <__fp_zero>:
 dd0:	e8 94       	clt

00000dd2 <__fp_szero>:
 dd2:	bb 27       	eor	r27, r27
 dd4:	66 27       	eor	r22, r22
 dd6:	77 27       	eor	r23, r23
 dd8:	cb 01       	movw	r24, r22
 dda:	97 f9       	bld	r25, 7
 ddc:	08 95       	ret

00000dde <strcmp>:
 dde:	fb 01       	movw	r30, r22
 de0:	dc 01       	movw	r26, r24
 de2:	8d 91       	ld	r24, X+
 de4:	01 90       	ld	r0, Z+
 de6:	80 19       	sub	r24, r0
 de8:	01 10       	cpse	r0, r1
 dea:	d9 f3       	breq	.-10     	; 0xde2 <strcmp+0x4>
 dec:	99 0b       	sbc	r25, r25
 dee:	08 95       	ret

00000df0 <_exit>:
 df0:	f8 94       	cli

00000df2 <__stop_program>:
 df2:	ff cf       	rjmp	.-2      	; 0xdf2 <__stop_program>
