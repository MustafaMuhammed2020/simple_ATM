
ATM_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  000008ae  00000942  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800080  00800080  00000962  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000962  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000994  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000178  00000000  00000000  000009d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000176d  00000000  00000000  00000b48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009f9  00000000  00000000  000022b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dcf  00000000  00000000  00002cae  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002c0  00000000  00000000  00003a80  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000085e  00000000  00000000  00003d40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b60  00000000  00000000  0000459e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  000050fe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ea       	ldi	r30, 0xAE	; 174
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 38       	cpi	r26, 0x80	; 128
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e8       	ldi	r26, 0x80	; 128
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 38       	cpi	r26, 0x84	; 132
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 84 01 	call	0x308	; 0x308 <main>
  8a:	0c 94 55 04 	jmp	0x8aa	; 0x8aa <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <APP_init>:
uint8_t u8_g_cardpin[5] = "0000";                  /** GLOBAL VARIABLE TO HOLD THE CARD PAN     **/ 
uint8_t u8_g_cardpan[20] = "0000000000000000000";  /** GLOBAL VARIABLE TO HOLD THE CARD PIN     **/

void APP_init()
{
	TMR0_init();
  92:	0e 94 c3 02 	call	0x586	; 0x586 <TMR0_init>
	
	SPI_initslave(); /** INITIALIZE SPI MASTER **/
  96:	0e 94 87 02 	call	0x50e	; 0x50e <SPI_initslave>
	
	LCD_init();  /** INITIALIZE LCD **/
  9a:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <LCD_init>
	
	TMR0_delayms(20); /** SET DELAY FOR LCD INITILIZATION **/
  9e:	64 e1       	ldi	r22, 0x14	; 20
  a0:	70 e0       	ldi	r23, 0x00	; 0
  a2:	80 e0       	ldi	r24, 0x00	; 0
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <TMR0_delayms>
	
	LCD_writestr(" ATM !");
  aa:	89 e7       	ldi	r24, 0x79	; 121
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	0e 94 59 01 	call	0x2b2	; 0x2b2 <LCD_writestr>
	
	TMR0_delayms(500);
  b2:	64 ef       	ldi	r22, 0xF4	; 244
  b4:	71 e0       	ldi	r23, 0x01	; 1
  b6:	80 e0       	ldi	r24, 0x00	; 0
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <TMR0_delayms>
	
	LCD_sendcmd(LCD_CLEAR);
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	0e 94 88 00 	call	0x110	; 0x110 <LCD_sendcmd>
	
	TMR0_delayms(20);
  c4:	64 e1       	ldi	r22, 0x14	; 20
  c6:	70 e0       	ldi	r23, 0x00	; 0
  c8:	80 e0       	ldi	r24, 0x00	; 0
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <TMR0_delayms>
  d0:	08 95       	ret

000000d2 <APP_start>:
}

void APP_start() 
{

	SPI_receivestring(&u8_g_cardpin);
  d2:	84 e7       	ldi	r24, 0x74	; 116
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	0e 94 ae 02 	call	0x55c	; 0x55c <SPI_receivestring>
	
	TMR0_delayms(30);
  da:	6e e1       	ldi	r22, 0x1E	; 30
  dc:	70 e0       	ldi	r23, 0x00	; 0
  de:	80 e0       	ldi	r24, 0x00	; 0
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <TMR0_delayms>
	
	SPI_receivestring(&u8_g_cardpan);
  e6:	80 e6       	ldi	r24, 0x60	; 96
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	0e 94 ae 02 	call	0x55c	; 0x55c <SPI_receivestring>
	
	LCD_goto(0,1);
  ee:	61 e0       	ldi	r22, 0x01	; 1
  f0:	80 e0       	ldi	r24, 0x00	; 0
  f2:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <LCD_goto>
	LCD_writestr(u8_g_cardpin);
  f6:	84 e7       	ldi	r24, 0x74	; 116
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	0e 94 59 01 	call	0x2b2	; 0x2b2 <LCD_writestr>
	
	LCD_goto(1,1);
  fe:	61 e0       	ldi	r22, 0x01	; 1
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <LCD_goto>
	LCD_writestr(u8_g_cardpan);
 106:	80 e6       	ldi	r24, 0x60	; 96
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	0e 94 59 01 	call	0x2b2	; 0x2b2 <LCD_writestr>
 10e:	08 95       	ret

00000110 <LCD_sendcmd>:
/** FUNCTION TO SEND COMMAND TO LCD                       */
/** ARGUMENTS   : COMMAND                                 */
/** RETURNS     : ERROR STATUS                            */
/**********************************************************/
LCD_status LCD_sendcmd(uint8_t u8_a_cmd)
{
 110:	cf 93       	push	r28
 112:	c8 2f       	mov	r28, r24
	TMR0_init();
 114:	0e 94 c3 02 	call	0x586	; 0x586 <TMR0_init>
		DIO_setpinvalue(LCD_8BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_LOW);  /** LATCH **/
		TMR0_delayms(5); /** LOW **/
		
		#elif LCD_MODE == BIT_MODE_4    /** IF LCD CONFIGURED AS 4 BIT MODE **/
		
		DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_RS_PIN , DIO_PIN_LOW);  /** COMMAND MODE       **/
 118:	40 e0       	ldi	r20, 0x00	; 0
 11a:	61 e0       	ldi	r22, 0x01	; 1
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	0e 94 08 02 	call	0x410	; 0x410 <DIO_setpinvalue>
		DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_RW_PIN , DIO_PIN_LOW);  /** WRITE TO LCD MODE  **/
 122:	40 e0       	ldi	r20, 0x00	; 0
 124:	62 e0       	ldi	r22, 0x02	; 2
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	0e 94 08 02 	call	0x410	; 0x410 <DIO_setpinvalue>
		DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_LOW);   /** PREPARE FOR LATCH  **/
 12c:	40 e0       	ldi	r20, 0x00	; 0
 12e:	63 e0       	ldi	r22, 0x03	; 3
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	0e 94 08 02 	call	0x410	; 0x410 <DIO_setpinvalue>
		
		PORTA = ((u8_a_cmd & 0xF0) | (PORTA & 0x0F)); /** SEND THE MSB(HIGH NIBBLE) **/
 136:	8b b3       	in	r24, 0x1b	; 27
 138:	9c 2f       	mov	r25, r28
 13a:	90 7f       	andi	r25, 0xF0	; 240
 13c:	8f 70       	andi	r24, 0x0F	; 15
 13e:	89 2b       	or	r24, r25
 140:	8b bb       	out	0x1b, r24	; 27
		
		DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_HIGH); /** LATCH **/
 142:	41 e0       	ldi	r20, 0x01	; 1
 144:	63 e0       	ldi	r22, 0x03	; 3
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	0e 94 08 02 	call	0x410	; 0x410 <DIO_setpinvalue>
		TMR0_delayms(1);
 14c:	61 e0       	ldi	r22, 0x01	; 1
 14e:	70 e0       	ldi	r23, 0x00	; 0
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <TMR0_delayms>
		DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_LOW);  /** LATCH **/
 158:	40 e0       	ldi	r20, 0x00	; 0
 15a:	63 e0       	ldi	r22, 0x03	; 3
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	0e 94 08 02 	call	0x410	; 0x410 <DIO_setpinvalue>
		
		
		PORTA = (((u8_a_cmd << 4) & 0xF0) | (PORTA & 0x0F)); /** SEND THE LSB(LOW NIBBLE) **/
 162:	20 e1       	ldi	r18, 0x10	; 16
 164:	c2 9f       	mul	r28, r18
 166:	c0 01       	movw	r24, r0
 168:	11 24       	eor	r1, r1
 16a:	9b b3       	in	r25, 0x1b	; 27
 16c:	9f 70       	andi	r25, 0x0F	; 15
 16e:	89 2b       	or	r24, r25
 170:	8b bb       	out	0x1b, r24	; 27
		
		DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_HIGH); /** LATCH **/
 172:	41 e0       	ldi	r20, 0x01	; 1
 174:	63 e0       	ldi	r22, 0x03	; 3
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	0e 94 08 02 	call	0x410	; 0x410 <DIO_setpinvalue>
		TMR0_delayms(1);
 17c:	61 e0       	ldi	r22, 0x01	; 1
 17e:	70 e0       	ldi	r23, 0x00	; 0
 180:	80 e0       	ldi	r24, 0x00	; 0
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <TMR0_delayms>
		
		DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_LOW);    /** LATCH **/
 188:	40 e0       	ldi	r20, 0x00	; 0
 18a:	63 e0       	ldi	r22, 0x03	; 3
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	0e 94 08 02 	call	0x410	; 0x410 <DIO_setpinvalue>
		
		TMR0_delayms(5); /** 5 ms BEFORE SENDING THE NEXT COMMAND **/
 192:	65 e0       	ldi	r22, 0x05	; 5
 194:	70 e0       	ldi	r23, 0x00	; 0
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <TMR0_delayms>
		
		#endif
}
 19e:	cf 91       	pop	r28
 1a0:	08 95       	ret

000001a2 <LCD_init>:
/**********************************************************/
LCD_status LCD_init(void)
{
	LCD_status en_a_lcdinitstatus = VALID__LCD_INIT ; /** VARIABLE TO OLD THE RETURN STATUS OF THE FUNCTION **/
	
	TMR0_init();
 1a2:	0e 94 c3 02 	call	0x586	; 0x586 <TMR0_init>
		LCD_sendcmd(LCD_CLEAR);       /** CLEAR THE LCD                                    **/
		
		
		#elif LCD_MODE == BIT_MODE_4    /** IF LCD CONFIGURED AS 4 BIT MODE **/
		
		DIO_setpindir(LCD_4BIT_CMD_PORT , LCD_RS_PIN , DIO_PIN_OUTPUT); /** SET RS PIN AS OUTPUT PIN **/
 1a6:	41 e0       	ldi	r20, 0x01	; 1
 1a8:	61 e0       	ldi	r22, 0x01	; 1
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	0e 94 89 01 	call	0x312	; 0x312 <DIO_setpindir>
		DIO_setpindir(LCD_4BIT_CMD_PORT , LCD_RW_PIN , DIO_PIN_OUTPUT); /** SET RW PIN AS OUTPUT PIN **/
 1b0:	41 e0       	ldi	r20, 0x01	; 1
 1b2:	62 e0       	ldi	r22, 0x02	; 2
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	0e 94 89 01 	call	0x312	; 0x312 <DIO_setpindir>
		DIO_setpindir(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_OUTPUT);  /** SET E PIN AS OUTPUT PIN  **/
 1ba:	41 e0       	ldi	r20, 0x01	; 1
 1bc:	63 e0       	ldi	r22, 0x03	; 3
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	0e 94 89 01 	call	0x312	; 0x312 <DIO_setpindir>
		
		DIO_setpindir(LCD_4BIT_DATA_PORT , LCD_D4_PIN , DIO_PIN_OUTPUT); /** 4 DATA PINS AS OUTPUT **/
 1c4:	41 e0       	ldi	r20, 0x01	; 1
 1c6:	64 e0       	ldi	r22, 0x04	; 4
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	0e 94 89 01 	call	0x312	; 0x312 <DIO_setpindir>
		DIO_setpindir(LCD_4BIT_DATA_PORT , LCD_D5_PIN , DIO_PIN_OUTPUT);
 1ce:	41 e0       	ldi	r20, 0x01	; 1
 1d0:	65 e0       	ldi	r22, 0x05	; 5
 1d2:	80 e0       	ldi	r24, 0x00	; 0
 1d4:	0e 94 89 01 	call	0x312	; 0x312 <DIO_setpindir>
		DIO_setpindir(LCD_4BIT_DATA_PORT , LCD_D6_PIN , DIO_PIN_OUTPUT);
 1d8:	41 e0       	ldi	r20, 0x01	; 1
 1da:	66 e0       	ldi	r22, 0x06	; 6
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	0e 94 89 01 	call	0x312	; 0x312 <DIO_setpindir>
		DIO_setpindir(LCD_4BIT_DATA_PORT , LCD_D7_PIN , DIO_PIN_OUTPUT);
 1e2:	41 e0       	ldi	r20, 0x01	; 1
 1e4:	67 e0       	ldi	r22, 0x07	; 7
 1e6:	80 e0       	ldi	r24, 0x00	; 0
 1e8:	0e 94 89 01 	call	0x312	; 0x312 <DIO_setpindir>
		
		TMR0_delayms(20); /** DELAY FOR LCD TO BE INITIALIZED **/
 1ec:	64 e1       	ldi	r22, 0x14	; 20
 1ee:	70 e0       	ldi	r23, 0x00	; 0
 1f0:	80 e0       	ldi	r24, 0x00	; 0
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <TMR0_delayms>
		
		/** SEND SOME COMMANDS TO THE LCD FOR INITIAL SET   **/
		
		LCD_sendcmd(LCD_4BIT_MODE_CMD1); /** SEND THREE COMMANDS FOR LCD TO SET 4 BIT OPERATION MODE ( 2 LINES , 5*8 MATRIX ) **/
 1f8:	83 e3       	ldi	r24, 0x33	; 51
 1fa:	0e 94 88 00 	call	0x110	; 0x110 <LCD_sendcmd>
		LCD_sendcmd(LCD_4BIT_MODE_CMD2);
 1fe:	82 e3       	ldi	r24, 0x32	; 50
 200:	0e 94 88 00 	call	0x110	; 0x110 <LCD_sendcmd>
		LCD_sendcmd(LCD_4BIT_MODE_CMD3);
 204:	88 e2       	ldi	r24, 0x28	; 40
 206:	0e 94 88 00 	call	0x110	; 0x110 <LCD_sendcmd>
		
		LCD_sendcmd(LCD_CURSOR_OFF);     /** NO NEED FOR CURSOR SO IT IS OFF                  **/
 20a:	8c e0       	ldi	r24, 0x0C	; 12
 20c:	0e 94 88 00 	call	0x110	; 0x110 <LCD_sendcmd>
		LCD_sendcmd(LCD_CURSOR_INC);     /** DIRECTION OF WRITING FROM LEFT TO RIGHT          **/
 210:	86 e0       	ldi	r24, 0x06	; 6
 212:	0e 94 88 00 	call	0x110	; 0x110 <LCD_sendcmd>
		LCD_sendcmd(LCD_RETURN_HOME);    /** CURSOR STARTS FROM ITS HOME POSITION             **/
 216:	82 e0       	ldi	r24, 0x02	; 2
 218:	0e 94 88 00 	call	0x110	; 0x110 <LCD_sendcmd>
		LCD_sendcmd(LCD_CLEAR);          /** CLEAR THE LCD                                    **/
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	0e 94 88 00 	call	0x110	; 0x110 <LCD_sendcmd>
		
		#endif 
		
}
 222:	08 95       	ret

00000224 <LCD_writechar>:
/** FUNCTION TO DISPLAY CHARACTER ON LCD                  */
/** ARGUMENTS   : CHARACTER                               */
/** RETURNS     : ERROR STATUS                            */
/**********************************************************/
LCD_status LCD_writechar(uint8_t u8_a_chr)
{
 224:	cf 93       	push	r28
 226:	c8 2f       	mov	r28, r24
	
	TMR0_delayms(5); /** 5 ms BEFORE SENDING THE NEXT CHARACTER **/
	
	#elif LCD_MODE == BIT_MODE_4    /** IF LCD CONFIGURED AS 4 BIT MODE **/
	
	DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_RS_PIN , DIO_PIN_HIGH);  /** DATA MODE         **/
 228:	41 e0       	ldi	r20, 0x01	; 1
 22a:	61 e0       	ldi	r22, 0x01	; 1
 22c:	80 e0       	ldi	r24, 0x00	; 0
 22e:	0e 94 08 02 	call	0x410	; 0x410 <DIO_setpinvalue>
	DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_RW_PIN , DIO_PIN_LOW);   /** WRITE TO LCD MODE **/
 232:	40 e0       	ldi	r20, 0x00	; 0
 234:	62 e0       	ldi	r22, 0x02	; 2
 236:	80 e0       	ldi	r24, 0x00	; 0
 238:	0e 94 08 02 	call	0x410	; 0x410 <DIO_setpinvalue>
	DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_LOW);    /** DATA MODE         **/
 23c:	40 e0       	ldi	r20, 0x00	; 0
 23e:	63 e0       	ldi	r22, 0x03	; 3
 240:	80 e0       	ldi	r24, 0x00	; 0
 242:	0e 94 08 02 	call	0x410	; 0x410 <DIO_setpinvalue>
	
	
	PORTA = ((u8_a_chr & 0xF0) | (PORTA & 0x0F)); /** SEND THE MSB (HIGH NIBBLE) **/
 246:	8b b3       	in	r24, 0x1b	; 27
 248:	9c 2f       	mov	r25, r28
 24a:	90 7f       	andi	r25, 0xF0	; 240
 24c:	8f 70       	andi	r24, 0x0F	; 15
 24e:	89 2b       	or	r24, r25
 250:	8b bb       	out	0x1b, r24	; 27
	
	DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_HIGH); /** LATCH **/
 252:	41 e0       	ldi	r20, 0x01	; 1
 254:	63 e0       	ldi	r22, 0x03	; 3
 256:	80 e0       	ldi	r24, 0x00	; 0
 258:	0e 94 08 02 	call	0x410	; 0x410 <DIO_setpinvalue>
	TMR0_delayms(1);
 25c:	61 e0       	ldi	r22, 0x01	; 1
 25e:	70 e0       	ldi	r23, 0x00	; 0
 260:	80 e0       	ldi	r24, 0x00	; 0
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <TMR0_delayms>
	DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_LOW); /** LATCH **/
 268:	40 e0       	ldi	r20, 0x00	; 0
 26a:	63 e0       	ldi	r22, 0x03	; 3
 26c:	80 e0       	ldi	r24, 0x00	; 0
 26e:	0e 94 08 02 	call	0x410	; 0x410 <DIO_setpinvalue>
		
	PORTA = (((u8_a_chr << 4) & 0xF0) | (PORTA & 0x0F)); /** SEND THE LSB (LOW NIBBLE) **/
 272:	20 e1       	ldi	r18, 0x10	; 16
 274:	c2 9f       	mul	r28, r18
 276:	c0 01       	movw	r24, r0
 278:	11 24       	eor	r1, r1
 27a:	9b b3       	in	r25, 0x1b	; 27
 27c:	9f 70       	andi	r25, 0x0F	; 15
 27e:	89 2b       	or	r24, r25
 280:	8b bb       	out	0x1b, r24	; 27
	
	DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_HIGH); /** LATCH **/
 282:	41 e0       	ldi	r20, 0x01	; 1
 284:	63 e0       	ldi	r22, 0x03	; 3
 286:	80 e0       	ldi	r24, 0x00	; 0
 288:	0e 94 08 02 	call	0x410	; 0x410 <DIO_setpinvalue>
	TMR0_delayms(1);
 28c:	61 e0       	ldi	r22, 0x01	; 1
 28e:	70 e0       	ldi	r23, 0x00	; 0
 290:	80 e0       	ldi	r24, 0x00	; 0
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <TMR0_delayms>
	DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_LOW);  /** LATCH **/
 298:	40 e0       	ldi	r20, 0x00	; 0
 29a:	63 e0       	ldi	r22, 0x03	; 3
 29c:	80 e0       	ldi	r24, 0x00	; 0
 29e:	0e 94 08 02 	call	0x410	; 0x410 <DIO_setpinvalue>
	
	TMR0_delayms(5); /** 5 ms BEFORE SENDING THE NEXT CHARACTER **/
 2a2:	65 e0       	ldi	r22, 0x05	; 5
 2a4:	70 e0       	ldi	r23, 0x00	; 0
 2a6:	80 e0       	ldi	r24, 0x00	; 0
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <TMR0_delayms>
	
	#endif
}
 2ae:	cf 91       	pop	r28
 2b0:	08 95       	ret

000002b2 <LCD_writestr>:
/** FUNCTION TO DISPLAY STRING ON LCD                     */
/** ARGUMENTS   : STRING                                  */
/** RETURNS     : ERROR STATUS                            */
/**********************************************************/
LCD_status LCD_writestr(uint8_t* u8_s_str)
{
 2b2:	0f 93       	push	r16
 2b4:	1f 93       	push	r17
 2b6:	cf 93       	push	r28
 2b8:	8c 01       	movw	r16, r24
	uint8_t u8_a_letter = 0;   /** VARIABLE SIMULATES LETTER **/
 2ba:	c0 e0       	ldi	r28, 0x00	; 0
	
	while (u8_s_str[u8_a_letter] != '\0') /** WHILE LETTER ISN'T NULL **/
 2bc:	03 c0       	rjmp	.+6      	; 0x2c4 <LCD_writestr+0x12>
	{
		LCD_writechar(u8_s_str[u8_a_letter]); /** SEND LETTER TO LCD **/
 2be:	0e 94 12 01 	call	0x224	; 0x224 <LCD_writechar>
		
		u8_a_letter++; /** JUMP TO THE NEXT LETTER **/
 2c2:	cf 5f       	subi	r28, 0xFF	; 255
/**********************************************************/
LCD_status LCD_writestr(uint8_t* u8_s_str)
{
	uint8_t u8_a_letter = 0;   /** VARIABLE SIMULATES LETTER **/
	
	while (u8_s_str[u8_a_letter] != '\0') /** WHILE LETTER ISN'T NULL **/
 2c4:	f8 01       	movw	r30, r16
 2c6:	ec 0f       	add	r30, r28
 2c8:	f1 1d       	adc	r31, r1
 2ca:	80 81       	ld	r24, Z
 2cc:	81 11       	cpse	r24, r1
 2ce:	f7 cf       	rjmp	.-18     	; 0x2be <LCD_writestr+0xc>
	{
		LCD_writechar(u8_s_str[u8_a_letter]); /** SEND LETTER TO LCD **/
		
		u8_a_letter++; /** JUMP TO THE NEXT LETTER **/
	}
}
 2d0:	cf 91       	pop	r28
 2d2:	1f 91       	pop	r17
 2d4:	0f 91       	pop	r16
 2d6:	08 95       	ret

000002d8 <LCD_goto>:
/** FUNCTION TO JUMP TO SPECIFIC POSITION ON LCD          */
/** ARGUMENTS   : ROW , COLUMN (POSITION)                 */
/** RETURNS     : ERROR STATUS                            */
/**********************************************************/
LCD_status  LCD_goto(uint8_t u8_a_row , uint8_t u8_a_column)
{
 2d8:	cf 93       	push	r28
 2da:	df 93       	push	r29
 2dc:	00 d0       	rcall	.+0      	; 0x2de <LCD_goto+0x6>
 2de:	cd b7       	in	r28, 0x3d	; 61
 2e0:	de b7       	in	r29, 0x3e	; 62
	uint8_t positions[2] = {0x80 , 0xC0}; /** POSITIONS OF 1st & 2nd ROWS **/
 2e2:	90 e8       	ldi	r25, 0x80	; 128
 2e4:	99 83       	std	Y+1, r25	; 0x01
 2e6:	90 ec       	ldi	r25, 0xC0	; 192
 2e8:	9a 83       	std	Y+2, r25	; 0x02
	
	LCD_sendcmd(positions[u8_a_row] + u8_a_column); /** GO TO SPECIFIC MATRIX **/
 2ea:	e1 e0       	ldi	r30, 0x01	; 1
 2ec:	f0 e0       	ldi	r31, 0x00	; 0
 2ee:	ec 0f       	add	r30, r28
 2f0:	fd 1f       	adc	r31, r29
 2f2:	e8 0f       	add	r30, r24
 2f4:	f1 1d       	adc	r31, r1
 2f6:	80 81       	ld	r24, Z
 2f8:	86 0f       	add	r24, r22
 2fa:	0e 94 88 00 	call	0x110	; 0x110 <LCD_sendcmd>
}
 2fe:	0f 90       	pop	r0
 300:	0f 90       	pop	r0
 302:	df 91       	pop	r29
 304:	cf 91       	pop	r28
 306:	08 95       	ret

00000308 <main>:

#include "APP/APP.h"

int main(void)
{
	APP_init();
 308:	0e 94 49 00 	call	0x92	; 0x92 <APP_init>
	
	APP_start();
 30c:	0e 94 69 00 	call	0xd2	; 0xd2 <APP_start>
 310:	ff cf       	rjmp	.-2      	; 0x310 <main+0x8>

00000312 <DIO_setpindir>:
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
	
	switch(u8_a_pindir) /** SWITCH CASE ON THE DIRECTION VALUE **/
 312:	44 23       	and	r20, r20
 314:	19 f0       	breq	.+6      	; 0x31c <DIO_setpindir+0xa>
 316:	41 30       	cpi	r20, 0x01	; 1
 318:	e9 f1       	breq	.+122    	; 0x394 <DIO_setpindir+0x82>
 31a:	74 c0       	rjmp	.+232    	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
	{
		case DIO_PIN_INPUT:  /* INPUT CASE  */
		
		switch(u8_a_portid) /** SWITCH CASE ON THE PORT ID */
 31c:	81 30       	cpi	r24, 0x01	; 1
 31e:	99 f0       	breq	.+38     	; 0x346 <DIO_setpindir+0x34>
 320:	28 f0       	brcs	.+10     	; 0x32c <DIO_setpindir+0x1a>
 322:	82 30       	cpi	r24, 0x02	; 2
 324:	e9 f0       	breq	.+58     	; 0x360 <DIO_setpindir+0x4e>
 326:	83 30       	cpi	r24, 0x03	; 3
 328:	41 f1       	breq	.+80     	; 0x37a <DIO_setpindir+0x68>
 32a:	6e c0       	rjmp	.+220    	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
		{
			case DIO_PORTA:
			clear_bit(DDRA , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTA AS INPUT PIN **/
 32c:	2a b3       	in	r18, 0x1a	; 26
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	02 c0       	rjmp	.+4      	; 0x338 <DIO_setpindir+0x26>
 334:	88 0f       	add	r24, r24
 336:	99 1f       	adc	r25, r25
 338:	6a 95       	dec	r22
 33a:	e2 f7       	brpl	.-8      	; 0x334 <DIO_setpindir+0x22>
 33c:	80 95       	com	r24
 33e:	82 23       	and	r24, r18
 340:	8a bb       	out	0x1a, r24	; 26
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
 342:	80 e0       	ldi	r24, 0x00	; 0
		
		switch(u8_a_portid) /** SWITCH CASE ON THE PORT ID */
		{
			case DIO_PORTA:
			clear_bit(DDRA , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTA AS INPUT PIN **/
			break;
 344:	08 95       	ret
			
			case DIO_PORTB:
			clear_bit(DDRB , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTB AS INPUT PIN **/
 346:	27 b3       	in	r18, 0x17	; 23
 348:	81 e0       	ldi	r24, 0x01	; 1
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	02 c0       	rjmp	.+4      	; 0x352 <DIO_setpindir+0x40>
 34e:	88 0f       	add	r24, r24
 350:	99 1f       	adc	r25, r25
 352:	6a 95       	dec	r22
 354:	e2 f7       	brpl	.-8      	; 0x34e <DIO_setpindir+0x3c>
 356:	80 95       	com	r24
 358:	82 23       	and	r24, r18
 35a:	87 bb       	out	0x17, r24	; 23
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
 35c:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(DDRA , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTA AS INPUT PIN **/
			break;
			
			case DIO_PORTB:
			clear_bit(DDRB , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTB AS INPUT PIN **/
			break;
 35e:	08 95       	ret
			
			case DIO_PORTC:
			clear_bit(DDRC , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTC AS INPUT PIN **/
 360:	24 b3       	in	r18, 0x14	; 20
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	02 c0       	rjmp	.+4      	; 0x36c <DIO_setpindir+0x5a>
 368:	88 0f       	add	r24, r24
 36a:	99 1f       	adc	r25, r25
 36c:	6a 95       	dec	r22
 36e:	e2 f7       	brpl	.-8      	; 0x368 <DIO_setpindir+0x56>
 370:	80 95       	com	r24
 372:	82 23       	and	r24, r18
 374:	84 bb       	out	0x14, r24	; 20
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
 376:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(DDRB , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTB AS INPUT PIN **/
			break;
			
			case DIO_PORTC:
			clear_bit(DDRC , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTC AS INPUT PIN **/
			break;
 378:	08 95       	ret
			
			case DIO_PORTD:
			clear_bit(DDRD , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTD AS INPUT PIN **/
 37a:	21 b3       	in	r18, 0x11	; 17
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	02 c0       	rjmp	.+4      	; 0x386 <DIO_setpindir+0x74>
 382:	88 0f       	add	r24, r24
 384:	99 1f       	adc	r25, r25
 386:	6a 95       	dec	r22
 388:	e2 f7       	brpl	.-8      	; 0x382 <DIO_setpindir+0x70>
 38a:	80 95       	com	r24
 38c:	82 23       	and	r24, r18
 38e:	81 bb       	out	0x11, r24	; 17
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
 390:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(DDRC , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTC AS INPUT PIN **/
			break;
			
			case DIO_PORTD:
			clear_bit(DDRD , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTD AS INPUT PIN **/
			break;
 392:	08 95       	ret
		} 
		break;
		
		case DIO_PIN_OUTPUT:  /* OUTPUT CASE  */
		
		switch(u8_a_portid) /** SWITCH CASE ON THE PORT ID */
 394:	81 30       	cpi	r24, 0x01	; 1
 396:	91 f0       	breq	.+36     	; 0x3bc <DIO_setpindir+0xaa>
 398:	28 f0       	brcs	.+10     	; 0x3a4 <DIO_setpindir+0x92>
 39a:	82 30       	cpi	r24, 0x02	; 2
 39c:	d9 f0       	breq	.+54     	; 0x3d4 <DIO_setpindir+0xc2>
 39e:	83 30       	cpi	r24, 0x03	; 3
 3a0:	29 f1       	breq	.+74     	; 0x3ec <DIO_setpindir+0xda>
 3a2:	34 c0       	rjmp	.+104    	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
		{
			case DIO_PORTA:
			set_bit(DDRA , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
 3a4:	2a b3       	in	r18, 0x1a	; 26
 3a6:	81 e0       	ldi	r24, 0x01	; 1
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	02 c0       	rjmp	.+4      	; 0x3b0 <DIO_setpindir+0x9e>
 3ac:	88 0f       	add	r24, r24
 3ae:	99 1f       	adc	r25, r25
 3b0:	6a 95       	dec	r22
 3b2:	e2 f7       	brpl	.-8      	; 0x3ac <DIO_setpindir+0x9a>
 3b4:	82 2b       	or	r24, r18
 3b6:	8a bb       	out	0x1a, r24	; 26
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
 3b8:	80 e0       	ldi	r24, 0x00	; 0
		
		switch(u8_a_portid) /** SWITCH CASE ON THE PORT ID */
		{
			case DIO_PORTA:
			set_bit(DDRA , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
 3ba:	08 95       	ret
			
			case DIO_PORTB:
			set_bit(DDRB , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
 3bc:	27 b3       	in	r18, 0x17	; 23
 3be:	81 e0       	ldi	r24, 0x01	; 1
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	02 c0       	rjmp	.+4      	; 0x3c8 <DIO_setpindir+0xb6>
 3c4:	88 0f       	add	r24, r24
 3c6:	99 1f       	adc	r25, r25
 3c8:	6a 95       	dec	r22
 3ca:	e2 f7       	brpl	.-8      	; 0x3c4 <DIO_setpindir+0xb2>
 3cc:	82 2b       	or	r24, r18
 3ce:	87 bb       	out	0x17, r24	; 23
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
 3d0:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(DDRA , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
			
			case DIO_PORTB:
			set_bit(DDRB , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
 3d2:	08 95       	ret
			
			case DIO_PORTC:
			set_bit(DDRC , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
 3d4:	24 b3       	in	r18, 0x14	; 20
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	02 c0       	rjmp	.+4      	; 0x3e0 <DIO_setpindir+0xce>
 3dc:	88 0f       	add	r24, r24
 3de:	99 1f       	adc	r25, r25
 3e0:	6a 95       	dec	r22
 3e2:	e2 f7       	brpl	.-8      	; 0x3dc <DIO_setpindir+0xca>
 3e4:	82 2b       	or	r24, r18
 3e6:	84 bb       	out	0x14, r24	; 20
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
 3e8:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(DDRB , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
			
			case DIO_PORTC:
			set_bit(DDRC , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
 3ea:	08 95       	ret
			
			case DIO_PORTD:
			set_bit(DDRD , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
 3ec:	21 b3       	in	r18, 0x11	; 17
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <DIO_setpindir+0xe6>
 3f4:	88 0f       	add	r24, r24
 3f6:	99 1f       	adc	r25, r25
 3f8:	6a 95       	dec	r22
 3fa:	e2 f7       	brpl	.-8      	; 0x3f4 <DIO_setpindir+0xe2>
 3fc:	82 2b       	or	r24, r18
 3fe:	81 bb       	out	0x11, r24	; 17
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
 400:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(DDRC , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
			
			case DIO_PORTD:
			set_bit(DDRD , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
 402:	08 95       	ret
		} 
		break;
		 
		 
		default:  /** DIRECTION ISN'T INPUT OR OUTPUT */
		en_a_dirstate = NOT_VALID_DIRECTION ; /** RETURN AS DIR NOT VALID ERRORS **/
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	08 95       	ret
			case DIO_PORTD:
			clear_bit(DDRD , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTD AS INPUT PIN **/
			break;
			
			default: /** DO NOTHING **/
			en_a_dirstate = NOT_VALID_DIRECTION ; /** RETURN AS DIR NOT VALID ERRORS **/
 408:	81 e0       	ldi	r24, 0x01	; 1
 40a:	08 95       	ret
			case DIO_PORTD:
			set_bit(DDRD , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
			
			default:  /** DO NOTHING **/
			en_a_dirstate = NOT_VALID_DIRECTION ; /** RETURN AS DIR NOT VALID ERRORS **/
 40c:	81 e0       	ldi	r24, 0x01	; 1
		en_a_dirstate = NOT_VALID_DIRECTION ; /** RETURN AS DIR NOT VALID ERRORS **/
		break ; 
	} 
	
	return en_a_dirstate ; /** RETURN THE STATE OF FUNCTION **/
}
 40e:	08 95       	ret

00000410 <DIO_setpinvalue>:
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
	
	switch(u8_a_pinval)
 410:	44 23       	and	r20, r20
 412:	19 f0       	breq	.+6      	; 0x41a <DIO_setpinvalue+0xa>
 414:	41 30       	cpi	r20, 0x01	; 1
 416:	e9 f1       	breq	.+122    	; 0x492 <DIO_setpinvalue+0x82>
 418:	74 c0       	rjmp	.+232    	; 0x502 <DIO_setpinvalue+0xf2>
	{
		case DIO_PIN_LOW:  /** IN CASE PIN VALUE IS LOW */
		
		switch(u8_a_portid)  /** SWITCH CASE ON THE PORT ID */ 
 41a:	81 30       	cpi	r24, 0x01	; 1
 41c:	99 f0       	breq	.+38     	; 0x444 <DIO_setpinvalue+0x34>
 41e:	28 f0       	brcs	.+10     	; 0x42a <DIO_setpinvalue+0x1a>
 420:	82 30       	cpi	r24, 0x02	; 2
 422:	e9 f0       	breq	.+58     	; 0x45e <DIO_setpinvalue+0x4e>
 424:	83 30       	cpi	r24, 0x03	; 3
 426:	41 f1       	breq	.+80     	; 0x478 <DIO_setpinvalue+0x68>
 428:	6e c0       	rjmp	.+220    	; 0x506 <DIO_setpinvalue+0xf6>
		{
			case DIO_PORTA:
			clear_bit(PORTA , u8_a_pinid);       /** SET THIS PIN AS LOW **/
 42a:	2b b3       	in	r18, 0x1b	; 27
 42c:	81 e0       	ldi	r24, 0x01	; 1
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	02 c0       	rjmp	.+4      	; 0x436 <DIO_setpinvalue+0x26>
 432:	88 0f       	add	r24, r24
 434:	99 1f       	adc	r25, r25
 436:	6a 95       	dec	r22
 438:	e2 f7       	brpl	.-8      	; 0x432 <DIO_setpinvalue+0x22>
 43a:	80 95       	com	r24
 43c:	82 23       	and	r24, r18
 43e:	8b bb       	out	0x1b, r24	; 27
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
 440:	80 e0       	ldi	r24, 0x00	; 0
		
		switch(u8_a_portid)  /** SWITCH CASE ON THE PORT ID */ 
		{
			case DIO_PORTA:
			clear_bit(PORTA , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
 442:	08 95       	ret
			
			case DIO_PORTB:
			clear_bit(PORTB , u8_a_pinid);       /** SET THIS PIN AS LOW **/
 444:	28 b3       	in	r18, 0x18	; 24
 446:	81 e0       	ldi	r24, 0x01	; 1
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	02 c0       	rjmp	.+4      	; 0x450 <DIO_setpinvalue+0x40>
 44c:	88 0f       	add	r24, r24
 44e:	99 1f       	adc	r25, r25
 450:	6a 95       	dec	r22
 452:	e2 f7       	brpl	.-8      	; 0x44c <DIO_setpinvalue+0x3c>
 454:	80 95       	com	r24
 456:	82 23       	and	r24, r18
 458:	88 bb       	out	0x18, r24	; 24
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
 45a:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(PORTA , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
			
			case DIO_PORTB:
			clear_bit(PORTB , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
 45c:	08 95       	ret
			
			case DIO_PORTC:
			clear_bit(PORTC , u8_a_pinid);       /** SET THIS PIN AS LOW **/
 45e:	25 b3       	in	r18, 0x15	; 21
 460:	81 e0       	ldi	r24, 0x01	; 1
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	02 c0       	rjmp	.+4      	; 0x46a <DIO_setpinvalue+0x5a>
 466:	88 0f       	add	r24, r24
 468:	99 1f       	adc	r25, r25
 46a:	6a 95       	dec	r22
 46c:	e2 f7       	brpl	.-8      	; 0x466 <DIO_setpinvalue+0x56>
 46e:	80 95       	com	r24
 470:	82 23       	and	r24, r18
 472:	85 bb       	out	0x15, r24	; 21
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
 474:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(PORTB , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
			
			case DIO_PORTC:
			clear_bit(PORTC , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
 476:	08 95       	ret
			
			case DIO_PORTD:
			clear_bit(PORTD , u8_a_pinid);       /** SET THIS PIN AS LOW **/
 478:	22 b3       	in	r18, 0x12	; 18
 47a:	81 e0       	ldi	r24, 0x01	; 1
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	02 c0       	rjmp	.+4      	; 0x484 <DIO_setpinvalue+0x74>
 480:	88 0f       	add	r24, r24
 482:	99 1f       	adc	r25, r25
 484:	6a 95       	dec	r22
 486:	e2 f7       	brpl	.-8      	; 0x480 <DIO_setpinvalue+0x70>
 488:	80 95       	com	r24
 48a:	82 23       	and	r24, r18
 48c:	82 bb       	out	0x12, r24	; 18
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
 48e:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(PORTC , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
			
			case DIO_PORTD:
			clear_bit(PORTD , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
 490:	08 95       	ret
		} 
		break;
		
		case DIO_PIN_HIGH:
		
		switch(u8_a_portid)
 492:	81 30       	cpi	r24, 0x01	; 1
 494:	91 f0       	breq	.+36     	; 0x4ba <DIO_setpinvalue+0xaa>
 496:	28 f0       	brcs	.+10     	; 0x4a2 <DIO_setpinvalue+0x92>
 498:	82 30       	cpi	r24, 0x02	; 2
 49a:	d9 f0       	breq	.+54     	; 0x4d2 <DIO_setpinvalue+0xc2>
 49c:	83 30       	cpi	r24, 0x03	; 3
 49e:	29 f1       	breq	.+74     	; 0x4ea <DIO_setpinvalue+0xda>
 4a0:	34 c0       	rjmp	.+104    	; 0x50a <DIO_setpinvalue+0xfa>
		{
			case DIO_PORTA:
			set_bit(PORTA , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
 4a2:	2b b3       	in	r18, 0x1b	; 27
 4a4:	81 e0       	ldi	r24, 0x01	; 1
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	02 c0       	rjmp	.+4      	; 0x4ae <DIO_setpinvalue+0x9e>
 4aa:	88 0f       	add	r24, r24
 4ac:	99 1f       	adc	r25, r25
 4ae:	6a 95       	dec	r22
 4b0:	e2 f7       	brpl	.-8      	; 0x4aa <DIO_setpinvalue+0x9a>
 4b2:	82 2b       	or	r24, r18
 4b4:	8b bb       	out	0x1b, r24	; 27
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
 4b6:	80 e0       	ldi	r24, 0x00	; 0
		
		switch(u8_a_portid)
		{
			case DIO_PORTA:
			set_bit(PORTA , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
 4b8:	08 95       	ret
			
			case DIO_PORTB:
			set_bit(PORTB , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
 4ba:	28 b3       	in	r18, 0x18	; 24
 4bc:	81 e0       	ldi	r24, 0x01	; 1
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	02 c0       	rjmp	.+4      	; 0x4c6 <DIO_setpinvalue+0xb6>
 4c2:	88 0f       	add	r24, r24
 4c4:	99 1f       	adc	r25, r25
 4c6:	6a 95       	dec	r22
 4c8:	e2 f7       	brpl	.-8      	; 0x4c2 <DIO_setpinvalue+0xb2>
 4ca:	82 2b       	or	r24, r18
 4cc:	88 bb       	out	0x18, r24	; 24
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
 4ce:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(PORTA , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
			
			case DIO_PORTB:
			set_bit(PORTB , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
 4d0:	08 95       	ret
			
			case DIO_PORTC:
			set_bit(PORTC , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
 4d2:	25 b3       	in	r18, 0x15	; 21
 4d4:	81 e0       	ldi	r24, 0x01	; 1
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	02 c0       	rjmp	.+4      	; 0x4de <DIO_setpinvalue+0xce>
 4da:	88 0f       	add	r24, r24
 4dc:	99 1f       	adc	r25, r25
 4de:	6a 95       	dec	r22
 4e0:	e2 f7       	brpl	.-8      	; 0x4da <DIO_setpinvalue+0xca>
 4e2:	82 2b       	or	r24, r18
 4e4:	85 bb       	out	0x15, r24	; 21
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
 4e6:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(PORTB , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
			
			case DIO_PORTC:
			set_bit(PORTC , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
 4e8:	08 95       	ret
			
			case DIO_PORTD:
			set_bit(PORTD , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
 4ea:	22 b3       	in	r18, 0x12	; 18
 4ec:	81 e0       	ldi	r24, 0x01	; 1
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	02 c0       	rjmp	.+4      	; 0x4f6 <DIO_setpinvalue+0xe6>
 4f2:	88 0f       	add	r24, r24
 4f4:	99 1f       	adc	r25, r25
 4f6:	6a 95       	dec	r22
 4f8:	e2 f7       	brpl	.-8      	; 0x4f2 <DIO_setpinvalue+0xe2>
 4fa:	82 2b       	or	r24, r18
 4fc:	82 bb       	out	0x12, r24	; 18
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
 4fe:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(PORTC , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
			
			case DIO_PORTD:
			set_bit(PORTD , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
 500:	08 95       	ret
			break;
		} 
		break;
		
		default :
		en_a_valstate = NOT_VALID_VALUE ;  /** RETURN VALUE AS NOT VALID **/
 502:	81 e0       	ldi	r24, 0x01	; 1
 504:	08 95       	ret
			case DIO_PORTD:
			clear_bit(PORTD , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
			
			default:
			en_a_valstate = NOT_VALID_VALUE ;  /** RETURN VALUE AS NOT VALID **/
 506:	81 e0       	ldi	r24, 0x01	; 1
 508:	08 95       	ret
			case DIO_PORTD:
			set_bit(PORTD , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
			
			default:
			en_a_valstate = NOT_VALID_VALUE ;  /** RETURN VALUE AS NOT VALID **/
 50a:	81 e0       	ldi	r24, 0x01	; 1
		en_a_valstate = NOT_VALID_VALUE ;  /** RETURN VALUE AS NOT VALID **/
		break ;
	} 
	
	return en_a_valstate ; /** RETURN THE FINAL STATE OF THE FUNCTION */
}
 50c:	08 95       	ret

0000050e <SPI_initslave>:
	{
		SPI_sendbyte(u8_a_str[u8_L_counter]); /** SEND CHARACTER **/
		
		u8_L_counter++; /* MOVE TO THE SECOND LETTER */
	}
}
 50e:	40 e0       	ldi	r20, 0x00	; 0
 510:	64 e0       	ldi	r22, 0x04	; 4
 512:	81 e0       	ldi	r24, 0x01	; 1
 514:	0e 94 89 01 	call	0x312	; 0x312 <DIO_setpindir>
 518:	40 e0       	ldi	r20, 0x00	; 0
 51a:	65 e0       	ldi	r22, 0x05	; 5
 51c:	81 e0       	ldi	r24, 0x01	; 1
 51e:	0e 94 89 01 	call	0x312	; 0x312 <DIO_setpindir>
 522:	41 e0       	ldi	r20, 0x01	; 1
 524:	66 e0       	ldi	r22, 0x06	; 6
 526:	81 e0       	ldi	r24, 0x01	; 1
 528:	0e 94 89 01 	call	0x312	; 0x312 <DIO_setpindir>
 52c:	40 e0       	ldi	r20, 0x00	; 0
 52e:	67 e0       	ldi	r22, 0x07	; 7
 530:	81 e0       	ldi	r24, 0x01	; 1
 532:	0e 94 89 01 	call	0x312	; 0x312 <DIO_setpindir>
 536:	8d b1       	in	r24, 0x0d	; 13
 538:	80 64       	ori	r24, 0x40	; 64
 53a:	8d b9       	out	0x0d, r24	; 13
 53c:	8d b1       	in	r24, 0x0d	; 13
 53e:	8f 7e       	andi	r24, 0xEF	; 239
 540:	8d b9       	out	0x0d, r24	; 13
 542:	8d b1       	in	r24, 0x0d	; 13
 544:	87 7f       	andi	r24, 0xF7	; 247
 546:	8d b9       	out	0x0d, r24	; 13
 548:	8d b1       	in	r24, 0x0d	; 13
 54a:	8b 7f       	andi	r24, 0xFB	; 251
 54c:	8d b9       	out	0x0d, r24	; 13
 54e:	08 95       	ret

00000550 <SPI_receivebyte>:
 550:	77 9b       	sbis	0x0e, 7	; 14
 552:	fe cf       	rjmp	.-4      	; 0x550 <SPI_receivebyte>
 554:	2f b1       	in	r18, 0x0f	; 15
 556:	fc 01       	movw	r30, r24
 558:	20 83       	st	Z, r18
 55a:	08 95       	ret

0000055c <SPI_receivestring>:
/** FUNCTION FOR MASTER TO SEND STRING                          **/
/** ARGUMENTS  : u8_a_str (string)                              **/
/** RETURNS    : en_a_spierrstatus                              **/
/*****************************************************************/
en_a_spierrstatus SPI_receivestring(uint8_t * u8_a_str)
{
 55c:	0f 93       	push	r16
 55e:	1f 93       	push	r17
 560:	cf 93       	push	r28
 562:	8c 01       	movw	r16, r24
	uint8_t u8_L_counter = 0 ; /** COUNTER FOR STRING LETTERS **/
 564:	c0 e0       	ldi	r28, 0x00	; 0
	
	//str[counter] = SPI_RECEIVE_BYTE();
	
	while (u8_a_str[u8_L_counter] != '\0')
 566:	03 c0       	rjmp	.+6      	; 0x56e <SPI_receivestring+0x12>
	{
		SPI_receivebyte(&u8_a_str[u8_L_counter]); /** RECEIVE CHARACTER **/
 568:	0e 94 a8 02 	call	0x550	; 0x550 <SPI_receivebyte>
		
		u8_L_counter++ ; /* MOVE TO THE SECOND LETTER */
 56c:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t u8_L_counter = 0 ; /** COUNTER FOR STRING LETTERS **/
	
	//str[counter] = SPI_RECEIVE_BYTE();
	
	while (u8_a_str[u8_L_counter] != '\0')
 56e:	c8 01       	movw	r24, r16
 570:	8c 0f       	add	r24, r28
 572:	91 1d       	adc	r25, r1
 574:	fc 01       	movw	r30, r24
 576:	20 81       	ld	r18, Z
 578:	21 11       	cpse	r18, r1
 57a:	f6 cf       	rjmp	.-20     	; 0x568 <SPI_receivestring+0xc>
		
		u8_L_counter++ ; /* MOVE TO THE SECOND LETTER */
	}
	
	
	u8_a_str[u8_L_counter] = '\0' ; /* TERMINATOR OF STRING */
 57c:	10 82       	st	Z, r1
}
 57e:	cf 91       	pop	r28
 580:	1f 91       	pop	r17
 582:	0f 91       	pop	r16
 584:	08 95       	ret

00000586 <TMR0_init>:
	 /* TIMER MODE OF TMR0 */
	#elif TIMER0_CLK_SRC == INTERNAL_CLK_SRC
	
	 #if TIMER0_MODE == TMR0_NORMAL_MODE
	 
	 clear_bit(TCCR0 , 7);
 586:	83 b7       	in	r24, 0x33	; 51
 588:	8f 77       	andi	r24, 0x7F	; 127
 58a:	83 bf       	out	0x33, r24	; 51
	 clear_bit(TCCR0 , 6);
 58c:	83 b7       	in	r24, 0x33	; 51
 58e:	8f 7b       	andi	r24, 0xBF	; 191
 590:	83 bf       	out	0x33, r24	; 51
	 clear_bit(TCCR0 , 3);
 592:	83 b7       	in	r24, 0x33	; 51
 594:	87 7f       	andi	r24, 0xF7	; 247
 596:	83 bf       	out	0x33, r24	; 51
	 clear_bit(TCCR0 , 4);
 598:	83 b7       	in	r24, 0x33	; 51
 59a:	8f 7e       	andi	r24, 0xEF	; 239
 59c:	83 bf       	out	0x33, r24	; 51
	 clear_bit(TCCR0 , 5);
 59e:	83 b7       	in	r24, 0x33	; 51
 5a0:	8f 7d       	andi	r24, 0xDF	; 223
 5a2:	83 bf       	out	0x33, r24	; 51
	  #endif
	 #endif
	#endif
	
	return en_a_initstatus ; /** RETURN THE STATUS OF INITIALIZATION **/
}
 5a4:	80 e0       	ldi	r24, 0x00	; 0
 5a6:	08 95       	ret

000005a8 <TMR0_start>:
{
	TMR0_start_error en_a_startstatus = VALID_START ; /** VARIABLE TO RETURN THE STATUS OF START **/
	
	#if TIMER0_PRESCALER_VAL == PRESCALER_1024
	
	set_bit(TCCR0 , 0);
 5a8:	83 b7       	in	r24, 0x33	; 51
 5aa:	81 60       	ori	r24, 0x01	; 1
 5ac:	83 bf       	out	0x33, r24	; 51
	clear_bit(TCCR0 , 1);
 5ae:	83 b7       	in	r24, 0x33	; 51
 5b0:	8d 7f       	andi	r24, 0xFD	; 253
 5b2:	83 bf       	out	0x33, r24	; 51
	set_bit(TCCR0 , 2);
 5b4:	83 b7       	in	r24, 0x33	; 51
 5b6:	84 60       	ori	r24, 0x04	; 4
 5b8:	83 bf       	out	0x33, r24	; 51
	en_a_startstatus = VALID_START ; /** START DONE PROBERLY **/
	
	#endif
	
	return en_a_startstatus ; /** RETURN THE STATUS **/
}
 5ba:	80 e0       	ldi	r24, 0x00	; 0
 5bc:	08 95       	ret

000005be <TMR0_stop>:
TMR0_stop_error TMR0_stop(void)
{
	TMR0_stop_error en_a_stopStatus = VALID_STOP ; /** VARIABLE TO RETURN THE STATUS **/
	
	/** SET CONFIGURATIONS AS NO CLOCK SOURCE **/
	clear_bit(TCCR0 , 0);
 5be:	83 b7       	in	r24, 0x33	; 51
 5c0:	8e 7f       	andi	r24, 0xFE	; 254
 5c2:	83 bf       	out	0x33, r24	; 51
	clear_bit(TCCR0 , 1);
 5c4:	83 b7       	in	r24, 0x33	; 51
 5c6:	8d 7f       	andi	r24, 0xFD	; 253
 5c8:	83 bf       	out	0x33, r24	; 51
	clear_bit(TCCR0 , 2);
 5ca:	83 b7       	in	r24, 0x33	; 51
 5cc:	8b 7f       	andi	r24, 0xFB	; 251
 5ce:	83 bf       	out	0x33, r24	; 51
	
	en_a_stopStatus = VALID_STOP ; /** STOP DONE PROPERLY **/
	
	return en_a_stopStatus ; /** RETURN THE STATUS **/
	
}
 5d0:	80 e0       	ldi	r24, 0x00	; 0
 5d2:	08 95       	ret

000005d4 <TMR0_delayms>:
	/******************************************************************************************/
	/**               THIS CALCULATIONS CONFIGURED AS F_CPU   16 MHZ                         **/
	/******************************************************************************************/
	#if TIMER0_PRESCALER_VAL == PRESCALER_1024  /** CHECK THE PRESCALLER FROM CONFIG FILE **/
	 
        u32_gs_tmr0nuofovs = (u32_a_delayms / 16.384);   /** CALCULATING NUMBER OF OVERFLOWS ( DESIRED DELAY / TIME OF OVER FLOW ) **/ 
 5d4:	0e 94 c7 03 	call	0x78e	; 0x78e <__floatunsisf>
 5d8:	2f e6       	ldi	r18, 0x6F	; 111
 5da:	32 e1       	ldi	r19, 0x12	; 18
 5dc:	43 e8       	ldi	r20, 0x83	; 131
 5de:	51 e4       	ldi	r21, 0x41	; 65
 5e0:	0e 94 26 03 	call	0x64c	; 0x64c <__divsf3>
 5e4:	0e 94 98 03 	call	0x730	; 0x730 <__fixunssfsi>
 5e8:	60 93 80 00 	sts	0x0080, r22	; 0x800080 <__data_end>
 5ec:	70 93 81 00 	sts	0x0081, r23	; 0x800081 <__data_end+0x1>
 5f0:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <__data_end+0x2>
 5f4:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <__data_end+0x3>
	
        TCNT0 = 0 ;   /** SET THE INITIAL VALUE IN TCNT0 REGISTER **/
 5f8:	12 be       	out	0x32, r1	; 50
	
	    en_a_delaystatus = VALID_DELAY ; /** VALID DELAY CONFIGURATIN **/
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
 5fa:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <TMR0_start>
/** RETURNS    : TMR0_delay                                                    */
/*******************************************************************************/
TMR0_delay_error TMR0_delayms(uint32_t u32_a_delayms)
{
	
	uint32_t u32_a_overflowcounter = 0 ;
 5fe:	40 e0       	ldi	r20, 0x00	; 0
 600:	50 e0       	ldi	r21, 0x00	; 0
 602:	ba 01       	movw	r22, r20
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
	
	while ( u32_a_overflowcounter < u32_gs_tmr0nuofovs ) /** STUCK IN THIS LOOP UNTILL THIS CONDITION IS FALSE **/
 604:	0a c0       	rjmp	.+20     	; 0x61a <TMR0_delayms+0x46>
	{
		while((TIFR & (1 << 0)) == 0); /** DO NOTHING UNTILL THIS FLAG RAISED (OVERFLOW HAPPENED) **/
 606:	08 b6       	in	r0, 0x38	; 56
 608:	00 fe       	sbrs	r0, 0
 60a:	fd cf       	rjmp	.-6      	; 0x606 <TMR0_delayms+0x32>
		
		set_bit(TIFR , 0);        /** CLEAR THE FLAG BY SOFTWARE **/
 60c:	88 b7       	in	r24, 0x38	; 56
 60e:	81 60       	ori	r24, 0x01	; 1
 610:	88 bf       	out	0x38, r24	; 56
		
		u32_a_overflowcounter++ ; /** INCREASE THE OVERFLOWS BY ONE **/
 612:	4f 5f       	subi	r20, 0xFF	; 255
 614:	5f 4f       	sbci	r21, 0xFF	; 255
 616:	6f 4f       	sbci	r22, 0xFF	; 255
 618:	7f 4f       	sbci	r23, 0xFF	; 255
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
	
	while ( u32_a_overflowcounter < u32_gs_tmr0nuofovs ) /** STUCK IN THIS LOOP UNTILL THIS CONDITION IS FALSE **/
 61a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__data_end>
 61e:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <__data_end+0x1>
 622:	a0 91 82 00 	lds	r26, 0x0082	; 0x800082 <__data_end+0x2>
 626:	b0 91 83 00 	lds	r27, 0x0083	; 0x800083 <__data_end+0x3>
 62a:	48 17       	cp	r20, r24
 62c:	59 07       	cpc	r21, r25
 62e:	6a 07       	cpc	r22, r26
 630:	7b 07       	cpc	r23, r27
 632:	48 f3       	brcs	.-46     	; 0x606 <TMR0_delayms+0x32>
		set_bit(TIFR , 0);        /** CLEAR THE FLAG BY SOFTWARE **/
		
		u32_a_overflowcounter++ ; /** INCREASE THE OVERFLOWS BY ONE **/
	}
	
	u32_gs_tmr0nuofovs = 0 ; /** REINTIALIZE THE OVERFLOWS COUNTER TO 0 AGAIN **/
 634:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__data_end>
 638:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__data_end+0x1>
 63c:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__data_end+0x2>
 640:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <__data_end+0x3>

	TMR0_stop();   /** STOP TMR0 TOSTART FROM 0 WHEN IT CALLED AGAIN **/
 644:	0e 94 df 02 	call	0x5be	; 0x5be <TMR0_stop>
	
	return en_a_delaystatus ; /** RETURN THE STATUS **/
}
 648:	80 e0       	ldi	r24, 0x00	; 0
 64a:	08 95       	ret

0000064c <__divsf3>:
 64c:	0e 94 3a 03 	call	0x674	; 0x674 <__divsf3x>
 650:	0c 94 1b 04 	jmp	0x836	; 0x836 <__fp_round>
 654:	0e 94 14 04 	call	0x828	; 0x828 <__fp_pscB>
 658:	58 f0       	brcs	.+22     	; 0x670 <__divsf3+0x24>
 65a:	0e 94 0d 04 	call	0x81a	; 0x81a <__fp_pscA>
 65e:	40 f0       	brcs	.+16     	; 0x670 <__divsf3+0x24>
 660:	29 f4       	brne	.+10     	; 0x66c <__divsf3+0x20>
 662:	5f 3f       	cpi	r21, 0xFF	; 255
 664:	29 f0       	breq	.+10     	; 0x670 <__divsf3+0x24>
 666:	0c 94 04 04 	jmp	0x808	; 0x808 <__fp_inf>
 66a:	51 11       	cpse	r21, r1
 66c:	0c 94 4f 04 	jmp	0x89e	; 0x89e <__fp_szero>
 670:	0c 94 0a 04 	jmp	0x814	; 0x814 <__fp_nan>

00000674 <__divsf3x>:
 674:	0e 94 2c 04 	call	0x858	; 0x858 <__fp_split3>
 678:	68 f3       	brcs	.-38     	; 0x654 <__divsf3+0x8>

0000067a <__divsf3_pse>:
 67a:	99 23       	and	r25, r25
 67c:	b1 f3       	breq	.-20     	; 0x66a <__divsf3+0x1e>
 67e:	55 23       	and	r21, r21
 680:	91 f3       	breq	.-28     	; 0x666 <__divsf3+0x1a>
 682:	95 1b       	sub	r25, r21
 684:	55 0b       	sbc	r21, r21
 686:	bb 27       	eor	r27, r27
 688:	aa 27       	eor	r26, r26
 68a:	62 17       	cp	r22, r18
 68c:	73 07       	cpc	r23, r19
 68e:	84 07       	cpc	r24, r20
 690:	38 f0       	brcs	.+14     	; 0x6a0 <__divsf3_pse+0x26>
 692:	9f 5f       	subi	r25, 0xFF	; 255
 694:	5f 4f       	sbci	r21, 0xFF	; 255
 696:	22 0f       	add	r18, r18
 698:	33 1f       	adc	r19, r19
 69a:	44 1f       	adc	r20, r20
 69c:	aa 1f       	adc	r26, r26
 69e:	a9 f3       	breq	.-22     	; 0x68a <__divsf3_pse+0x10>
 6a0:	35 d0       	rcall	.+106    	; 0x70c <__divsf3_pse+0x92>
 6a2:	0e 2e       	mov	r0, r30
 6a4:	3a f0       	brmi	.+14     	; 0x6b4 <__divsf3_pse+0x3a>
 6a6:	e0 e8       	ldi	r30, 0x80	; 128
 6a8:	32 d0       	rcall	.+100    	; 0x70e <__divsf3_pse+0x94>
 6aa:	91 50       	subi	r25, 0x01	; 1
 6ac:	50 40       	sbci	r21, 0x00	; 0
 6ae:	e6 95       	lsr	r30
 6b0:	00 1c       	adc	r0, r0
 6b2:	ca f7       	brpl	.-14     	; 0x6a6 <__divsf3_pse+0x2c>
 6b4:	2b d0       	rcall	.+86     	; 0x70c <__divsf3_pse+0x92>
 6b6:	fe 2f       	mov	r31, r30
 6b8:	29 d0       	rcall	.+82     	; 0x70c <__divsf3_pse+0x92>
 6ba:	66 0f       	add	r22, r22
 6bc:	77 1f       	adc	r23, r23
 6be:	88 1f       	adc	r24, r24
 6c0:	bb 1f       	adc	r27, r27
 6c2:	26 17       	cp	r18, r22
 6c4:	37 07       	cpc	r19, r23
 6c6:	48 07       	cpc	r20, r24
 6c8:	ab 07       	cpc	r26, r27
 6ca:	b0 e8       	ldi	r27, 0x80	; 128
 6cc:	09 f0       	breq	.+2      	; 0x6d0 <__divsf3_pse+0x56>
 6ce:	bb 0b       	sbc	r27, r27
 6d0:	80 2d       	mov	r24, r0
 6d2:	bf 01       	movw	r22, r30
 6d4:	ff 27       	eor	r31, r31
 6d6:	93 58       	subi	r25, 0x83	; 131
 6d8:	5f 4f       	sbci	r21, 0xFF	; 255
 6da:	3a f0       	brmi	.+14     	; 0x6ea <__divsf3_pse+0x70>
 6dc:	9e 3f       	cpi	r25, 0xFE	; 254
 6de:	51 05       	cpc	r21, r1
 6e0:	78 f0       	brcs	.+30     	; 0x700 <__divsf3_pse+0x86>
 6e2:	0c 94 04 04 	jmp	0x808	; 0x808 <__fp_inf>
 6e6:	0c 94 4f 04 	jmp	0x89e	; 0x89e <__fp_szero>
 6ea:	5f 3f       	cpi	r21, 0xFF	; 255
 6ec:	e4 f3       	brlt	.-8      	; 0x6e6 <__divsf3_pse+0x6c>
 6ee:	98 3e       	cpi	r25, 0xE8	; 232
 6f0:	d4 f3       	brlt	.-12     	; 0x6e6 <__divsf3_pse+0x6c>
 6f2:	86 95       	lsr	r24
 6f4:	77 95       	ror	r23
 6f6:	67 95       	ror	r22
 6f8:	b7 95       	ror	r27
 6fa:	f7 95       	ror	r31
 6fc:	9f 5f       	subi	r25, 0xFF	; 255
 6fe:	c9 f7       	brne	.-14     	; 0x6f2 <__divsf3_pse+0x78>
 700:	88 0f       	add	r24, r24
 702:	91 1d       	adc	r25, r1
 704:	96 95       	lsr	r25
 706:	87 95       	ror	r24
 708:	97 f9       	bld	r25, 7
 70a:	08 95       	ret
 70c:	e1 e0       	ldi	r30, 0x01	; 1
 70e:	66 0f       	add	r22, r22
 710:	77 1f       	adc	r23, r23
 712:	88 1f       	adc	r24, r24
 714:	bb 1f       	adc	r27, r27
 716:	62 17       	cp	r22, r18
 718:	73 07       	cpc	r23, r19
 71a:	84 07       	cpc	r24, r20
 71c:	ba 07       	cpc	r27, r26
 71e:	20 f0       	brcs	.+8      	; 0x728 <__divsf3_pse+0xae>
 720:	62 1b       	sub	r22, r18
 722:	73 0b       	sbc	r23, r19
 724:	84 0b       	sbc	r24, r20
 726:	ba 0b       	sbc	r27, r26
 728:	ee 1f       	adc	r30, r30
 72a:	88 f7       	brcc	.-30     	; 0x70e <__divsf3_pse+0x94>
 72c:	e0 95       	com	r30
 72e:	08 95       	ret

00000730 <__fixunssfsi>:
 730:	0e 94 34 04 	call	0x868	; 0x868 <__fp_splitA>
 734:	88 f0       	brcs	.+34     	; 0x758 <__fixunssfsi+0x28>
 736:	9f 57       	subi	r25, 0x7F	; 127
 738:	98 f0       	brcs	.+38     	; 0x760 <__fixunssfsi+0x30>
 73a:	b9 2f       	mov	r27, r25
 73c:	99 27       	eor	r25, r25
 73e:	b7 51       	subi	r27, 0x17	; 23
 740:	b0 f0       	brcs	.+44     	; 0x76e <__fixunssfsi+0x3e>
 742:	e1 f0       	breq	.+56     	; 0x77c <__fixunssfsi+0x4c>
 744:	66 0f       	add	r22, r22
 746:	77 1f       	adc	r23, r23
 748:	88 1f       	adc	r24, r24
 74a:	99 1f       	adc	r25, r25
 74c:	1a f0       	brmi	.+6      	; 0x754 <__fixunssfsi+0x24>
 74e:	ba 95       	dec	r27
 750:	c9 f7       	brne	.-14     	; 0x744 <__fixunssfsi+0x14>
 752:	14 c0       	rjmp	.+40     	; 0x77c <__fixunssfsi+0x4c>
 754:	b1 30       	cpi	r27, 0x01	; 1
 756:	91 f0       	breq	.+36     	; 0x77c <__fixunssfsi+0x4c>
 758:	0e 94 4e 04 	call	0x89c	; 0x89c <__fp_zero>
 75c:	b1 e0       	ldi	r27, 0x01	; 1
 75e:	08 95       	ret
 760:	0c 94 4e 04 	jmp	0x89c	; 0x89c <__fp_zero>
 764:	67 2f       	mov	r22, r23
 766:	78 2f       	mov	r23, r24
 768:	88 27       	eor	r24, r24
 76a:	b8 5f       	subi	r27, 0xF8	; 248
 76c:	39 f0       	breq	.+14     	; 0x77c <__fixunssfsi+0x4c>
 76e:	b9 3f       	cpi	r27, 0xF9	; 249
 770:	cc f3       	brlt	.-14     	; 0x764 <__fixunssfsi+0x34>
 772:	86 95       	lsr	r24
 774:	77 95       	ror	r23
 776:	67 95       	ror	r22
 778:	b3 95       	inc	r27
 77a:	d9 f7       	brne	.-10     	; 0x772 <__fixunssfsi+0x42>
 77c:	3e f4       	brtc	.+14     	; 0x78c <__fixunssfsi+0x5c>
 77e:	90 95       	com	r25
 780:	80 95       	com	r24
 782:	70 95       	com	r23
 784:	61 95       	neg	r22
 786:	7f 4f       	sbci	r23, 0xFF	; 255
 788:	8f 4f       	sbci	r24, 0xFF	; 255
 78a:	9f 4f       	sbci	r25, 0xFF	; 255
 78c:	08 95       	ret

0000078e <__floatunsisf>:
 78e:	e8 94       	clt
 790:	09 c0       	rjmp	.+18     	; 0x7a4 <__floatsisf+0x12>

00000792 <__floatsisf>:
 792:	97 fb       	bst	r25, 7
 794:	3e f4       	brtc	.+14     	; 0x7a4 <__floatsisf+0x12>
 796:	90 95       	com	r25
 798:	80 95       	com	r24
 79a:	70 95       	com	r23
 79c:	61 95       	neg	r22
 79e:	7f 4f       	sbci	r23, 0xFF	; 255
 7a0:	8f 4f       	sbci	r24, 0xFF	; 255
 7a2:	9f 4f       	sbci	r25, 0xFF	; 255
 7a4:	99 23       	and	r25, r25
 7a6:	a9 f0       	breq	.+42     	; 0x7d2 <__floatsisf+0x40>
 7a8:	f9 2f       	mov	r31, r25
 7aa:	96 e9       	ldi	r25, 0x96	; 150
 7ac:	bb 27       	eor	r27, r27
 7ae:	93 95       	inc	r25
 7b0:	f6 95       	lsr	r31
 7b2:	87 95       	ror	r24
 7b4:	77 95       	ror	r23
 7b6:	67 95       	ror	r22
 7b8:	b7 95       	ror	r27
 7ba:	f1 11       	cpse	r31, r1
 7bc:	f8 cf       	rjmp	.-16     	; 0x7ae <__floatsisf+0x1c>
 7be:	fa f4       	brpl	.+62     	; 0x7fe <__floatsisf+0x6c>
 7c0:	bb 0f       	add	r27, r27
 7c2:	11 f4       	brne	.+4      	; 0x7c8 <__floatsisf+0x36>
 7c4:	60 ff       	sbrs	r22, 0
 7c6:	1b c0       	rjmp	.+54     	; 0x7fe <__floatsisf+0x6c>
 7c8:	6f 5f       	subi	r22, 0xFF	; 255
 7ca:	7f 4f       	sbci	r23, 0xFF	; 255
 7cc:	8f 4f       	sbci	r24, 0xFF	; 255
 7ce:	9f 4f       	sbci	r25, 0xFF	; 255
 7d0:	16 c0       	rjmp	.+44     	; 0x7fe <__floatsisf+0x6c>
 7d2:	88 23       	and	r24, r24
 7d4:	11 f0       	breq	.+4      	; 0x7da <__floatsisf+0x48>
 7d6:	96 e9       	ldi	r25, 0x96	; 150
 7d8:	11 c0       	rjmp	.+34     	; 0x7fc <__floatsisf+0x6a>
 7da:	77 23       	and	r23, r23
 7dc:	21 f0       	breq	.+8      	; 0x7e6 <__floatsisf+0x54>
 7de:	9e e8       	ldi	r25, 0x8E	; 142
 7e0:	87 2f       	mov	r24, r23
 7e2:	76 2f       	mov	r23, r22
 7e4:	05 c0       	rjmp	.+10     	; 0x7f0 <__floatsisf+0x5e>
 7e6:	66 23       	and	r22, r22
 7e8:	71 f0       	breq	.+28     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 7ea:	96 e8       	ldi	r25, 0x86	; 134
 7ec:	86 2f       	mov	r24, r22
 7ee:	70 e0       	ldi	r23, 0x00	; 0
 7f0:	60 e0       	ldi	r22, 0x00	; 0
 7f2:	2a f0       	brmi	.+10     	; 0x7fe <__floatsisf+0x6c>
 7f4:	9a 95       	dec	r25
 7f6:	66 0f       	add	r22, r22
 7f8:	77 1f       	adc	r23, r23
 7fa:	88 1f       	adc	r24, r24
 7fc:	da f7       	brpl	.-10     	; 0x7f4 <__floatsisf+0x62>
 7fe:	88 0f       	add	r24, r24
 800:	96 95       	lsr	r25
 802:	87 95       	ror	r24
 804:	97 f9       	bld	r25, 7
 806:	08 95       	ret

00000808 <__fp_inf>:
 808:	97 f9       	bld	r25, 7
 80a:	9f 67       	ori	r25, 0x7F	; 127
 80c:	80 e8       	ldi	r24, 0x80	; 128
 80e:	70 e0       	ldi	r23, 0x00	; 0
 810:	60 e0       	ldi	r22, 0x00	; 0
 812:	08 95       	ret

00000814 <__fp_nan>:
 814:	9f ef       	ldi	r25, 0xFF	; 255
 816:	80 ec       	ldi	r24, 0xC0	; 192
 818:	08 95       	ret

0000081a <__fp_pscA>:
 81a:	00 24       	eor	r0, r0
 81c:	0a 94       	dec	r0
 81e:	16 16       	cp	r1, r22
 820:	17 06       	cpc	r1, r23
 822:	18 06       	cpc	r1, r24
 824:	09 06       	cpc	r0, r25
 826:	08 95       	ret

00000828 <__fp_pscB>:
 828:	00 24       	eor	r0, r0
 82a:	0a 94       	dec	r0
 82c:	12 16       	cp	r1, r18
 82e:	13 06       	cpc	r1, r19
 830:	14 06       	cpc	r1, r20
 832:	05 06       	cpc	r0, r21
 834:	08 95       	ret

00000836 <__fp_round>:
 836:	09 2e       	mov	r0, r25
 838:	03 94       	inc	r0
 83a:	00 0c       	add	r0, r0
 83c:	11 f4       	brne	.+4      	; 0x842 <__fp_round+0xc>
 83e:	88 23       	and	r24, r24
 840:	52 f0       	brmi	.+20     	; 0x856 <__fp_round+0x20>
 842:	bb 0f       	add	r27, r27
 844:	40 f4       	brcc	.+16     	; 0x856 <__fp_round+0x20>
 846:	bf 2b       	or	r27, r31
 848:	11 f4       	brne	.+4      	; 0x84e <__fp_round+0x18>
 84a:	60 ff       	sbrs	r22, 0
 84c:	04 c0       	rjmp	.+8      	; 0x856 <__fp_round+0x20>
 84e:	6f 5f       	subi	r22, 0xFF	; 255
 850:	7f 4f       	sbci	r23, 0xFF	; 255
 852:	8f 4f       	sbci	r24, 0xFF	; 255
 854:	9f 4f       	sbci	r25, 0xFF	; 255
 856:	08 95       	ret

00000858 <__fp_split3>:
 858:	57 fd       	sbrc	r21, 7
 85a:	90 58       	subi	r25, 0x80	; 128
 85c:	44 0f       	add	r20, r20
 85e:	55 1f       	adc	r21, r21
 860:	59 f0       	breq	.+22     	; 0x878 <__fp_splitA+0x10>
 862:	5f 3f       	cpi	r21, 0xFF	; 255
 864:	71 f0       	breq	.+28     	; 0x882 <__fp_splitA+0x1a>
 866:	47 95       	ror	r20

00000868 <__fp_splitA>:
 868:	88 0f       	add	r24, r24
 86a:	97 fb       	bst	r25, 7
 86c:	99 1f       	adc	r25, r25
 86e:	61 f0       	breq	.+24     	; 0x888 <__fp_splitA+0x20>
 870:	9f 3f       	cpi	r25, 0xFF	; 255
 872:	79 f0       	breq	.+30     	; 0x892 <__fp_splitA+0x2a>
 874:	87 95       	ror	r24
 876:	08 95       	ret
 878:	12 16       	cp	r1, r18
 87a:	13 06       	cpc	r1, r19
 87c:	14 06       	cpc	r1, r20
 87e:	55 1f       	adc	r21, r21
 880:	f2 cf       	rjmp	.-28     	; 0x866 <__stack+0x7>
 882:	46 95       	lsr	r20
 884:	f1 df       	rcall	.-30     	; 0x868 <__fp_splitA>
 886:	08 c0       	rjmp	.+16     	; 0x898 <__fp_splitA+0x30>
 888:	16 16       	cp	r1, r22
 88a:	17 06       	cpc	r1, r23
 88c:	18 06       	cpc	r1, r24
 88e:	99 1f       	adc	r25, r25
 890:	f1 cf       	rjmp	.-30     	; 0x874 <__fp_splitA+0xc>
 892:	86 95       	lsr	r24
 894:	71 05       	cpc	r23, r1
 896:	61 05       	cpc	r22, r1
 898:	08 94       	sec
 89a:	08 95       	ret

0000089c <__fp_zero>:
 89c:	e8 94       	clt

0000089e <__fp_szero>:
 89e:	bb 27       	eor	r27, r27
 8a0:	66 27       	eor	r22, r22
 8a2:	77 27       	eor	r23, r23
 8a4:	cb 01       	movw	r24, r22
 8a6:	97 f9       	bld	r25, 7
 8a8:	08 95       	ret

000008aa <_exit>:
 8aa:	f8 94       	cli

000008ac <__stop_program>:
 8ac:	ff cf       	rjmp	.-2      	; 0x8ac <__stop_program>
