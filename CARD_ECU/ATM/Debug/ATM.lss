
ATM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c94  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001c4  00800060  00000c94  00000d28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800224  00800224  00000eec  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000eec  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000f1c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000250  00000000  00000000  00000f58  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002079  00000000  00000000  000011a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d4b  00000000  00000000  00003221  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000014d0  00000000  00000000  00003f6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000468  00000000  00000000  0000543c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ae5  00000000  00000000  000058a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f22  00000000  00000000  00006389  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c0  00000000  00000000  000072ab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	12 e0       	ldi	r17, 0x02	; 2
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e9       	ldi	r30, 0x94	; 148
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 32       	cpi	r26, 0x24	; 36
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	22 e0       	ldi	r18, 0x02	; 2
  78:	a4 e2       	ldi	r26, 0x24	; 36
  7a:	b2 e0       	ldi	r27, 0x02	; 2
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 32       	cpi	r26, 0x2A	; 42
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 33 02 	call	0x466	; 0x466 <main>
  8a:	0c 94 48 06 	jmp	0xc90	; 0xc90 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <APP_init>:
uint8_t readpan[20] = "0000000000000000000";

/** FUNCTION FOR INITIALIZATION **/
void APP_init()
{
    TMR0_init(); /** TIMER 0 INITIALIZATION **/
  92:	0e 94 42 04 	call	0x884	; 0x884 <TMR0_init>
	
	UART_init();  /** INITIALIZATION UART MODULE **/
  96:	0e 94 a5 04 	call	0x94a	; 0x94a <UART_init>
	
	SPI_initmaster(); /** INITIALIZE SPI MASTER **/
  9a:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <SPI_initmaster>
	
	EEPROM_init(); /** INITIALIZE EEPROM MODULE **/
  9e:	0e 94 99 01 	call	0x332	; 0x332 <EEPROM_init>
	
	Button_init(BUTTON1_PORT , BUTTON1_PIN); /** COMMUNICATION TRIGGER **/
  a2:	60 e0       	ldi	r22, 0x00	; 0
  a4:	81 e0       	ldi	r24, 0x01	; 1
  a6:	0e 94 76 01 	call	0x2ec	; 0x2ec <Button_init>
	
	DIO_setpindir(DIO_PORTA , DIO_PIN0 , DIO_PIN_OUTPUT); /** OUTPUT PIN TO TRIGGER ATM ECU **/
  aa:	41 e0       	ldi	r20, 0x01	; 1
  ac:	60 e0       	ldi	r22, 0x00	; 0
  ae:	80 e0       	ldi	r24, 0x00	; 0
  b0:	0e 94 90 02 	call	0x520	; 0x520 <DIO_setpindir>
	DIO_setpinvalue(DIO_PORTA , DIO_PIN0 , DIO_PIN_LOW);  /** PIN IS LOW (TRIGGER OFF)      **/
  b4:	40 e0       	ldi	r20, 0x00	; 0
  b6:	60 e0       	ldi	r22, 0x00	; 0
  b8:	80 e0       	ldi	r24, 0x00	; 0
  ba:	0e 94 0f 03 	call	0x61e	; 0x61e <DIO_setpinvalue>
  be:	08 95       	ret

000000c0 <APP_entrypoint>:
}

/** FUNCTION TO SET THE ENTRY POINT USER / PROGRAMMING OR REPROGRAMMING MODE **/
uint8_t APP_entrypoint()
{
  c0:	cf 93       	push	r28
  c2:	df 93       	push	r29
  c4:	00 d0       	rcall	.+0      	; 0xc6 <APP_entrypoint+0x6>
  c6:	cd b7       	in	r28, 0x3d	; 61
  c8:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_l_eepromcheck = 0 , u8_l_returnmode = 0 , u8_receiveddata = 0;
  ca:	19 82       	std	Y+1, r1	; 0x01
  cc:	1a 82       	std	Y+2, r1	; 0x02
	
	EEPROM_readbyte(TEST_ADDRESS , &u8_l_eepromcheck , PAGE_0); /** READ THE FIRST BYTE WHICH WE WRITE TO  **/
  ce:	40 e0       	ldi	r20, 0x00	; 0
  d0:	be 01       	movw	r22, r28
  d2:	6f 5f       	subi	r22, 0xFF	; 255
  d4:	7f 4f       	sbci	r23, 0xFF	; 255
  d6:	80 e1       	ldi	r24, 0x10	; 16
  d8:	93 e0       	ldi	r25, 0x03	; 3
  da:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <EEPROM_readbyte>
	
	if (u8_l_eepromcheck == 0xFF) /** IF THE ADDRESS IS EMPTY **/
  de:	89 81       	ldd	r24, Y+1	; 0x01
  e0:	8f 3f       	cpi	r24, 0xFF	; 255
  e2:	31 f4       	brne	.+12     	; 0xf0 <APP_entrypoint+0x30>
	{
		UART_sendstr("\r\n First insertion for this card wait to program it\r\n");
  e4:	87 e9       	ldi	r24, 0x97	; 151
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <UART_sendstr>
		
		u8_l_returnmode = PROGRAM_MODE ; /** RETURN THE PROGRAMMING MODE **/
  ec:	80 e0       	ldi	r24, 0x00	; 0
  ee:	1a c0       	rjmp	.+52     	; 0x124 <APP_entrypoint+0x64>
	}
	
	else if(u8_l_eepromcheck == TEST_DATA) /** CARD PROGRAMMED PREVIOUSLY **/
  f0:	82 31       	cpi	r24, 0x12	; 18
  f2:	99 f4       	brne	.+38     	; 0x11a <APP_entrypoint+0x5a>
	{
		UART_sendstr("\r\nTo reprogram your card press 2 , for user mode press 1 \r\n");
  f4:	8d ec       	ldi	r24, 0xCD	; 205
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <UART_sendstr>
		
		UART_receivechar(&u8_receiveddata);
  fc:	ce 01       	movw	r24, r28
  fe:	02 96       	adiw	r24, 0x02	; 2
 100:	0e 94 f6 04 	call	0x9ec	; 0x9ec <UART_receivechar>
		
		if (u8_receiveddata == '2')
 104:	8a 81       	ldd	r24, Y+2	; 0x02
 106:	82 33       	cpi	r24, 0x32	; 50
 108:	51 f0       	breq	.+20     	; 0x11e <APP_entrypoint+0x5e>
		{
			u8_l_returnmode = REPROGRAM_MODE ; /** RETURN THE REPROGRAMMING MODE **/ 
		}
		
		else if (u8_receiveddata == '1')
 10a:	81 33       	cpi	r24, 0x31	; 49
 10c:	51 f0       	breq	.+20     	; 0x122 <APP_entrypoint+0x62>
			u8_l_returnmode = USER_MODE ; /** RETURN THE USER MODE **/
		}
		
		else 
		{
			UART_sendstr("\r\nNot valid choice\r\n");
 10e:	89 e0       	ldi	r24, 0x09	; 9
 110:	91 e0       	ldi	r25, 0x01	; 1
 112:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <UART_sendstr>
}

/** FUNCTION TO SET THE ENTRY POINT USER / PROGRAMMING OR REPROGRAMMING MODE **/
uint8_t APP_entrypoint()
{
	uint8_t u8_l_eepromcheck = 0 , u8_l_returnmode = 0 , u8_receiveddata = 0;
 116:	80 e0       	ldi	r24, 0x00	; 0
 118:	05 c0       	rjmp	.+10     	; 0x124 <APP_entrypoint+0x64>
 11a:	80 e0       	ldi	r24, 0x00	; 0
 11c:	03 c0       	rjmp	.+6      	; 0x124 <APP_entrypoint+0x64>
		
		UART_receivechar(&u8_receiveddata);
		
		if (u8_receiveddata == '2')
		{
			u8_l_returnmode = REPROGRAM_MODE ; /** RETURN THE REPROGRAMMING MODE **/ 
 11e:	82 e0       	ldi	r24, 0x02	; 2
 120:	01 c0       	rjmp	.+2      	; 0x124 <APP_entrypoint+0x64>
		}
		
		else if (u8_receiveddata == '1')
		{
			u8_l_returnmode = USER_MODE ; /** RETURN THE USER MODE **/
 122:	81 e0       	ldi	r24, 0x01	; 1
			UART_sendstr("\r\nNot valid choice\r\n");
		}
	}
	
	return u8_l_returnmode ; /** RETURN THE FINAL MODE **/
}
 124:	0f 90       	pop	r0
 126:	0f 90       	pop	r0
 128:	df 91       	pop	r29
 12a:	cf 91       	pop	r28
 12c:	08 95       	ret

0000012e <APP_cardprogram>:


/** FUNCTION TO PROGRAM THE CARD DATA **/
uint8_t APP_cardprogram()
{
 12e:	cf 93       	push	r28
 130:	df 93       	push	r29
	
	/************************************************************************/
	/**                     PROGRAMMING THE CARD                           **/
	/************************************************************************/
	
	UART_sendstr("\r\n          you are in the programming mode\r\n"); /** MESSAGE **/
 132:	8e e1       	ldi	r24, 0x1E	; 30
 134:	91 e0       	ldi	r25, 0x01	; 1
 136:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <UART_sendstr>
	
	UART_sendstr("Please enter card PAN\r\n"); /** ASK USER TO INTER CARD PAN **/
 13a:	8c e4       	ldi	r24, 0x4C	; 76
 13c:	91 e0       	ldi	r25, 0x01	; 1
 13e:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <UART_sendstr>
	UART_receivestr(&u8_g_cardpan); /** RECEIVE PAN FROM USER **/
 142:	8e e7       	ldi	r24, 0x7E	; 126
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <UART_receivestr>
uint8_t APP_cardprogram()
{
	uint8_t u8_a_cardstatus = CARD_NOT_OK ;
	
	/** PIN NUMBER ITERATOR , CHARACTER FOUND STATUS , COUNTER FOR PIN ATTEMPTS **/
	uint8_t u8_a_num = 0 , u8_character = 0 , u8_a_try = 0; 
 14a:	d0 e0       	ldi	r29, 0x00	; 0
	UART_sendstr("\r\n          you are in the programming mode\r\n"); /** MESSAGE **/
	
	UART_sendstr("Please enter card PAN\r\n"); /** ASK USER TO INTER CARD PAN **/
	UART_receivestr(&u8_g_cardpan); /** RECEIVE PAN FROM USER **/
	
	while (u8_a_try <= 2) /** JUST TWO ATTEMPTS TO SET CARD PIN **/
 14c:	3d c0       	rjmp	.+122    	; 0x1c8 <APP_cardprogram+0x9a>
	{
		UART_sendstr("\r\nPlease enter new 4-numbers PIN\r\n");/** ASK USER TO INTER CARD PIN **/
 14e:	84 e6       	ldi	r24, 0x64	; 100
 150:	91 e0       	ldi	r25, 0x01	; 1
 152:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <UART_sendstr>
		UART_receivestr(&u8_g_cardpin);  /** RECEIVE PIN FROM USER **/
 156:	82 e9       	ldi	r24, 0x92	; 146
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <UART_receivestr>
		
		UART_sendstr("\r\nPlease confirm your PIN\r\n");/** ASK USER TO INTER CARD PIN **/
 15e:	87 e8       	ldi	r24, 0x87	; 135
 160:	91 e0       	ldi	r25, 0x01	; 1
 162:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <UART_sendstr>
		UART_receivestr(&u8_g_cardpinconfirm); /** RECEIVE PIN CONFIRMATION **/
 166:	89 e7       	ldi	r24, 0x79	; 121
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <UART_receivestr>
		
		/** CHECK IF CHARACTER ENTERED **/
		while(u8_a_num < 4)
 16e:	c0 e0       	ldi	r28, 0x00	; 0
 170:	80 e0       	ldi	r24, 0x00	; 0
 172:	0a c0       	rjmp	.+20     	; 0x188 <APP_cardprogram+0x5a>
		{
			/** VALIDATE THE USER INPUT AS NUMBERS ONLY **/
			if (!((u8_g_cardpin[u8_a_num] >= 47) && (u8_g_cardpin[u8_a_num] <= 57)))
 174:	e8 2f       	mov	r30, r24
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	ee 56       	subi	r30, 0x6E	; 110
 17a:	ff 4f       	sbci	r31, 0xFF	; 255
 17c:	90 81       	ld	r25, Z
 17e:	9f 52       	subi	r25, 0x2F	; 47
 180:	9b 30       	cpi	r25, 0x0B	; 11
 182:	08 f0       	brcs	.+2      	; 0x186 <APP_cardprogram+0x58>
			{
				u8_character = 1 ; /** CHARACTER FOUND **/
 184:	c1 e0       	ldi	r28, 0x01	; 1
			}
			u8_a_num++ ; /** JUMP TO THE NEXT NUMBER **/
 186:	8f 5f       	subi	r24, 0xFF	; 255
		
		UART_sendstr("\r\nPlease confirm your PIN\r\n");/** ASK USER TO INTER CARD PIN **/
		UART_receivestr(&u8_g_cardpinconfirm); /** RECEIVE PIN CONFIRMATION **/
		
		/** CHECK IF CHARACTER ENTERED **/
		while(u8_a_num < 4)
 188:	84 30       	cpi	r24, 0x04	; 4
 18a:	a0 f3       	brcs	.-24     	; 0x174 <APP_cardprogram+0x46>
				u8_character = 1 ; /** CHARACTER FOUND **/
			}
			u8_a_num++ ; /** JUMP TO THE NEXT NUMBER **/
		}
		
		u8_a_notmatched = strcmp(u8_g_cardpin , u8_g_cardpinconfirm); /** CHECK IF PIN MATCHED OR NOT **/
 18c:	69 e7       	ldi	r22, 0x79	; 121
 18e:	70 e0       	ldi	r23, 0x00	; 0
 190:	82 e9       	ldi	r24, 0x92	; 146
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	0e 94 3f 06 	call	0xc7e	; 0xc7e <strcmp>
 198:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <__data_end>
		
		if (u8_a_notmatched == 0 && u8_character == 0) /** IF PIN MATCHED AND NO CHARACTERS **/
 19c:	81 11       	cpse	r24, r1
 19e:	08 c0       	rjmp	.+16     	; 0x1b0 <APP_cardprogram+0x82>
 1a0:	c1 11       	cpse	r28, r1
 1a2:	06 c0       	rjmp	.+12     	; 0x1b0 <APP_cardprogram+0x82>
		{
			UART_sendstr("\r\nData received successfully\r\n");
 1a4:	83 ea       	ldi	r24, 0xA3	; 163
 1a6:	91 e0       	ldi	r25, 0x01	; 1
 1a8:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <UART_sendstr>
			u8_a_cardstatus = CARD_OK ;
 1ac:	81 e0       	ldi	r24, 0x01	; 1
			break ;
 1ae:	0f c0       	rjmp	.+30     	; 0x1ce <APP_cardprogram+0xa0>
		}
		
		else /** TRY FAILED **/
		{
			if (u8_character == 1) /** USER ENTERED CHARACTER **/
 1b0:	c1 30       	cpi	r28, 0x01	; 1
 1b2:	29 f4       	brne	.+10     	; 0x1be <APP_cardprogram+0x90>
			{
				UART_sendstr("\r\n Letters not allowed , numbers only\r\n");
 1b4:	82 ec       	ldi	r24, 0xC2	; 194
 1b6:	91 e0       	ldi	r25, 0x01	; 1
 1b8:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <UART_sendstr>
 1bc:	04 c0       	rjmp	.+8      	; 0x1c6 <APP_cardprogram+0x98>
			}
			else /** PIN NOT MATCHED **/
			{
				UART_sendstr("\r\nPIN didn't match !\r\n");/** ASK USER TO INTER CARD PIN **/
 1be:	8a ee       	ldi	r24, 0xEA	; 234
 1c0:	91 e0       	ldi	r25, 0x01	; 1
 1c2:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <UART_sendstr>
			}
		}
		
    	u8_a_try++ ; /** NEXT TRY **/
 1c6:	df 5f       	subi	r29, 0xFF	; 255
	UART_sendstr("\r\n          you are in the programming mode\r\n"); /** MESSAGE **/
	
	UART_sendstr("Please enter card PAN\r\n"); /** ASK USER TO INTER CARD PAN **/
	UART_receivestr(&u8_g_cardpan); /** RECEIVE PAN FROM USER **/
	
	while (u8_a_try <= 2) /** JUST TWO ATTEMPTS TO SET CARD PIN **/
 1c8:	d3 30       	cpi	r29, 0x03	; 3
 1ca:	08 f2       	brcs	.-126    	; 0x14e <APP_cardprogram+0x20>


/** FUNCTION TO PROGRAM THE CARD DATA **/
uint8_t APP_cardprogram()
{
	uint8_t u8_a_cardstatus = CARD_NOT_OK ;
 1cc:	80 e0       	ldi	r24, 0x00	; 0
		u8_character = 0 ;
		
	}
	
	return u8_a_cardstatus ; /** RETURN THE CARD STATUS **/
}
 1ce:	df 91       	pop	r29
 1d0:	cf 91       	pop	r28
 1d2:	08 95       	ret

000001d4 <APP_cardfailed>:

/** FUNCTION FOR CARD PROGRAMMING FAILURE **/
void APP_cardfailed()
{
	/** DISPLAY MESSAGE WHEN CARD PROGRAMMING FAILS **/
	UART_sendstr("\r\n Sorry card programming failed\r\n");
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	92 e0       	ldi	r25, 0x02	; 2
 1d8:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <UART_sendstr>
 1dc:	08 95       	ret

000001de <APP_storecard>:
}

/** FUNCTION TO STORE CARD DATA IN THE EEPROM **/
void APP_storecard()
{
 1de:	cf 93       	push	r28
 1e0:	df 93       	push	r29
	/** STORE THE TEST DATA IN THE EEPROM **/
	EEPROM_writebyte(TEST_ADDRESS , TEST_DATA , PAGE_0 );
 1e2:	40 e0       	ldi	r20, 0x00	; 0
 1e4:	62 e1       	ldi	r22, 0x12	; 18
 1e6:	80 e1       	ldi	r24, 0x10	; 16
 1e8:	93 e0       	ldi	r25, 0x03	; 3
 1ea:	0e 94 9c 01 	call	0x338	; 0x338 <EEPROM_writebyte>
	
	
	/** STORE PIN NUMBER **/
	for (uint16_t pin_counter = 0x0000 ; pin_counter < 0x0004 ; pin_counter++)
 1ee:	c0 e0       	ldi	r28, 0x00	; 0
 1f0:	d0 e0       	ldi	r29, 0x00	; 0
 1f2:	11 c0       	rjmp	.+34     	; 0x216 <APP_storecard+0x38>
	{
		EEPROM_writebyte(CARD_PINADDRESS_0+pin_counter , u8_g_cardpin[pin_counter] , PAGE_0 );
 1f4:	fe 01       	movw	r30, r28
 1f6:	ee 56       	subi	r30, 0x6E	; 110
 1f8:	ff 4f       	sbci	r31, 0xFF	; 255
 1fa:	40 e0       	ldi	r20, 0x00	; 0
 1fc:	60 81       	ld	r22, Z
 1fe:	ce 01       	movw	r24, r28
 200:	8f 5e       	subi	r24, 0xEF	; 239
 202:	9c 4f       	sbci	r25, 0xFC	; 252
 204:	0e 94 9c 01 	call	0x338	; 0x338 <EEPROM_writebyte>
		TMR0_delayms(20);
 208:	64 e1       	ldi	r22, 0x14	; 20
 20a:	70 e0       	ldi	r23, 0x00	; 0
 20c:	80 e0       	ldi	r24, 0x00	; 0
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	0e 94 69 04 	call	0x8d2	; 0x8d2 <TMR0_delayms>
	/** STORE THE TEST DATA IN THE EEPROM **/
	EEPROM_writebyte(TEST_ADDRESS , TEST_DATA , PAGE_0 );
	
	
	/** STORE PIN NUMBER **/
	for (uint16_t pin_counter = 0x0000 ; pin_counter < 0x0004 ; pin_counter++)
 214:	21 96       	adiw	r28, 0x01	; 1
 216:	c4 30       	cpi	r28, 0x04	; 4
 218:	d1 05       	cpc	r29, r1
 21a:	60 f3       	brcs	.-40     	; 0x1f4 <APP_storecard+0x16>
 21c:	c0 e0       	ldi	r28, 0x00	; 0
 21e:	d0 e0       	ldi	r29, 0x00	; 0
 220:	11 c0       	rjmp	.+34     	; 0x244 <APP_storecard+0x66>
	}

	/** STORE PAN NUMBER **/
	for (uint16_t pan_counter = 0x0000 ; pan_counter < 0x0014 ; pan_counter++)
	{
		EEPROM_writebyte(CARD_PANADDRESS_0+pan_counter , u8_g_cardpan[pan_counter] , PAGE_0 );
 222:	fe 01       	movw	r30, r28
 224:	e2 58       	subi	r30, 0x82	; 130
 226:	ff 4f       	sbci	r31, 0xFF	; 255
 228:	40 e0       	ldi	r20, 0x00	; 0
 22a:	60 81       	ld	r22, Z
 22c:	ce 01       	movw	r24, r28
 22e:	87 5e       	subi	r24, 0xE7	; 231
 230:	9c 4f       	sbci	r25, 0xFC	; 252
 232:	0e 94 9c 01 	call	0x338	; 0x338 <EEPROM_writebyte>
		TMR0_delayms(20);
 236:	64 e1       	ldi	r22, 0x14	; 20
 238:	70 e0       	ldi	r23, 0x00	; 0
 23a:	80 e0       	ldi	r24, 0x00	; 0
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	0e 94 69 04 	call	0x8d2	; 0x8d2 <TMR0_delayms>
		EEPROM_writebyte(CARD_PINADDRESS_0+pin_counter , u8_g_cardpin[pin_counter] , PAGE_0 );
		TMR0_delayms(20);
	}

	/** STORE PAN NUMBER **/
	for (uint16_t pan_counter = 0x0000 ; pan_counter < 0x0014 ; pan_counter++)
 242:	21 96       	adiw	r28, 0x01	; 1
 244:	c4 31       	cpi	r28, 0x14	; 20
 246:	d1 05       	cpc	r29, r1
 248:	60 f3       	brcs	.-40     	; 0x222 <APP_storecard+0x44>
	{
		EEPROM_writebyte(CARD_PANADDRESS_0+pan_counter , u8_g_cardpan[pan_counter] , PAGE_0 );
		TMR0_delayms(20);
	}

}
 24a:	df 91       	pop	r29
 24c:	cf 91       	pop	r28
 24e:	08 95       	ret

00000250 <APP_getcarddata>:

/** FUNCTION TO READ CARD DATA FROM EEPROM **/
void APP_getcarddata(void)
{
 250:	cf 93       	push	r28
 252:	df 93       	push	r29
	/** GET PIN FROM THE EEPROM **/
	for (uint16_t counter = 0x0000 ; counter < 0x0004 ; counter++)
 254:	c0 e0       	ldi	r28, 0x00	; 0
 256:	d0 e0       	ldi	r29, 0x00	; 0
 258:	10 c0       	rjmp	.+32     	; 0x27a <APP_getcarddata+0x2a>
	{
		EEPROM_readbyte(CARD_PINADDRESS_0+counter , &readpin[counter] , PAGE_0 );
 25a:	be 01       	movw	r22, r28
 25c:	6c 58       	subi	r22, 0x8C	; 140
 25e:	7f 4f       	sbci	r23, 0xFF	; 255
 260:	40 e0       	ldi	r20, 0x00	; 0
 262:	ce 01       	movw	r24, r28
 264:	8f 5e       	subi	r24, 0xEF	; 239
 266:	9c 4f       	sbci	r25, 0xFC	; 252
 268:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <EEPROM_readbyte>
		TMR0_delayms(20);
 26c:	64 e1       	ldi	r22, 0x14	; 20
 26e:	70 e0       	ldi	r23, 0x00	; 0
 270:	80 e0       	ldi	r24, 0x00	; 0
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	0e 94 69 04 	call	0x8d2	; 0x8d2 <TMR0_delayms>

/** FUNCTION TO READ CARD DATA FROM EEPROM **/
void APP_getcarddata(void)
{
	/** GET PIN FROM THE EEPROM **/
	for (uint16_t counter = 0x0000 ; counter < 0x0004 ; counter++)
 278:	21 96       	adiw	r28, 0x01	; 1
 27a:	c4 30       	cpi	r28, 0x04	; 4
 27c:	d1 05       	cpc	r29, r1
 27e:	68 f3       	brcs	.-38     	; 0x25a <APP_getcarddata+0xa>
 280:	c0 e0       	ldi	r28, 0x00	; 0
 282:	d0 e0       	ldi	r29, 0x00	; 0
 284:	10 c0       	rjmp	.+32     	; 0x2a6 <APP_getcarddata+0x56>
	}
	
	/** GET PAN FROM THE EEPROM **/ 
	for (uint16_t pan_counter = 0x0000 ; pan_counter < 0x0014 ; pan_counter++)
	{
		EEPROM_readbyte(CARD_PANADDRESS_0+pan_counter , &readpan[pan_counter] , PAGE_0 );
 286:	be 01       	movw	r22, r28
 288:	60 5a       	subi	r22, 0xA0	; 160
 28a:	7f 4f       	sbci	r23, 0xFF	; 255
 28c:	40 e0       	ldi	r20, 0x00	; 0
 28e:	ce 01       	movw	r24, r28
 290:	87 5e       	subi	r24, 0xE7	; 231
 292:	9c 4f       	sbci	r25, 0xFC	; 252
 294:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <EEPROM_readbyte>
		TMR0_delayms(20);
 298:	64 e1       	ldi	r22, 0x14	; 20
 29a:	70 e0       	ldi	r23, 0x00	; 0
 29c:	80 e0       	ldi	r24, 0x00	; 0
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	0e 94 69 04 	call	0x8d2	; 0x8d2 <TMR0_delayms>
		EEPROM_readbyte(CARD_PINADDRESS_0+counter , &readpin[counter] , PAGE_0 );
		TMR0_delayms(20);
	}
	
	/** GET PAN FROM THE EEPROM **/ 
	for (uint16_t pan_counter = 0x0000 ; pan_counter < 0x0014 ; pan_counter++)
 2a4:	21 96       	adiw	r28, 0x01	; 1
 2a6:	c4 31       	cpi	r28, 0x14	; 20
 2a8:	d1 05       	cpc	r29, r1
 2aa:	68 f3       	brcs	.-38     	; 0x286 <APP_getcarddata+0x36>
	{
		EEPROM_readbyte(CARD_PANADDRESS_0+pan_counter , &readpan[pan_counter] , PAGE_0 );
		TMR0_delayms(20);
	}	
}
 2ac:	df 91       	pop	r29
 2ae:	cf 91       	pop	r28
 2b0:	08 95       	ret

000002b2 <APP_sendtrigger>:

APP_sendtrigger()
{
	/** ACTIVATE THE TRIGGER PIN **/
	DIO_setpinvalue(DIO_PORTA , DIO_PIN0 , DIO_PIN_HIGH);
 2b2:	41 e0       	ldi	r20, 0x01	; 1
 2b4:	60 e0       	ldi	r22, 0x00	; 0
 2b6:	80 e0       	ldi	r24, 0x00	; 0
 2b8:	0e 94 0f 03 	call	0x61e	; 0x61e <DIO_setpinvalue>
}
 2bc:	08 95       	ret

000002be <APP_sendcarddata>:

/** FUNCTION TO SEND CARD DATA TO ATM ECU **/
void APP_sendcarddata() 
{
 	SPI_masterinittransmit(); /** START SPI TRANSMISSION **/
 2be:	0e 94 1f 04 	call	0x83e	; 0x83e <SPI_masterinittransmit>
 	
 	SPI_sendstring(u8_g_cardpin); /** SEND STORED PIN TO ATM **/
 2c2:	82 e9       	ldi	r24, 0x92	; 146
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	0e 94 2f 04 	call	0x85e	; 0x85e <SPI_sendstring>
	
	SPI_masterendtransmit(); /** END TRANSMISSION **/
 2ca:	0e 94 25 04 	call	0x84a	; 0x84a <SPI_masterendtransmit>
	
	TMR0_delayms(30); /** DELAY FOR 30 MS **/
 2ce:	6e e1       	ldi	r22, 0x1E	; 30
 2d0:	70 e0       	ldi	r23, 0x00	; 0
 2d2:	80 e0       	ldi	r24, 0x00	; 0
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	0e 94 69 04 	call	0x8d2	; 0x8d2 <TMR0_delayms>
	
	SPI_masterinittransmit(); /** START SPI TRANSMISSION **/
 2da:	0e 94 1f 04 	call	0x83e	; 0x83e <SPI_masterinittransmit>
	
	SPI_sendstring(u8_g_cardpan); /** SEND STORED PIN TO ATM **/
 2de:	8e e7       	ldi	r24, 0x7E	; 126
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	0e 94 2f 04 	call	0x85e	; 0x85e <SPI_sendstring>
	
	SPI_masterendtransmit();/** END TRANSMISSION **/
 2e6:	0e 94 25 04 	call	0x84a	; 0x84a <SPI_masterendtransmit>
 2ea:	08 95       	ret

000002ec <Button_init>:
/* RETURN    : void                                              */
/*****************************************************************/
void Button_init(uint8_t Button_port , uint8_t Button_pin)
{
	/** SET THE DIRECTION OF BUTTON AS INPUT **/
	DIO_setpindir(Button_port , Button_pin , DIO_PIN_INPUT);
 2ec:	40 e0       	ldi	r20, 0x00	; 0
 2ee:	0e 94 90 02 	call	0x520	; 0x520 <DIO_setpindir>
 2f2:	08 95       	ret

000002f4 <Is_pressed>:
/* FUNCTION TO CHECK THE BUTTON STATUS PRESSED OR NOT            */
/* ARGUMENTS : TAKES THE BUTTON PIN                              */
/* RETURN    : RETURNS BUTTON_t type                             */
/*****************************************************************/
button_t Is_pressed(uint8_t Button_port , uint8_t Button_pin , uint8_t * value)
{
 2f4:	0f 93       	push	r16
 2f6:	1f 93       	push	r17
 2f8:	cf 93       	push	r28
 2fa:	df 93       	push	r29
 2fc:	1f 92       	push	r1
 2fe:	cd b7       	in	r28, 0x3d	; 61
 300:	de b7       	in	r29, 0x3e	; 62
 302:	8a 01       	movw	r16, r20
	button_t button_state = Button_Notpressed ; /* VARIABLE TO HOLD THE RETURN TYPE OF THE FUNCTION */
	
	PinRead_t pin_status = NOT_VALID_READ ;  /** VARIABLE TO HOLD THE STATE OF PIN READ **/
	
	uint8_t pvalue = 0 ;
 304:	19 82       	std	Y+1, r1	; 0x01
	
	pin_status = DIO_readpin(Button_port , Button_pin , &pvalue); /** READ THE BUTTON PIN VALUE */
 306:	ae 01       	movw	r20, r28
 308:	4f 5f       	subi	r20, 0xFF	; 255
 30a:	5f 4f       	sbci	r21, 0xFF	; 255
 30c:	0e 94 8e 03 	call	0x71c	; 0x71c <DIO_readpin>
	
	if (!pin_status) 
 310:	81 11       	cpse	r24, r1
 312:	05 c0       	rjmp	.+10     	; 0x31e <Is_pressed+0x2a>
	{
		button_state = Button_pressed ; /** RETURN THE STATUS AS BUTTON IS PRESSED **/
		*value = pvalue ;
 314:	89 81       	ldd	r24, Y+1	; 0x01
 316:	f8 01       	movw	r30, r16
 318:	80 83       	st	Z, r24
	
	pin_status = DIO_readpin(Button_port , Button_pin , &pvalue); /** READ THE BUTTON PIN VALUE */
	
	if (!pin_status) 
	{
		button_state = Button_pressed ; /** RETURN THE STATUS AS BUTTON IS PRESSED **/
 31a:	81 e0       	ldi	r24, 0x01	; 1
 31c:	04 c0       	rjmp	.+8      	; 0x326 <Is_pressed+0x32>
	}
	
	else
	{
		button_state = Button_Notpressed ; /** RETURN THE STATUS AS BUTTON IS PRESSED **/
		*value = pvalue ;
 31e:	89 81       	ldd	r24, Y+1	; 0x01
 320:	f8 01       	movw	r30, r16
 322:	80 83       	st	Z, r24
		*value = pvalue ;
	}
	
	else
	{
		button_state = Button_Notpressed ; /** RETURN THE STATUS AS BUTTON IS PRESSED **/
 324:	80 e0       	ldi	r24, 0x00	; 0
		*value = pvalue ;
	}
	
	return button_state ; /** RETURN THE STATUS OF THE BUTTON **/
}
 326:	0f 90       	pop	r0
 328:	df 91       	pop	r29
 32a:	cf 91       	pop	r28
 32c:	1f 91       	pop	r17
 32e:	0f 91       	pop	r16
 330:	08 95       	ret

00000332 <EEPROM_init>:
/** AGGUMENTS : VOID                                        **/
/** RETURNS   : VOID                                        **/
/*************************************************************/
void EEPROM_init(void)
{
	TWI_init(); /** INITIALIZE TWI MODULE **/
 332:	0e 94 cc 03 	call	0x798	; 0x798 <TWI_init>
 336:	08 95       	ret

00000338 <EEPROM_writebyte>:
/** FUNCTION TO WRITE BYTE TO SPECIFIC EEPROM ADDRESS       **/
/** AGGUMENTS : u16_a_address (ADDRSS) , u8_a_data (DATA)   **/
/** RETURNS   : uint8_t (SUCCESS STATE/ FAIL STATE)         **/
/*************************************************************/
uint8_t EEPROM_writebyte(uint16_t u16_a_address , uint8_t u8_a_data , uint8_t u8_a_page_address)
{
 338:	0f 93       	push	r16
 33a:	1f 93       	push	r17
 33c:	cf 93       	push	r28
 33e:	df 93       	push	r29
 340:	18 2f       	mov	r17, r24
 342:	d9 2f       	mov	r29, r25
 344:	06 2f       	mov	r16, r22
 346:	c4 2f       	mov	r28, r20
	TWI_start(); /** SEND START CONDITION **/
 348:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <TWI_start>
	
	if (TWI_getstatus() != TW_START) /** CHECK THE STATUS CODE **/
 34c:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <TWI_getstatus>
 350:	88 30       	cpi	r24, 0x08	; 8
 352:	21 f5       	brne	.+72     	; 0x39c <EEPROM_writebyte+0x64>
	return ERROR;
	
	/** SEND DEVICE ADDRESS WITH WRITE OPERATION **/
	TWI_write(0xA0 | (u8_a_page_address << 1));
 354:	8c 2f       	mov	r24, r28
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	88 0f       	add	r24, r24
 35a:	99 1f       	adc	r25, r25
 35c:	80 6a       	ori	r24, 0xA0	; 160
 35e:	0e 94 df 03 	call	0x7be	; 0x7be <TWI_write>
	
	if (TWI_getstatus() != TW_MT_SLA_W_ACK) /** CHECK THE STATUS CODE **/
 362:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <TWI_getstatus>
 366:	88 31       	cpi	r24, 0x18	; 24
 368:	d9 f4       	brne	.+54     	; 0x3a0 <EEPROM_writebyte+0x68>
	return ERROR;
	
	/** SEND THE FIRST ADDRESS BYTE LOCATION ADDRESS **/
	TWI_write((uint8_t)(u16_a_address >> 8));
 36a:	8d 2f       	mov	r24, r29
 36c:	0e 94 df 03 	call	0x7be	; 0x7be <TWI_write>
	
	if (TWI_getstatus() != TW_MT_DATA_ACK)  /** CHECK THE STATUS CODE **/
 370:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <TWI_getstatus>
 374:	88 32       	cpi	r24, 0x28	; 40
 376:	b1 f4       	brne	.+44     	; 0x3a4 <EEPROM_writebyte+0x6c>
	return ERROR;
	
	/** SEND THE SECOND ADDRESS BYTE LOCATION ADDRESS **/
	TWI_write((uint8_t)(u16_a_address));
 378:	81 2f       	mov	r24, r17
 37a:	0e 94 df 03 	call	0x7be	; 0x7be <TWI_write>
	
	if (TWI_getstatus() != TW_MT_DATA_ACK)  /** CHECK THE STATUS CODE **/
 37e:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <TWI_getstatus>
 382:	88 32       	cpi	r24, 0x28	; 40
 384:	89 f4       	brne	.+34     	; 0x3a8 <EEPROM_writebyte+0x70>
	return ERROR;
	
	/** WRITE THE DATA BYTE **/
	TWI_write(u8_a_data);
 386:	80 2f       	mov	r24, r16
 388:	0e 94 df 03 	call	0x7be	; 0x7be <TWI_write>
	
	if (TWI_getstatus() != TW_MT_DATA_ACK)  /** CHECK THE STATUS CODE **/
 38c:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <TWI_getstatus>
 390:	88 32       	cpi	r24, 0x28	; 40
 392:	61 f4       	brne	.+24     	; 0x3ac <EEPROM_writebyte+0x74>
	return ERROR;
	
	TWI_stop();
 394:	0e 94 e6 03 	call	0x7cc	; 0x7cc <TWI_stop>
	
	return SUCCESS;
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	09 c0       	rjmp	.+18     	; 0x3ae <EEPROM_writebyte+0x76>
uint8_t EEPROM_writebyte(uint16_t u16_a_address , uint8_t u8_a_data , uint8_t u8_a_page_address)
{
	TWI_start(); /** SEND START CONDITION **/
	
	if (TWI_getstatus() != TW_START) /** CHECK THE STATUS CODE **/
	return ERROR;
 39c:	80 e0       	ldi	r24, 0x00	; 0
 39e:	07 c0       	rjmp	.+14     	; 0x3ae <EEPROM_writebyte+0x76>
	
	/** SEND DEVICE ADDRESS WITH WRITE OPERATION **/
	TWI_write(0xA0 | (u8_a_page_address << 1));
	
	if (TWI_getstatus() != TW_MT_SLA_W_ACK) /** CHECK THE STATUS CODE **/
	return ERROR;
 3a0:	80 e0       	ldi	r24, 0x00	; 0
 3a2:	05 c0       	rjmp	.+10     	; 0x3ae <EEPROM_writebyte+0x76>
	
	/** SEND THE FIRST ADDRESS BYTE LOCATION ADDRESS **/
	TWI_write((uint8_t)(u16_a_address >> 8));
	
	if (TWI_getstatus() != TW_MT_DATA_ACK)  /** CHECK THE STATUS CODE **/
	return ERROR;
 3a4:	80 e0       	ldi	r24, 0x00	; 0
 3a6:	03 c0       	rjmp	.+6      	; 0x3ae <EEPROM_writebyte+0x76>
	
	/** SEND THE SECOND ADDRESS BYTE LOCATION ADDRESS **/
	TWI_write((uint8_t)(u16_a_address));
	
	if (TWI_getstatus() != TW_MT_DATA_ACK)  /** CHECK THE STATUS CODE **/
	return ERROR;
 3a8:	80 e0       	ldi	r24, 0x00	; 0
 3aa:	01 c0       	rjmp	.+2      	; 0x3ae <EEPROM_writebyte+0x76>
	
	/** WRITE THE DATA BYTE **/
	TWI_write(u8_a_data);
	
	if (TWI_getstatus() != TW_MT_DATA_ACK)  /** CHECK THE STATUS CODE **/
	return ERROR;
 3ac:	80 e0       	ldi	r24, 0x00	; 0
	
	TWI_stop();
	
	return SUCCESS;
}
 3ae:	df 91       	pop	r29
 3b0:	cf 91       	pop	r28
 3b2:	1f 91       	pop	r17
 3b4:	0f 91       	pop	r16
 3b6:	08 95       	ret

000003b8 <EEPROM_readbyte>:
/** FUNCTION TO READ BYTE FROM SPECIFIC EEPROM ADDRESS      **/
/** AGGUMENTS : u16_a_address (ADDRSS) , u8_a_data (DATA)   **/
/** RETURNS   : uint8_t (SUCCESS STATE/ FAIL STATE)         **/
/*************************************************************/
uint8_t EEPROM_readbyte(uint16_t u16_a_address , uint8_t *u8_a_data , uint8_t u8_a_page_address)
{
 3b8:	ef 92       	push	r14
 3ba:	ff 92       	push	r15
 3bc:	0f 93       	push	r16
 3be:	1f 93       	push	r17
 3c0:	cf 93       	push	r28
 3c2:	df 93       	push	r29
 3c4:	08 2f       	mov	r16, r24
 3c6:	19 2f       	mov	r17, r25
 3c8:	7b 01       	movw	r14, r22
 3ca:	c4 2f       	mov	r28, r20
	TWI_start(); /** SEND START CONDITION **/
 3cc:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <TWI_start>
	
	if (TWI_getstatus() != TW_START)  /** CHECK THE STATUS CODE **/
 3d0:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <TWI_getstatus>
 3d4:	88 30       	cpi	r24, 0x08	; 8
 3d6:	99 f5       	brne	.+102    	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
	return ERROR;
	
	/** SEND DEVICE ADDRESS WITH WRITE OPERATION **/
	TWI_write(0xA0 | (u8_a_page_address << 1));
 3d8:	d0 e0       	ldi	r29, 0x00	; 0
 3da:	cc 0f       	add	r28, r28
 3dc:	dd 1f       	adc	r29, r29
 3de:	8c 2f       	mov	r24, r28
 3e0:	80 6a       	ori	r24, 0xA0	; 160
 3e2:	0e 94 df 03 	call	0x7be	; 0x7be <TWI_write>
	
	if (TWI_getstatus() != TW_MT_SLA_W_ACK)  /** CHECK THE STATUS CODE **/
 3e6:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <TWI_getstatus>
 3ea:	88 31       	cpi	r24, 0x18	; 24
 3ec:	51 f5       	brne	.+84     	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
	return ERROR;
	
	/** SEND THE FIRST ADDRESS BYTE LOCATION ADDRESS **/
	TWI_write((uint8_t)(u16_a_address >> 8));
 3ee:	81 2f       	mov	r24, r17
 3f0:	0e 94 df 03 	call	0x7be	; 0x7be <TWI_write>
	
	if (TWI_getstatus() != TW_MT_DATA_ACK)  /** CHECK THE STATUS CODE **/
 3f4:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <TWI_getstatus>
 3f8:	88 32       	cpi	r24, 0x28	; 40
 3fa:	29 f5       	brne	.+74     	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
	return ERROR;
	
	/** SEND THE SECOND ADDRESS BYTE LOCATION ADDRESS **/
	TWI_write((uint8_t)(u16_a_address));
 3fc:	80 2f       	mov	r24, r16
 3fe:	0e 94 df 03 	call	0x7be	; 0x7be <TWI_write>
	
	if (TWI_getstatus() != TW_MT_DATA_ACK)  /** CHECK THE STATUS CODE **/
 402:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <TWI_getstatus>
 406:	88 32       	cpi	r24, 0x28	; 40
 408:	01 f5       	brne	.+64     	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
	return ERROR;
	
	/** SEND REPEATED START **/
	TWI_start();
 40a:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <TWI_start>
	
	if (TWI_getstatus() != TW_REP_START)  /** CHECK THE STATUS CODE **/
 40e:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <TWI_getstatus>
 412:	80 31       	cpi	r24, 0x10	; 16
 414:	e1 f4       	brne	.+56     	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
	return ERROR;
	
	/** SEND DEVICE ADDRESS WITH READ OPERATION **/
	TWI_write(0xA0 | ((u8_a_page_address << 1) | 0x01));
 416:	8c 2f       	mov	r24, r28
 418:	81 6a       	ori	r24, 0xA1	; 161
 41a:	0e 94 df 03 	call	0x7be	; 0x7be <TWI_write>
	
	if (TWI_getstatus() != TW_MT_SLA_R_ACK)  /** CHECK THE STATUS CODE **/
 41e:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <TWI_getstatus>
 422:	80 34       	cpi	r24, 0x40	; 64
 424:	b1 f4       	brne	.+44     	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
	return ERROR;
	
	*u8_a_data = TWI_readwithnack(); /** READ THE DATA WITH ACK BIT **/
 426:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <TWI_readwithnack>
 42a:	f7 01       	movw	r30, r14
 42c:	80 83       	st	Z, r24
	
	if (TWI_getstatus() != TW_MR_DATA_NACK)  /** CHECK THE STATUS CODE **/
 42e:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <TWI_getstatus>
 432:	88 35       	cpi	r24, 0x58	; 88
 434:	81 f4       	brne	.+32     	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
	return ERROR;
	
	TWI_stop(); /** SEND STOP CONDITION **/
 436:	0e 94 e6 03 	call	0x7cc	; 0x7cc <TWI_stop>
	
	return SUCCESS; /** RETURN SUCCESS IF THE FRAME SENT CORRECTLY **/
 43a:	81 e0       	ldi	r24, 0x01	; 1
 43c:	0d c0       	rjmp	.+26     	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
uint8_t EEPROM_readbyte(uint16_t u16_a_address , uint8_t *u8_a_data , uint8_t u8_a_page_address)
{
	TWI_start(); /** SEND START CONDITION **/
	
	if (TWI_getstatus() != TW_START)  /** CHECK THE STATUS CODE **/
	return ERROR;
 43e:	80 e0       	ldi	r24, 0x00	; 0
 440:	0b c0       	rjmp	.+22     	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
	
	/** SEND DEVICE ADDRESS WITH WRITE OPERATION **/
	TWI_write(0xA0 | (u8_a_page_address << 1));
	
	if (TWI_getstatus() != TW_MT_SLA_W_ACK)  /** CHECK THE STATUS CODE **/
	return ERROR;
 442:	80 e0       	ldi	r24, 0x00	; 0
 444:	09 c0       	rjmp	.+18     	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
	
	/** SEND THE FIRST ADDRESS BYTE LOCATION ADDRESS **/
	TWI_write((uint8_t)(u16_a_address >> 8));
	
	if (TWI_getstatus() != TW_MT_DATA_ACK)  /** CHECK THE STATUS CODE **/
	return ERROR;
 446:	80 e0       	ldi	r24, 0x00	; 0
 448:	07 c0       	rjmp	.+14     	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
	
	/** SEND THE SECOND ADDRESS BYTE LOCATION ADDRESS **/
	TWI_write((uint8_t)(u16_a_address));
	
	if (TWI_getstatus() != TW_MT_DATA_ACK)  /** CHECK THE STATUS CODE **/
	return ERROR;
 44a:	80 e0       	ldi	r24, 0x00	; 0
 44c:	05 c0       	rjmp	.+10     	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
	
	/** SEND REPEATED START **/
	TWI_start();
	
	if (TWI_getstatus() != TW_REP_START)  /** CHECK THE STATUS CODE **/
	return ERROR;
 44e:	80 e0       	ldi	r24, 0x00	; 0
 450:	03 c0       	rjmp	.+6      	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
	
	/** SEND DEVICE ADDRESS WITH READ OPERATION **/
	TWI_write(0xA0 | ((u8_a_page_address << 1) | 0x01));
	
	if (TWI_getstatus() != TW_MT_SLA_R_ACK)  /** CHECK THE STATUS CODE **/
	return ERROR;
 452:	80 e0       	ldi	r24, 0x00	; 0
 454:	01 c0       	rjmp	.+2      	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
	
	*u8_a_data = TWI_readwithnack(); /** READ THE DATA WITH ACK BIT **/
	
	if (TWI_getstatus() != TW_MR_DATA_NACK)  /** CHECK THE STATUS CODE **/
	return ERROR;
 456:	80 e0       	ldi	r24, 0x00	; 0
	
	TWI_stop(); /** SEND STOP CONDITION **/
	
	return SUCCESS; /** RETURN SUCCESS IF THE FRAME SENT CORRECTLY **/
}
 458:	df 91       	pop	r29
 45a:	cf 91       	pop	r28
 45c:	1f 91       	pop	r17
 45e:	0f 91       	pop	r16
 460:	ff 90       	pop	r15
 462:	ef 90       	pop	r14
 464:	08 95       	ret

00000466 <main>:

int main(void)
{
	uint8_t u8_a_card_valid = CARD_NOT_OK , u8_a_entrypoint ;
	
	APP_init();        /** INITIALIZATION **/
 466:	0e 94 49 00 	call	0x92	; 0x92 <APP_init>
	
	u8_a_entrypoint = APP_entrypoint(); /** DECIDE THE PROGRAM ENTRY POINT **/
 46a:	0e 94 60 00 	call	0xc0	; 0xc0 <APP_entrypoint>
	
	if (u8_a_entrypoint == PROGRAM_MODE)
 46e:	81 11       	cpse	r24, r1
 470:	1f c0       	rjmp	.+62     	; 0x4b0 <main+0x4a>
	{
		u8_a_card_valid = APP_cardprogram(); /** PROGRAMMING THE CARD **/
 472:	0e 94 97 00 	call	0x12e	; 0x12e <APP_cardprogram>
		
		if(!u8_a_card_valid) /** CARD PROGRAMMING FAILURE **/
 476:	81 11       	cpse	r24, r1
 478:	06 c0       	rjmp	.+12     	; 0x486 <main+0x20>
		{
			/** DISPLAY A MESSAGE TO GET OUT OF THE SYSTEM **/
			APP_cardfailed();
 47a:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <APP_cardfailed>
			
			exit(1); /** STOP THE SYSTEM **/
 47e:	81 e0       	ldi	r24, 0x01	; 1
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	0e 94 48 06 	call	0xc90	; 0xc90 <_exit>
		}
		
		APP_storecard();   /** STORE CARD DATA IN EEPROM **/
 486:	0e 94 ef 00 	call	0x1de	; 0x1de <APP_storecard>
		
		APP_getcarddata(); /** GET CARD DATA FROM THE EEPROM **/
 48a:	0e 94 28 01 	call	0x250	; 0x250 <APP_getcarddata>
		
		APP_sendtrigger(); /** SEND TRIGGER TO ATM ECU **/
 48e:	0e 94 59 01 	call	0x2b2	; 0x2b2 <APP_sendtrigger>
		
		do
		{
			Is_pressed(BUTTON1_PORT , BUTTON1_PIN , &u8_a_commtrig);
 492:	45 e2       	ldi	r20, 0x25	; 37
 494:	52 e0       	ldi	r21, 0x02	; 2
 496:	60 e0       	ldi	r22, 0x00	; 0
 498:	70 e0       	ldi	r23, 0x00	; 0
 49a:	81 e0       	ldi	r24, 0x01	; 1
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <Is_pressed>
		} while (u8_a_commtrig == 0); /** UNTILL COMMUNICATION INITIATED **/
 4a2:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <u8_a_commtrig>
 4a6:	88 23       	and	r24, r24
 4a8:	a1 f3       	breq	.-24     	; 0x492 <main+0x2c>
			
		APP_sendcarddata(); /** START THE **/
 4aa:	0e 94 5f 01 	call	0x2be	; 0x2be <APP_sendcarddata>
 4ae:	35 c0       	rjmp	.+106    	; 0x51a <main+0xb4>
	}
	
	else if (u8_a_entrypoint == REPROGRAM_MODE)
 4b0:	82 30       	cpi	r24, 0x02	; 2
 4b2:	f9 f4       	brne	.+62     	; 0x4f2 <main+0x8c>
	{
		u8_a_card_valid = APP_cardprogram(); /** PROGRAMMING THE CARD **/
 4b4:	0e 94 97 00 	call	0x12e	; 0x12e <APP_cardprogram>
		
		if(!u8_a_card_valid) /** CARD PROGRAMMING FAILURE **/
 4b8:	81 11       	cpse	r24, r1
 4ba:	06 c0       	rjmp	.+12     	; 0x4c8 <main+0x62>
		{
			/** DISPLAY A MESSAGE TO GET OUT OF THE SYSTEM **/
			APP_cardfailed();
 4bc:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <APP_cardfailed>
			
			exit(1); /** STOP THE SYSTEM **/
 4c0:	81 e0       	ldi	r24, 0x01	; 1
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	0e 94 48 06 	call	0xc90	; 0xc90 <_exit>
		}
		
		APP_storecard();   /** STORE CARD DATA IN EEPROM **/
 4c8:	0e 94 ef 00 	call	0x1de	; 0x1de <APP_storecard>
		
		APP_getcarddata(); /** GET CARD DATA FROM THE EEPROM **/
 4cc:	0e 94 28 01 	call	0x250	; 0x250 <APP_getcarddata>
		
		APP_sendtrigger(); /** SEND TRIGGER TO ATM ECU **/
 4d0:	0e 94 59 01 	call	0x2b2	; 0x2b2 <APP_sendtrigger>
		
		do
		{
			Is_pressed(BUTTON1_PORT , BUTTON1_PIN , &u8_a_commtrig);
 4d4:	45 e2       	ldi	r20, 0x25	; 37
 4d6:	52 e0       	ldi	r21, 0x02	; 2
 4d8:	60 e0       	ldi	r22, 0x00	; 0
 4da:	70 e0       	ldi	r23, 0x00	; 0
 4dc:	81 e0       	ldi	r24, 0x01	; 1
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <Is_pressed>
		} while (u8_a_commtrig == 0); /** UNTILL COMMUNICATION INITIATED **/
 4e4:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <u8_a_commtrig>
 4e8:	88 23       	and	r24, r24
 4ea:	a1 f3       	breq	.-24     	; 0x4d4 <main+0x6e>
			
		APP_sendcarddata(); /** START THE **/
 4ec:	0e 94 5f 01 	call	0x2be	; 0x2be <APP_sendcarddata>
 4f0:	14 c0       	rjmp	.+40     	; 0x51a <main+0xb4>
	}
	
	else if (u8_a_entrypoint == USER_MODE)
 4f2:	81 30       	cpi	r24, 0x01	; 1
 4f4:	91 f4       	brne	.+36     	; 0x51a <main+0xb4>
	{
		APP_getcarddata(); /** GET CARD DATA FROM THE EEPROM **/
 4f6:	0e 94 28 01 	call	0x250	; 0x250 <APP_getcarddata>
		
		APP_sendtrigger(); /** SEND TRIGGER TO ATM ECU **/
 4fa:	0e 94 59 01 	call	0x2b2	; 0x2b2 <APP_sendtrigger>
		
		do
		{
			Is_pressed(BUTTON1_PORT , BUTTON1_PIN , &u8_a_commtrig);
 4fe:	45 e2       	ldi	r20, 0x25	; 37
 500:	52 e0       	ldi	r21, 0x02	; 2
 502:	60 e0       	ldi	r22, 0x00	; 0
 504:	70 e0       	ldi	r23, 0x00	; 0
 506:	81 e0       	ldi	r24, 0x01	; 1
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <Is_pressed>
		} while (u8_a_commtrig == 0); /** UNTILL COMMUNICATION INITIATED **/
 50e:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <u8_a_commtrig>
 512:	88 23       	and	r24, r24
 514:	a1 f3       	breq	.-24     	; 0x4fe <main+0x98>
			
		APP_sendcarddata(); /** START THE **/
 516:	0e 94 5f 01 	call	0x2be	; 0x2be <APP_sendcarddata>
//     while (1) 
//     {
// 		
//     }

}
 51a:	80 e0       	ldi	r24, 0x00	; 0
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	08 95       	ret

00000520 <DIO_setpindir>:
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
	
	switch(u8_a_pindir) /** SWITCH CASE ON THE DIRECTION VALUE **/
 520:	44 23       	and	r20, r20
 522:	19 f0       	breq	.+6      	; 0x52a <DIO_setpindir+0xa>
 524:	41 30       	cpi	r20, 0x01	; 1
 526:	e9 f1       	breq	.+122    	; 0x5a2 <DIO_setpindir+0x82>
 528:	74 c0       	rjmp	.+232    	; 0x612 <DIO_setpindir+0xf2>
	{
		case DIO_PIN_INPUT:  /* INPUT CASE  */
		
		switch(u8_a_portid) /** SWITCH CASE ON THE PORT ID */
 52a:	81 30       	cpi	r24, 0x01	; 1
 52c:	99 f0       	breq	.+38     	; 0x554 <DIO_setpindir+0x34>
 52e:	28 f0       	brcs	.+10     	; 0x53a <DIO_setpindir+0x1a>
 530:	82 30       	cpi	r24, 0x02	; 2
 532:	e9 f0       	breq	.+58     	; 0x56e <DIO_setpindir+0x4e>
 534:	83 30       	cpi	r24, 0x03	; 3
 536:	41 f1       	breq	.+80     	; 0x588 <DIO_setpindir+0x68>
 538:	6e c0       	rjmp	.+220    	; 0x616 <DIO_setpindir+0xf6>
		{
			case DIO_PORTA:
			clear_bit(DDRA , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTA AS INPUT PIN **/
 53a:	2a b3       	in	r18, 0x1a	; 26
 53c:	81 e0       	ldi	r24, 0x01	; 1
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	02 c0       	rjmp	.+4      	; 0x546 <DIO_setpindir+0x26>
 542:	88 0f       	add	r24, r24
 544:	99 1f       	adc	r25, r25
 546:	6a 95       	dec	r22
 548:	e2 f7       	brpl	.-8      	; 0x542 <DIO_setpindir+0x22>
 54a:	80 95       	com	r24
 54c:	82 23       	and	r24, r18
 54e:	8a bb       	out	0x1a, r24	; 26
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
 550:	80 e0       	ldi	r24, 0x00	; 0
		
		switch(u8_a_portid) /** SWITCH CASE ON THE PORT ID */
		{
			case DIO_PORTA:
			clear_bit(DDRA , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTA AS INPUT PIN **/
			break;
 552:	08 95       	ret
			
			case DIO_PORTB:
			clear_bit(DDRB , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTB AS INPUT PIN **/
 554:	27 b3       	in	r18, 0x17	; 23
 556:	81 e0       	ldi	r24, 0x01	; 1
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	02 c0       	rjmp	.+4      	; 0x560 <DIO_setpindir+0x40>
 55c:	88 0f       	add	r24, r24
 55e:	99 1f       	adc	r25, r25
 560:	6a 95       	dec	r22
 562:	e2 f7       	brpl	.-8      	; 0x55c <DIO_setpindir+0x3c>
 564:	80 95       	com	r24
 566:	82 23       	and	r24, r18
 568:	87 bb       	out	0x17, r24	; 23
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
 56a:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(DDRA , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTA AS INPUT PIN **/
			break;
			
			case DIO_PORTB:
			clear_bit(DDRB , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTB AS INPUT PIN **/
			break;
 56c:	08 95       	ret
			
			case DIO_PORTC:
			clear_bit(DDRC , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTC AS INPUT PIN **/
 56e:	24 b3       	in	r18, 0x14	; 20
 570:	81 e0       	ldi	r24, 0x01	; 1
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	02 c0       	rjmp	.+4      	; 0x57a <DIO_setpindir+0x5a>
 576:	88 0f       	add	r24, r24
 578:	99 1f       	adc	r25, r25
 57a:	6a 95       	dec	r22
 57c:	e2 f7       	brpl	.-8      	; 0x576 <DIO_setpindir+0x56>
 57e:	80 95       	com	r24
 580:	82 23       	and	r24, r18
 582:	84 bb       	out	0x14, r24	; 20
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
 584:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(DDRB , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTB AS INPUT PIN **/
			break;
			
			case DIO_PORTC:
			clear_bit(DDRC , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTC AS INPUT PIN **/
			break;
 586:	08 95       	ret
			
			case DIO_PORTD:
			clear_bit(DDRD , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTD AS INPUT PIN **/
 588:	21 b3       	in	r18, 0x11	; 17
 58a:	81 e0       	ldi	r24, 0x01	; 1
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	02 c0       	rjmp	.+4      	; 0x594 <DIO_setpindir+0x74>
 590:	88 0f       	add	r24, r24
 592:	99 1f       	adc	r25, r25
 594:	6a 95       	dec	r22
 596:	e2 f7       	brpl	.-8      	; 0x590 <DIO_setpindir+0x70>
 598:	80 95       	com	r24
 59a:	82 23       	and	r24, r18
 59c:	81 bb       	out	0x11, r24	; 17
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
 59e:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(DDRC , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTC AS INPUT PIN **/
			break;
			
			case DIO_PORTD:
			clear_bit(DDRD , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTD AS INPUT PIN **/
			break;
 5a0:	08 95       	ret
		} 
		break;
		
		case DIO_PIN_OUTPUT:  /* OUTPUT CASE  */
		
		switch(u8_a_portid) /** SWITCH CASE ON THE PORT ID */
 5a2:	81 30       	cpi	r24, 0x01	; 1
 5a4:	91 f0       	breq	.+36     	; 0x5ca <DIO_setpindir+0xaa>
 5a6:	28 f0       	brcs	.+10     	; 0x5b2 <DIO_setpindir+0x92>
 5a8:	82 30       	cpi	r24, 0x02	; 2
 5aa:	d9 f0       	breq	.+54     	; 0x5e2 <DIO_setpindir+0xc2>
 5ac:	83 30       	cpi	r24, 0x03	; 3
 5ae:	29 f1       	breq	.+74     	; 0x5fa <DIO_setpindir+0xda>
 5b0:	34 c0       	rjmp	.+104    	; 0x61a <DIO_setpindir+0xfa>
		{
			case DIO_PORTA:
			set_bit(DDRA , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
 5b2:	2a b3       	in	r18, 0x1a	; 26
 5b4:	81 e0       	ldi	r24, 0x01	; 1
 5b6:	90 e0       	ldi	r25, 0x00	; 0
 5b8:	02 c0       	rjmp	.+4      	; 0x5be <DIO_setpindir+0x9e>
 5ba:	88 0f       	add	r24, r24
 5bc:	99 1f       	adc	r25, r25
 5be:	6a 95       	dec	r22
 5c0:	e2 f7       	brpl	.-8      	; 0x5ba <DIO_setpindir+0x9a>
 5c2:	82 2b       	or	r24, r18
 5c4:	8a bb       	out	0x1a, r24	; 26
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
 5c6:	80 e0       	ldi	r24, 0x00	; 0
		
		switch(u8_a_portid) /** SWITCH CASE ON THE PORT ID */
		{
			case DIO_PORTA:
			set_bit(DDRA , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
 5c8:	08 95       	ret
			
			case DIO_PORTB:
			set_bit(DDRB , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
 5ca:	27 b3       	in	r18, 0x17	; 23
 5cc:	81 e0       	ldi	r24, 0x01	; 1
 5ce:	90 e0       	ldi	r25, 0x00	; 0
 5d0:	02 c0       	rjmp	.+4      	; 0x5d6 <DIO_setpindir+0xb6>
 5d2:	88 0f       	add	r24, r24
 5d4:	99 1f       	adc	r25, r25
 5d6:	6a 95       	dec	r22
 5d8:	e2 f7       	brpl	.-8      	; 0x5d2 <DIO_setpindir+0xb2>
 5da:	82 2b       	or	r24, r18
 5dc:	87 bb       	out	0x17, r24	; 23
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
 5de:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(DDRA , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
			
			case DIO_PORTB:
			set_bit(DDRB , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
 5e0:	08 95       	ret
			
			case DIO_PORTC:
			set_bit(DDRC , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
 5e2:	24 b3       	in	r18, 0x14	; 20
 5e4:	81 e0       	ldi	r24, 0x01	; 1
 5e6:	90 e0       	ldi	r25, 0x00	; 0
 5e8:	02 c0       	rjmp	.+4      	; 0x5ee <DIO_setpindir+0xce>
 5ea:	88 0f       	add	r24, r24
 5ec:	99 1f       	adc	r25, r25
 5ee:	6a 95       	dec	r22
 5f0:	e2 f7       	brpl	.-8      	; 0x5ea <DIO_setpindir+0xca>
 5f2:	82 2b       	or	r24, r18
 5f4:	84 bb       	out	0x14, r24	; 20
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
 5f6:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(DDRB , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
			
			case DIO_PORTC:
			set_bit(DDRC , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
 5f8:	08 95       	ret
			
			case DIO_PORTD:
			set_bit(DDRD , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
 5fa:	21 b3       	in	r18, 0x11	; 17
 5fc:	81 e0       	ldi	r24, 0x01	; 1
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	02 c0       	rjmp	.+4      	; 0x606 <DIO_setpindir+0xe6>
 602:	88 0f       	add	r24, r24
 604:	99 1f       	adc	r25, r25
 606:	6a 95       	dec	r22
 608:	e2 f7       	brpl	.-8      	; 0x602 <DIO_setpindir+0xe2>
 60a:	82 2b       	or	r24, r18
 60c:	81 bb       	out	0x11, r24	; 17
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
 60e:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(DDRC , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
			
			case DIO_PORTD:
			set_bit(DDRD , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
 610:	08 95       	ret
		} 
		break;
		 
		 
		default:  /** DIRECTION ISN'T INPUT OR OUTPUT */
		en_a_dirstate = NOT_VALID_DIRECTION ; /** RETURN AS DIR NOT VALID ERRORS **/
 612:	81 e0       	ldi	r24, 0x01	; 1
 614:	08 95       	ret
			case DIO_PORTD:
			clear_bit(DDRD , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTD AS INPUT PIN **/
			break;
			
			default: /** DO NOTHING **/
			en_a_dirstate = NOT_VALID_DIRECTION ; /** RETURN AS DIR NOT VALID ERRORS **/
 616:	81 e0       	ldi	r24, 0x01	; 1
 618:	08 95       	ret
			case DIO_PORTD:
			set_bit(DDRD , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
			
			default:  /** DO NOTHING **/
			en_a_dirstate = NOT_VALID_DIRECTION ; /** RETURN AS DIR NOT VALID ERRORS **/
 61a:	81 e0       	ldi	r24, 0x01	; 1
		en_a_dirstate = NOT_VALID_DIRECTION ; /** RETURN AS DIR NOT VALID ERRORS **/
		break ; 
	} 
	
	return en_a_dirstate ; /** RETURN THE STATE OF FUNCTION **/
}
 61c:	08 95       	ret

0000061e <DIO_setpinvalue>:
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
	
	switch(u8_a_pinval)
 61e:	44 23       	and	r20, r20
 620:	19 f0       	breq	.+6      	; 0x628 <DIO_setpinvalue+0xa>
 622:	41 30       	cpi	r20, 0x01	; 1
 624:	e9 f1       	breq	.+122    	; 0x6a0 <DIO_setpinvalue+0x82>
 626:	74 c0       	rjmp	.+232    	; 0x710 <DIO_setpinvalue+0xf2>
	{
		case DIO_PIN_LOW:  /** IN CASE PIN VALUE IS LOW */
		
		switch(u8_a_portid)  /** SWITCH CASE ON THE PORT ID */ 
 628:	81 30       	cpi	r24, 0x01	; 1
 62a:	99 f0       	breq	.+38     	; 0x652 <DIO_setpinvalue+0x34>
 62c:	28 f0       	brcs	.+10     	; 0x638 <DIO_setpinvalue+0x1a>
 62e:	82 30       	cpi	r24, 0x02	; 2
 630:	e9 f0       	breq	.+58     	; 0x66c <DIO_setpinvalue+0x4e>
 632:	83 30       	cpi	r24, 0x03	; 3
 634:	41 f1       	breq	.+80     	; 0x686 <DIO_setpinvalue+0x68>
 636:	6e c0       	rjmp	.+220    	; 0x714 <DIO_setpinvalue+0xf6>
		{
			case DIO_PORTA:
			clear_bit(PORTA , u8_a_pinid);       /** SET THIS PIN AS LOW **/
 638:	2b b3       	in	r18, 0x1b	; 27
 63a:	81 e0       	ldi	r24, 0x01	; 1
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	02 c0       	rjmp	.+4      	; 0x644 <DIO_setpinvalue+0x26>
 640:	88 0f       	add	r24, r24
 642:	99 1f       	adc	r25, r25
 644:	6a 95       	dec	r22
 646:	e2 f7       	brpl	.-8      	; 0x640 <DIO_setpinvalue+0x22>
 648:	80 95       	com	r24
 64a:	82 23       	and	r24, r18
 64c:	8b bb       	out	0x1b, r24	; 27
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
 64e:	80 e0       	ldi	r24, 0x00	; 0
		
		switch(u8_a_portid)  /** SWITCH CASE ON THE PORT ID */ 
		{
			case DIO_PORTA:
			clear_bit(PORTA , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
 650:	08 95       	ret
			
			case DIO_PORTB:
			clear_bit(PORTB , u8_a_pinid);       /** SET THIS PIN AS LOW **/
 652:	28 b3       	in	r18, 0x18	; 24
 654:	81 e0       	ldi	r24, 0x01	; 1
 656:	90 e0       	ldi	r25, 0x00	; 0
 658:	02 c0       	rjmp	.+4      	; 0x65e <DIO_setpinvalue+0x40>
 65a:	88 0f       	add	r24, r24
 65c:	99 1f       	adc	r25, r25
 65e:	6a 95       	dec	r22
 660:	e2 f7       	brpl	.-8      	; 0x65a <DIO_setpinvalue+0x3c>
 662:	80 95       	com	r24
 664:	82 23       	and	r24, r18
 666:	88 bb       	out	0x18, r24	; 24
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
 668:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(PORTA , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
			
			case DIO_PORTB:
			clear_bit(PORTB , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
 66a:	08 95       	ret
			
			case DIO_PORTC:
			clear_bit(PORTC , u8_a_pinid);       /** SET THIS PIN AS LOW **/
 66c:	25 b3       	in	r18, 0x15	; 21
 66e:	81 e0       	ldi	r24, 0x01	; 1
 670:	90 e0       	ldi	r25, 0x00	; 0
 672:	02 c0       	rjmp	.+4      	; 0x678 <DIO_setpinvalue+0x5a>
 674:	88 0f       	add	r24, r24
 676:	99 1f       	adc	r25, r25
 678:	6a 95       	dec	r22
 67a:	e2 f7       	brpl	.-8      	; 0x674 <DIO_setpinvalue+0x56>
 67c:	80 95       	com	r24
 67e:	82 23       	and	r24, r18
 680:	85 bb       	out	0x15, r24	; 21
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
 682:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(PORTB , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
			
			case DIO_PORTC:
			clear_bit(PORTC , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
 684:	08 95       	ret
			
			case DIO_PORTD:
			clear_bit(PORTD , u8_a_pinid);       /** SET THIS PIN AS LOW **/
 686:	22 b3       	in	r18, 0x12	; 18
 688:	81 e0       	ldi	r24, 0x01	; 1
 68a:	90 e0       	ldi	r25, 0x00	; 0
 68c:	02 c0       	rjmp	.+4      	; 0x692 <DIO_setpinvalue+0x74>
 68e:	88 0f       	add	r24, r24
 690:	99 1f       	adc	r25, r25
 692:	6a 95       	dec	r22
 694:	e2 f7       	brpl	.-8      	; 0x68e <DIO_setpinvalue+0x70>
 696:	80 95       	com	r24
 698:	82 23       	and	r24, r18
 69a:	82 bb       	out	0x12, r24	; 18
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
 69c:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(PORTC , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
			
			case DIO_PORTD:
			clear_bit(PORTD , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
 69e:	08 95       	ret
		} 
		break;
		
		case DIO_PIN_HIGH:
		
		switch(u8_a_portid)
 6a0:	81 30       	cpi	r24, 0x01	; 1
 6a2:	91 f0       	breq	.+36     	; 0x6c8 <DIO_setpinvalue+0xaa>
 6a4:	28 f0       	brcs	.+10     	; 0x6b0 <DIO_setpinvalue+0x92>
 6a6:	82 30       	cpi	r24, 0x02	; 2
 6a8:	d9 f0       	breq	.+54     	; 0x6e0 <DIO_setpinvalue+0xc2>
 6aa:	83 30       	cpi	r24, 0x03	; 3
 6ac:	29 f1       	breq	.+74     	; 0x6f8 <DIO_setpinvalue+0xda>
 6ae:	34 c0       	rjmp	.+104    	; 0x718 <DIO_setpinvalue+0xfa>
		{
			case DIO_PORTA:
			set_bit(PORTA , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
 6b0:	2b b3       	in	r18, 0x1b	; 27
 6b2:	81 e0       	ldi	r24, 0x01	; 1
 6b4:	90 e0       	ldi	r25, 0x00	; 0
 6b6:	02 c0       	rjmp	.+4      	; 0x6bc <DIO_setpinvalue+0x9e>
 6b8:	88 0f       	add	r24, r24
 6ba:	99 1f       	adc	r25, r25
 6bc:	6a 95       	dec	r22
 6be:	e2 f7       	brpl	.-8      	; 0x6b8 <DIO_setpinvalue+0x9a>
 6c0:	82 2b       	or	r24, r18
 6c2:	8b bb       	out	0x1b, r24	; 27
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
 6c4:	80 e0       	ldi	r24, 0x00	; 0
		
		switch(u8_a_portid)
		{
			case DIO_PORTA:
			set_bit(PORTA , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
 6c6:	08 95       	ret
			
			case DIO_PORTB:
			set_bit(PORTB , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
 6c8:	28 b3       	in	r18, 0x18	; 24
 6ca:	81 e0       	ldi	r24, 0x01	; 1
 6cc:	90 e0       	ldi	r25, 0x00	; 0
 6ce:	02 c0       	rjmp	.+4      	; 0x6d4 <DIO_setpinvalue+0xb6>
 6d0:	88 0f       	add	r24, r24
 6d2:	99 1f       	adc	r25, r25
 6d4:	6a 95       	dec	r22
 6d6:	e2 f7       	brpl	.-8      	; 0x6d0 <DIO_setpinvalue+0xb2>
 6d8:	82 2b       	or	r24, r18
 6da:	88 bb       	out	0x18, r24	; 24
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
 6dc:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(PORTA , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
			
			case DIO_PORTB:
			set_bit(PORTB , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
 6de:	08 95       	ret
			
			case DIO_PORTC:
			set_bit(PORTC , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
 6e0:	25 b3       	in	r18, 0x15	; 21
 6e2:	81 e0       	ldi	r24, 0x01	; 1
 6e4:	90 e0       	ldi	r25, 0x00	; 0
 6e6:	02 c0       	rjmp	.+4      	; 0x6ec <DIO_setpinvalue+0xce>
 6e8:	88 0f       	add	r24, r24
 6ea:	99 1f       	adc	r25, r25
 6ec:	6a 95       	dec	r22
 6ee:	e2 f7       	brpl	.-8      	; 0x6e8 <DIO_setpinvalue+0xca>
 6f0:	82 2b       	or	r24, r18
 6f2:	85 bb       	out	0x15, r24	; 21
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
 6f4:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(PORTB , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
			
			case DIO_PORTC:
			set_bit(PORTC , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
 6f6:	08 95       	ret
			
			case DIO_PORTD:
			set_bit(PORTD , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
 6f8:	22 b3       	in	r18, 0x12	; 18
 6fa:	81 e0       	ldi	r24, 0x01	; 1
 6fc:	90 e0       	ldi	r25, 0x00	; 0
 6fe:	02 c0       	rjmp	.+4      	; 0x704 <DIO_setpinvalue+0xe6>
 700:	88 0f       	add	r24, r24
 702:	99 1f       	adc	r25, r25
 704:	6a 95       	dec	r22
 706:	e2 f7       	brpl	.-8      	; 0x700 <DIO_setpinvalue+0xe2>
 708:	82 2b       	or	r24, r18
 70a:	82 bb       	out	0x12, r24	; 18
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
 70c:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(PORTC , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
			
			case DIO_PORTD:
			set_bit(PORTD , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
 70e:	08 95       	ret
			break;
		} 
		break;
		
		default :
		en_a_valstate = NOT_VALID_VALUE ;  /** RETURN VALUE AS NOT VALID **/
 710:	81 e0       	ldi	r24, 0x01	; 1
 712:	08 95       	ret
			case DIO_PORTD:
			clear_bit(PORTD , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
			
			default:
			en_a_valstate = NOT_VALID_VALUE ;  /** RETURN VALUE AS NOT VALID **/
 714:	81 e0       	ldi	r24, 0x01	; 1
 716:	08 95       	ret
			case DIO_PORTD:
			set_bit(PORTD , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
			
			default:
			en_a_valstate = NOT_VALID_VALUE ;  /** RETURN VALUE AS NOT VALID **/
 718:	81 e0       	ldi	r24, 0x01	; 1
		en_a_valstate = NOT_VALID_VALUE ;  /** RETURN VALUE AS NOT VALID **/
		break ;
	} 
	
	return en_a_valstate ; /** RETURN THE FINAL STATE OF THE FUNCTION */
}
 71a:	08 95       	ret

0000071c <DIO_readpin>:
/******************************************************************/
PinRead_t DIO_readpin(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t* u8_a_val)
{
	PinRead_t en_a_Pinstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
	
	switch(u8_a_portid)  /** SWITCH CASE ON PORT ID **/
 71c:	81 30       	cpi	r24, 0x01	; 1
 71e:	99 f0       	breq	.+38     	; 0x746 <DIO_readpin+0x2a>
 720:	28 f0       	brcs	.+10     	; 0x72c <DIO_readpin+0x10>
 722:	82 30       	cpi	r24, 0x02	; 2
 724:	e9 f0       	breq	.+58     	; 0x760 <DIO_readpin+0x44>
 726:	83 30       	cpi	r24, 0x03	; 3
 728:	41 f1       	breq	.+80     	; 0x77a <DIO_readpin+0x5e>
 72a:	34 c0       	rjmp	.+104    	; 0x794 <DIO_readpin+0x78>
	{
		case DIO_PORTA:               /** PORTA  **/
		*u8_a_val = get_bit(PINA , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
 72c:	89 b3       	in	r24, 0x19	; 25
 72e:	90 e0       	ldi	r25, 0x00	; 0
 730:	02 c0       	rjmp	.+4      	; 0x736 <DIO_readpin+0x1a>
 732:	95 95       	asr	r25
 734:	87 95       	ror	r24
 736:	6a 95       	dec	r22
 738:	e2 f7       	brpl	.-8      	; 0x732 <DIO_readpin+0x16>
 73a:	81 70       	andi	r24, 0x01	; 1
 73c:	89 bb       	out	0x19, r24	; 25
 73e:	fa 01       	movw	r30, r20
 740:	80 83       	st	Z, r24
/* INPUT   : u8_a_portid , PINID , POINTER TO SET THE VALUE IN IT      */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_readpin(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t* u8_a_val)
{
	PinRead_t en_a_Pinstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
 742:	80 e0       	ldi	r24, 0x00	; 0
	
	switch(u8_a_portid)  /** SWITCH CASE ON PORT ID **/
	{
		case DIO_PORTA:               /** PORTA  **/
		*u8_a_val = get_bit(PINA , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
 744:	08 95       	ret
		
		case DIO_PORTB:               /** PORTB  **/
		*u8_a_val = get_bit(PINB , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
 746:	86 b3       	in	r24, 0x16	; 22
 748:	90 e0       	ldi	r25, 0x00	; 0
 74a:	02 c0       	rjmp	.+4      	; 0x750 <DIO_readpin+0x34>
 74c:	95 95       	asr	r25
 74e:	87 95       	ror	r24
 750:	6a 95       	dec	r22
 752:	e2 f7       	brpl	.-8      	; 0x74c <DIO_readpin+0x30>
 754:	81 70       	andi	r24, 0x01	; 1
 756:	86 bb       	out	0x16, r24	; 22
 758:	fa 01       	movw	r30, r20
 75a:	80 83       	st	Z, r24
/* INPUT   : u8_a_portid , PINID , POINTER TO SET THE VALUE IN IT      */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_readpin(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t* u8_a_val)
{
	PinRead_t en_a_Pinstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
 75c:	80 e0       	ldi	r24, 0x00	; 0
		*u8_a_val = get_bit(PINA , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
		
		case DIO_PORTB:               /** PORTB  **/
		*u8_a_val = get_bit(PINB , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
 75e:	08 95       	ret
		
		case DIO_PORTC:               /** PORTC  **/
		*u8_a_val = get_bit(PINC , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
 760:	83 b3       	in	r24, 0x13	; 19
 762:	90 e0       	ldi	r25, 0x00	; 0
 764:	02 c0       	rjmp	.+4      	; 0x76a <DIO_readpin+0x4e>
 766:	95 95       	asr	r25
 768:	87 95       	ror	r24
 76a:	6a 95       	dec	r22
 76c:	e2 f7       	brpl	.-8      	; 0x766 <DIO_readpin+0x4a>
 76e:	81 70       	andi	r24, 0x01	; 1
 770:	83 bb       	out	0x13, r24	; 19
 772:	fa 01       	movw	r30, r20
 774:	80 83       	st	Z, r24
/* INPUT   : u8_a_portid , PINID , POINTER TO SET THE VALUE IN IT      */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_readpin(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t* u8_a_val)
{
	PinRead_t en_a_Pinstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
 776:	80 e0       	ldi	r24, 0x00	; 0
		*u8_a_val = get_bit(PINB , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
		
		case DIO_PORTC:               /** PORTC  **/
		*u8_a_val = get_bit(PINC , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
 778:	08 95       	ret
		
		case DIO_PORTD:               /** PORTD  **/
		*u8_a_val = get_bit(PIND , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
 77a:	80 b3       	in	r24, 0x10	; 16
 77c:	90 e0       	ldi	r25, 0x00	; 0
 77e:	02 c0       	rjmp	.+4      	; 0x784 <DIO_readpin+0x68>
 780:	95 95       	asr	r25
 782:	87 95       	ror	r24
 784:	6a 95       	dec	r22
 786:	e2 f7       	brpl	.-8      	; 0x780 <DIO_readpin+0x64>
 788:	81 70       	andi	r24, 0x01	; 1
 78a:	80 bb       	out	0x10, r24	; 16
 78c:	fa 01       	movw	r30, r20
 78e:	80 83       	st	Z, r24
/* INPUT   : u8_a_portid , PINID , POINTER TO SET THE VALUE IN IT      */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_readpin(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t* u8_a_val)
{
	PinRead_t en_a_Pinstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
 790:	80 e0       	ldi	r24, 0x00	; 0
		*u8_a_val = get_bit(PINC , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
		
		case DIO_PORTD:               /** PORTD  **/
		*u8_a_val = get_bit(PIND , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
 792:	08 95       	ret
		
		default:
		en_a_Pinstate = NOT_VALID_READ ;  /** READ IS NOT VALID  **/
 794:	81 e0       	ldi	r24, 0x01	; 1
		break;
	} 
	
	return en_a_Pinstate ; /** RETURN THE FINAL STATE OF THE FUNCTION **/	
}
 796:	08 95       	ret

00000798 <TWI_init>:
    /** Wait for TWINT flag set in TWCR Register (start bit is send successfully) **/
    while(BIT_IS_CLEAR(TWCR,TWINT));
	
    /** READ DATA **/
    return TWDR;
}
 798:	82 e0       	ldi	r24, 0x02	; 2
 79a:	80 b9       	out	0x00, r24	; 0
 79c:	11 b8       	out	0x01, r1	; 1
 79e:	84 e0       	ldi	r24, 0x04	; 4
 7a0:	86 bf       	out	0x36, r24	; 54
 7a2:	08 95       	ret

000007a4 <TWI_start>:
 7a4:	84 ea       	ldi	r24, 0xA4	; 164
 7a6:	86 bf       	out	0x36, r24	; 54
 7a8:	06 b6       	in	r0, 0x36	; 54
 7aa:	07 fe       	sbrs	r0, 7
 7ac:	fd cf       	rjmp	.-6      	; 0x7a8 <TWI_start+0x4>
 7ae:	08 95       	ret

000007b0 <TWI_readwithnack>:
	/************************************************/
	/* CLEAR THE TWINT FLAG                        **/
	/* DISABLE ACK BIT AFTER READING THE DATA      **/
	/* ENABLE TWI MODULE                           **/
	/************************************************/
	TWCR = (1 << TWINT) | (1 << TWEN) ;
 7b0:	84 e8       	ldi	r24, 0x84	; 132
 7b2:	86 bf       	out	0x36, r24	; 54
	
	/** Wait for TWINT flag set in TWCR Register (start bit is send successfully) **/
	while(BIT_IS_CLEAR(TWCR,TWINT));
 7b4:	06 b6       	in	r0, 0x36	; 54
 7b6:	07 fe       	sbrs	r0, 7
 7b8:	fd cf       	rjmp	.-6      	; 0x7b4 <TWI_readwithnack+0x4>
	
	/** READ DATA **/
	return TWDR;
 7ba:	83 b1       	in	r24, 0x03	; 3
}
 7bc:	08 95       	ret

000007be <TWI_write>:
/** RETURNS   : VOID                                    **/
/*********************************************************/
void TWI_write(uint8_t u8_a_data)
{
	/** PREPARE DATA FOR SENDING **/
    TWDR = u8_a_data;
 7be:	83 b9       	out	0x03, r24	; 3
    
	/***************************************/ 
	/** CLEAR THE TWINT FLAG              **/
	/** ENABLE TWI MODULE                 **/
	/***************************************/ 
    TWCR = (1 << TWINT) | (1 << TWEN);
 7c0:	84 e8       	ldi	r24, 0x84	; 132
 7c2:	86 bf       	out	0x36, r24	; 54
	
    /** Wait for TWINT flag set in TWCR Register (start bit is send successfully) **/
    while(BIT_IS_CLEAR(TWCR,TWINT));
 7c4:	06 b6       	in	r0, 0x36	; 54
 7c6:	07 fe       	sbrs	r0, 7
 7c8:	fd cf       	rjmp	.-6      	; 0x7c4 <TWI_write+0x6>
}
 7ca:	08 95       	ret

000007cc <TWI_stop>:
	/****************************************/ 
	/** CLEAR THE TWINT FLAG               **/
	/** SEND STIOP BIT EVENT               **/
	/** ENABLE TWI MODULE                  **/
	/****************************************/
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
 7cc:	84 e9       	ldi	r24, 0x94	; 148
 7ce:	86 bf       	out	0x36, r24	; 54
 7d0:	08 95       	ret

000007d2 <TWI_getstatus>:
uint8_t TWI_getstatus(void)
{
	uint8_t u8_a_status ; /** VARIABLE TO HOLD THE STATUS CODE VALUE **/
	
	/** MASKING THE FIRST THREE BITS TO GET THE LAST 5 BITS ONLY **/
	u8_a_status = TWSR & 0xF8;
 7d2:	81 b1       	in	r24, 0x01	; 1
	
	return u8_a_status;
 7d4:	88 7f       	andi	r24, 0xF8	; 248
 7d6:	08 95       	ret

000007d8 <SPI_initmaster>:
{
	while( (SPI->SPSR &  (1 << 7)) == 0); /** WAIT UNTILL THE RECEIPTION FLAG RAISED **/
	
	*u8_a_recdata = SPI->SPDR ; /** SAVE THE DATA FROM SPDR **/
	
}
 7d8:	41 e0       	ldi	r20, 0x01	; 1
 7da:	64 e0       	ldi	r22, 0x04	; 4
 7dc:	81 e0       	ldi	r24, 0x01	; 1
 7de:	0e 94 90 02 	call	0x520	; 0x520 <DIO_setpindir>
 7e2:	41 e0       	ldi	r20, 0x01	; 1
 7e4:	65 e0       	ldi	r22, 0x05	; 5
 7e6:	81 e0       	ldi	r24, 0x01	; 1
 7e8:	0e 94 90 02 	call	0x520	; 0x520 <DIO_setpindir>
 7ec:	40 e0       	ldi	r20, 0x00	; 0
 7ee:	66 e0       	ldi	r22, 0x06	; 6
 7f0:	81 e0       	ldi	r24, 0x01	; 1
 7f2:	0e 94 90 02 	call	0x520	; 0x520 <DIO_setpindir>
 7f6:	41 e0       	ldi	r20, 0x01	; 1
 7f8:	67 e0       	ldi	r22, 0x07	; 7
 7fa:	81 e0       	ldi	r24, 0x01	; 1
 7fc:	0e 94 90 02 	call	0x520	; 0x520 <DIO_setpindir>
 800:	8d b1       	in	r24, 0x0d	; 13
 802:	81 60       	ori	r24, 0x01	; 1
 804:	8d b9       	out	0x0d, r24	; 13
 806:	8d b1       	in	r24, 0x0d	; 13
 808:	82 60       	ori	r24, 0x02	; 2
 80a:	8d b9       	out	0x0d, r24	; 13
 80c:	8e b1       	in	r24, 0x0e	; 14
 80e:	8e 7f       	andi	r24, 0xFE	; 254
 810:	8e b9       	out	0x0e, r24	; 14
 812:	8e b1       	in	r24, 0x0e	; 14
 814:	8e 7f       	andi	r24, 0xFE	; 254
 816:	8e b9       	out	0x0e, r24	; 14
 818:	8d b1       	in	r24, 0x0d	; 13
 81a:	8f 77       	andi	r24, 0x7F	; 127
 81c:	8d b9       	out	0x0d, r24	; 13
 81e:	8d b1       	in	r24, 0x0d	; 13
 820:	8f 7d       	andi	r24, 0xDF	; 223
 822:	8d b9       	out	0x0d, r24	; 13
 824:	8d b1       	in	r24, 0x0d	; 13
 826:	87 7f       	andi	r24, 0xF7	; 247
 828:	8d b9       	out	0x0d, r24	; 13
 82a:	8d b1       	in	r24, 0x0d	; 13
 82c:	8b 7f       	andi	r24, 0xFB	; 251
 82e:	8d b9       	out	0x0d, r24	; 13
 830:	8d b1       	in	r24, 0x0d	; 13
 832:	80 61       	ori	r24, 0x10	; 16
 834:	8d b9       	out	0x0d, r24	; 13
 836:	8d b1       	in	r24, 0x0d	; 13
 838:	80 64       	ori	r24, 0x40	; 64
 83a:	8d b9       	out	0x0d, r24	; 13
 83c:	08 95       	ret

0000083e <SPI_masterinittransmit>:
 83e:	40 e0       	ldi	r20, 0x00	; 0
 840:	64 e0       	ldi	r22, 0x04	; 4
 842:	81 e0       	ldi	r24, 0x01	; 1
 844:	0e 94 0f 03 	call	0x61e	; 0x61e <DIO_setpinvalue>
 848:	08 95       	ret

0000084a <SPI_masterendtransmit>:
 84a:	41 e0       	ldi	r20, 0x01	; 1
 84c:	64 e0       	ldi	r22, 0x04	; 4
 84e:	81 e0       	ldi	r24, 0x01	; 1
 850:	0e 94 0f 03 	call	0x61e	; 0x61e <DIO_setpinvalue>
 854:	08 95       	ret

00000856 <SPI_sendbyte>:
 856:	8f b9       	out	0x0f, r24	; 15
 858:	77 9b       	sbis	0x0e, 7	; 14
 85a:	fe cf       	rjmp	.-4      	; 0x858 <SPI_sendbyte+0x2>
 85c:	08 95       	ret

0000085e <SPI_sendstring>:
/** FUNCTION FOR MASTER TO SEND STRING                          **/
/** ARGUMENTS  : u8_a_str (string)                              **/
/** RETURNS    : en_a_spierrstatus                              **/
/*****************************************************************/
en_a_spierrstatus SPI_sendstring(const uint8_t * u8_a_str)
{
 85e:	0f 93       	push	r16
 860:	1f 93       	push	r17
 862:	cf 93       	push	r28
 864:	8c 01       	movw	r16, r24
	uint8_t u8_L_counter = 0 ; /** COUNTER FOR STRING LETTERS **/
 866:	c0 e0       	ldi	r28, 0x00	; 0
	
	while (u8_a_str[u8_L_counter] != '\0')
 868:	03 c0       	rjmp	.+6      	; 0x870 <__stack+0x11>
	{
		SPI_sendbyte(u8_a_str[u8_L_counter]); /** SEND CHARACTER **/
 86a:	0e 94 2b 04 	call	0x856	; 0x856 <SPI_sendbyte>
		
		u8_L_counter++; /* MOVE TO THE SECOND LETTER */
 86e:	cf 5f       	subi	r28, 0xFF	; 255
/*****************************************************************/
en_a_spierrstatus SPI_sendstring(const uint8_t * u8_a_str)
{
	uint8_t u8_L_counter = 0 ; /** COUNTER FOR STRING LETTERS **/
	
	while (u8_a_str[u8_L_counter] != '\0')
 870:	f8 01       	movw	r30, r16
 872:	ec 0f       	add	r30, r28
 874:	f1 1d       	adc	r31, r1
 876:	80 81       	ld	r24, Z
 878:	81 11       	cpse	r24, r1
 87a:	f7 cf       	rjmp	.-18     	; 0x86a <__stack+0xb>
	{
		SPI_sendbyte(u8_a_str[u8_L_counter]); /** SEND CHARACTER **/
		
		u8_L_counter++; /* MOVE TO THE SECOND LETTER */
	}
}
 87c:	cf 91       	pop	r28
 87e:	1f 91       	pop	r17
 880:	0f 91       	pop	r16
 882:	08 95       	ret

00000884 <TMR0_init>:
	 /* TIMER MODE OF TMR0 */
	#elif TIMER0_CLK_SRC == INTERNAL_CLK_SRC
	
	 #if TIMER0_MODE == TMR0_NORMAL_MODE
	 
	 clear_bit(TCCR0 , 7);
 884:	83 b7       	in	r24, 0x33	; 51
 886:	8f 77       	andi	r24, 0x7F	; 127
 888:	83 bf       	out	0x33, r24	; 51
	 clear_bit(TCCR0 , 6);
 88a:	83 b7       	in	r24, 0x33	; 51
 88c:	8f 7b       	andi	r24, 0xBF	; 191
 88e:	83 bf       	out	0x33, r24	; 51
	 clear_bit(TCCR0 , 3);
 890:	83 b7       	in	r24, 0x33	; 51
 892:	87 7f       	andi	r24, 0xF7	; 247
 894:	83 bf       	out	0x33, r24	; 51
	 clear_bit(TCCR0 , 4);
 896:	83 b7       	in	r24, 0x33	; 51
 898:	8f 7e       	andi	r24, 0xEF	; 239
 89a:	83 bf       	out	0x33, r24	; 51
	 clear_bit(TCCR0 , 5);
 89c:	83 b7       	in	r24, 0x33	; 51
 89e:	8f 7d       	andi	r24, 0xDF	; 223
 8a0:	83 bf       	out	0x33, r24	; 51
	  #endif
	 #endif
	#endif
	
	return en_a_initstatus ; /** RETURN THE STATUS OF INITIALIZATION **/
}
 8a2:	80 e0       	ldi	r24, 0x00	; 0
 8a4:	08 95       	ret

000008a6 <TMR0_start>:
{
	TMR0_start_error en_a_startstatus = VALID_START ; /** VARIABLE TO RETURN THE STATUS OF START **/
	
	#if TIMER0_PRESCALER_VAL == PRESCALER_1024
	
	set_bit(TCCR0 , 0);
 8a6:	83 b7       	in	r24, 0x33	; 51
 8a8:	81 60       	ori	r24, 0x01	; 1
 8aa:	83 bf       	out	0x33, r24	; 51
	clear_bit(TCCR0 , 1);
 8ac:	83 b7       	in	r24, 0x33	; 51
 8ae:	8d 7f       	andi	r24, 0xFD	; 253
 8b0:	83 bf       	out	0x33, r24	; 51
	set_bit(TCCR0 , 2);
 8b2:	83 b7       	in	r24, 0x33	; 51
 8b4:	84 60       	ori	r24, 0x04	; 4
 8b6:	83 bf       	out	0x33, r24	; 51
	en_a_startstatus = VALID_START ; /** START DONE PROBERLY **/
	
	#endif
	
	return en_a_startstatus ; /** RETURN THE STATUS **/
}
 8b8:	80 e0       	ldi	r24, 0x00	; 0
 8ba:	08 95       	ret

000008bc <TMR0_stop>:
TMR0_stop_error TMR0_stop(void)
{
	TMR0_stop_error en_a_stopStatus = VALID_STOP ; /** VARIABLE TO RETURN THE STATUS **/
	
	/** SET CONFIGURATIONS AS NO CLOCK SOURCE **/
	clear_bit(TCCR0 , 0);
 8bc:	83 b7       	in	r24, 0x33	; 51
 8be:	8e 7f       	andi	r24, 0xFE	; 254
 8c0:	83 bf       	out	0x33, r24	; 51
	clear_bit(TCCR0 , 1);
 8c2:	83 b7       	in	r24, 0x33	; 51
 8c4:	8d 7f       	andi	r24, 0xFD	; 253
 8c6:	83 bf       	out	0x33, r24	; 51
	clear_bit(TCCR0 , 2);
 8c8:	83 b7       	in	r24, 0x33	; 51
 8ca:	8b 7f       	andi	r24, 0xFB	; 251
 8cc:	83 bf       	out	0x33, r24	; 51
	
	en_a_stopStatus = VALID_STOP ; /** STOP DONE PROPERLY **/
	
	return en_a_stopStatus ; /** RETURN THE STATUS **/
	
}
 8ce:	80 e0       	ldi	r24, 0x00	; 0
 8d0:	08 95       	ret

000008d2 <TMR0_delayms>:
	/******************************************************************************************/
	/**               THIS CALCULATIONS CONFIGURED AS F_CPU   16 MHZ                         **/
	/******************************************************************************************/
	#if TIMER0_PRESCALER_VAL == PRESCALER_1024  /** CHECK THE PRESCALLER FROM CONFIG FILE **/
	 
        u32_gs_tmr0nuofovs = (u32_a_delayms / 16.384);   /** CALCULATING NUMBER OF OVERFLOWS ( DESIRED DELAY / TIME OF OVER FLOW ) **/ 
 8d2:	0e 94 b1 05 	call	0xb62	; 0xb62 <__floatunsisf>
 8d6:	2f e6       	ldi	r18, 0x6F	; 111
 8d8:	32 e1       	ldi	r19, 0x12	; 18
 8da:	43 e8       	ldi	r20, 0x83	; 131
 8dc:	51 e4       	ldi	r21, 0x41	; 65
 8de:	0e 94 10 05 	call	0xa20	; 0xa20 <__divsf3>
 8e2:	0e 94 82 05 	call	0xb04	; 0xb04 <__fixunssfsi>
 8e6:	60 93 26 02 	sts	0x0226, r22	; 0x800226 <u32_gs_tmr0nuofovs>
 8ea:	70 93 27 02 	sts	0x0227, r23	; 0x800227 <u32_gs_tmr0nuofovs+0x1>
 8ee:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <u32_gs_tmr0nuofovs+0x2>
 8f2:	90 93 29 02 	sts	0x0229, r25	; 0x800229 <u32_gs_tmr0nuofovs+0x3>
	
        TCNT0 = 0 ;   /** SET THE INITIAL VALUE IN TCNT0 REGISTER **/
 8f6:	12 be       	out	0x32, r1	; 50
	
	    en_a_delaystatus = VALID_DELAY ; /** VALID DELAY CONFIGURATIN **/
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
 8f8:	0e 94 53 04 	call	0x8a6	; 0x8a6 <TMR0_start>
/** RETURNS    : TMR0_delay                                                    */
/*******************************************************************************/
TMR0_delay_error TMR0_delayms(uint32_t u32_a_delayms)
{
	
	uint32_t u32_a_overflowcounter = 0 ;
 8fc:	40 e0       	ldi	r20, 0x00	; 0
 8fe:	50 e0       	ldi	r21, 0x00	; 0
 900:	ba 01       	movw	r22, r20
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
	
	while ( u32_a_overflowcounter < u32_gs_tmr0nuofovs ) /** STUCK IN THIS LOOP UNTILL THIS CONDITION IS FALSE **/
 902:	0a c0       	rjmp	.+20     	; 0x918 <TMR0_delayms+0x46>
	{
		while((TIFR & (1 << 0)) == 0); /** DO NOTHING UNTILL THIS FLAG RAISED (OVERFLOW HAPPENED) **/
 904:	08 b6       	in	r0, 0x38	; 56
 906:	00 fe       	sbrs	r0, 0
 908:	fd cf       	rjmp	.-6      	; 0x904 <TMR0_delayms+0x32>
		
		set_bit(TIFR , 0);        /** CLEAR THE FLAG BY SOFTWARE **/
 90a:	88 b7       	in	r24, 0x38	; 56
 90c:	81 60       	ori	r24, 0x01	; 1
 90e:	88 bf       	out	0x38, r24	; 56
		
		u32_a_overflowcounter++ ; /** INCREASE THE OVERFLOWS BY ONE **/
 910:	4f 5f       	subi	r20, 0xFF	; 255
 912:	5f 4f       	sbci	r21, 0xFF	; 255
 914:	6f 4f       	sbci	r22, 0xFF	; 255
 916:	7f 4f       	sbci	r23, 0xFF	; 255
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
	
	while ( u32_a_overflowcounter < u32_gs_tmr0nuofovs ) /** STUCK IN THIS LOOP UNTILL THIS CONDITION IS FALSE **/
 918:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <u32_gs_tmr0nuofovs>
 91c:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <u32_gs_tmr0nuofovs+0x1>
 920:	a0 91 28 02 	lds	r26, 0x0228	; 0x800228 <u32_gs_tmr0nuofovs+0x2>
 924:	b0 91 29 02 	lds	r27, 0x0229	; 0x800229 <u32_gs_tmr0nuofovs+0x3>
 928:	48 17       	cp	r20, r24
 92a:	59 07       	cpc	r21, r25
 92c:	6a 07       	cpc	r22, r26
 92e:	7b 07       	cpc	r23, r27
 930:	48 f3       	brcs	.-46     	; 0x904 <TMR0_delayms+0x32>
		set_bit(TIFR , 0);        /** CLEAR THE FLAG BY SOFTWARE **/
		
		u32_a_overflowcounter++ ; /** INCREASE THE OVERFLOWS BY ONE **/
	}
	
	u32_gs_tmr0nuofovs = 0 ; /** REINTIALIZE THE OVERFLOWS COUNTER TO 0 AGAIN **/
 932:	10 92 26 02 	sts	0x0226, r1	; 0x800226 <u32_gs_tmr0nuofovs>
 936:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <u32_gs_tmr0nuofovs+0x1>
 93a:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <u32_gs_tmr0nuofovs+0x2>
 93e:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <u32_gs_tmr0nuofovs+0x3>

	TMR0_stop();   /** STOP TMR0 TOSTART FROM 0 WHEN IT CALLED AGAIN **/
 942:	0e 94 5e 04 	call	0x8bc	; 0x8bc <TMR0_stop>
	
	return en_a_delaystatus ; /** RETURN THE STATUS **/
}
 946:	80 e0       	ldi	r24, 0x00	; 0
 948:	08 95       	ret

0000094a <UART_init>:
/** RETURNS   : uart_errorstatus                             **/
/**************************************************************/
uart_errorstatus UART_init(void)
{
		/** SET DIRECTIONS OF TX AND RX PINS **/
		DIO_setpindir(DIO_PORTD , DIO_PIN1 , DIO_PIN_OUTPUT);  /** SET TX PIN AS OUTPUT **/
 94a:	41 e0       	ldi	r20, 0x01	; 1
 94c:	61 e0       	ldi	r22, 0x01	; 1
 94e:	83 e0       	ldi	r24, 0x03	; 3
 950:	0e 94 90 02 	call	0x520	; 0x520 <DIO_setpindir>
		DIO_setpindir(DIO_PORTD , DIO_PIN0 , DIO_PIN_INPUT);   /** SET RX PIN AS INPUT  **/
 954:	40 e0       	ldi	r20, 0x00	; 0
 956:	60 e0       	ldi	r22, 0x00	; 0
 958:	83 e0       	ldi	r24, 0x03	; 3
 95a:	0e 94 90 02 	call	0x520	; 0x520 <DIO_setpindir>
// 		UBRRH = 0 ;
		
		#if BAUDRATE_VALUE == BAUDRATE_9600
		uint32_t u32_a_BRVALUE = 0; /** VARIABLE TO HOLD THE VALUE TO BE STORED IN UBRRL **/
		u32_a_BRVALUE = ((80000) / (16 * 96)) - 1; /** CALCULATE THE UBRRL VALUE **/
		UBRRL = u32_a_BRVALUE;       /** ASSIGN UBRRL **/
 95e:	83 e3       	ldi	r24, 0x33	; 51
 960:	89 b9       	out	0x09, r24	; 9
		u32_a_BRVALUE = ((16000000) / (16 * 115200)) - 1; /** CALCULATE THE UBRRL VALUE **/
		UBRRL = u32_a_BRVALUE ;       /** ASSIGN UBRRL **/
		#endif
		
		/** ENABLE TRANSMISSION AND RECEIVING **/
		set_bit(UCSRB , 3);
 962:	8a b1       	in	r24, 0x0a	; 10
 964:	88 60       	ori	r24, 0x08	; 8
 966:	8a b9       	out	0x0a, r24	; 10
		set_bit(UCSRB , 4);
 968:	8a b1       	in	r24, 0x0a	; 10
 96a:	80 61       	ori	r24, 0x10	; 16
 96c:	8a b9       	out	0x0a, r24	; 10
		
		/** SELECT THE FIRST BIT TO WRITE TO THE UCSRC REGISTER **/
 		set_bit(UCSRC , 7);
 96e:	80 b5       	in	r24, 0x20	; 32
 970:	80 68       	ori	r24, 0x80	; 128
 972:	80 bd       	out	0x20, r24	; 32
		clear_bit(UCSRC , 1);
		set_bit(UCSRC , 2);
		clear_bit(UCSRB , 2);
		
		#elif CHARACTER_SIZE == CHAR_SIZE_8BIT
		set_bit(UCSRC , 1);
 974:	80 b5       	in	r24, 0x20	; 32
 976:	82 60       	ori	r24, 0x02	; 2
 978:	80 bd       	out	0x20, r24	; 32
		set_bit(UCSRC , 2);
 97a:	80 b5       	in	r24, 0x20	; 32
 97c:	84 60       	ori	r24, 0x04	; 4
 97e:	80 bd       	out	0x20, r24	; 32
		clear_bit(UCSRB , 2);
 980:	8a b1       	in	r24, 0x0a	; 10
 982:	8b 7f       	andi	r24, 0xFB	; 251
 984:	8a b9       	out	0x0a, r24	; 10
		set_bit(UCSRB , 2);
		#endif
		
		
		#if PARITY_BIT_MODE == DISABLE_PARITY_BIT
		clear_bit(UCSRC , 4);
 986:	80 b5       	in	r24, 0x20	; 32
 988:	8f 7e       	andi	r24, 0xEF	; 239
 98a:	80 bd       	out	0x20, r24	; 32
		clear_bit(UCSRC , 5);
 98c:	80 b5       	in	r24, 0x20	; 32
 98e:	8f 7d       	andi	r24, 0xDF	; 223
 990:	80 bd       	out	0x20, r24	; 32
		set_bit(UCSRC , 4);
		set_bit(UCSRC , 5);
		#endif
		
		#if STOP_BITS == ONE_STOP_BIT
		clear_bit(UCSRC , 3);
 992:	80 b5       	in	r24, 0x20	; 32
 994:	87 7f       	andi	r24, 0xF7	; 247
 996:	80 bd       	out	0x20, r24	; 32
		set_bit(UCSRC , 3);
		#endif
		
		/** SET THE UART SYNCRONYZATION MODE **/
		#if UART_MODE == ASYNCRONOUS_MODE
		    clear_bit(UCSRC , 6);
 998:	80 b5       	in	r24, 0x20	; 32
 99a:	8f 7b       	andi	r24, 0xBF	; 191
 99c:	80 bd       	out	0x20, r24	; 32
		
		#if DOUBLE_SPEED_MODE == ENABLE_DOUBLE_SPEED_MODE
		    set_bit(UCSRA , 1);
		
		#elif DOUBLE_SPEED_MODE == DISABLE_DOUBLE_SPEED_MODE
		     clear_bit(UCSRA , 1);
 99e:	8b b1       	in	r24, 0x0b	; 11
 9a0:	8d 7f       	andi	r24, 0xFD	; 253
 9a2:	8b b9       	out	0x0b, r24	; 11
		
		#if MULTI_PROCESSOR_MODE == ENABLE_MULTIPROCESSOR_MODE
		    set_bit(UCSRA , 0);
		
		#elif MULTI_PROCESSOR_MODE == DISABLE_MULTIPROCESSOR_MODE
		     clear_bit(UCSRA , 0);
 9a4:	8b b1       	in	r24, 0x0b	; 11
 9a6:	8e 7f       	andi	r24, 0xFE	; 254
 9a8:	8b b9       	out	0x0b, r24	; 11
		
		#if RECEIVING_INTERRUPT == ENABLE_RECEIVING_INTERRUPT
     		set_bit(UCSRB , 7);
		
		#elif RECEIVING_INTERRUPT == DISABLE_RECEIVING_INTERRUPT	
		      clear_bit(UCSRB , 7);
 9aa:	8a b1       	in	r24, 0x0a	; 10
 9ac:	8f 77       	andi	r24, 0x7F	; 127
 9ae:	8a b9       	out	0x0a, r24	; 10

		#if TRANSMITTING_INTERRUPT == ENABLE_TRANSMITTING_INTERRUPT
     		set_bit(UCSRB , 6);
		
		#elif TRANSMITTING_INTERRUPT == DISABLE_TRANSMITTING_INTERRUPT	
		    clear_bit(UCSRB , 6);
 9b0:	8a b1       	in	r24, 0x0a	; 10
 9b2:	8f 7b       	andi	r24, 0xBF	; 191
 9b4:	8a b9       	out	0x0a, r24	; 10
		
		#if UDR_INTERRUPT == ENABLE_UDR_INTERRUPT
		    set_bit(UCSRB , 5);
		
		#elif UDR_INTERRUPT == DISABLE_UDR_INTERRUPT
		    clear_bit(UCSRB , 5);
 9b6:	8a b1       	in	r24, 0x0a	; 10
 9b8:	8f 7d       	andi	r24, 0xDF	; 223
 9ba:	8a b9       	out	0x0a, r24	; 10
		#endif
		
}
 9bc:	08 95       	ret

000009be <UART_sendchar>:
/** ARGUMENTS : ua_a_data                                    **/
/** RETURNS   : uart_errorstatus                             **/
/**************************************************************/
uart_errorstatus UART_sendchar(uint8_t ua_a_data)
{
	while( ! ( UCSRA & (1 <<5))); /** HOLD HERE UNTILL DATA REGISTER IS EMPTY (DATA SENT) **/
 9be:	5d 9b       	sbis	0x0b, 5	; 11
 9c0:	fe cf       	rjmp	.-4      	; 0x9be <UART_sendchar>
    
	UDR = ua_a_data ; /** STORE THE DATA IN THE UDR BUFFER TO BE SENT **/
 9c2:	8c b9       	out	0x0c, r24	; 12
	
}
 9c4:	08 95       	ret

000009c6 <UART_sendstr>:
/** FUNCTION TO SEND STRING VIA UART                         **/
/** ARGUMENTS : ua_a_string                                  **/
/** RETURNS   : uart_errorstatus                             **/
/**************************************************************/
uart_errorstatus UART_sendstr(uint8_t * ua_a_string)
{
 9c6:	0f 93       	push	r16
 9c8:	1f 93       	push	r17
 9ca:	cf 93       	push	r28
 9cc:	8c 01       	movw	r16, r24
	uint8_t u8_a_lettercounter = 0 ; /** LETTERS COUNTER **/
 9ce:	c0 e0       	ldi	r28, 0x00	; 0
		
	while (ua_a_string[u8_a_lettercounter] != '\0')  /** UNTILL THE STRING ISN'T NULL **/
 9d0:	03 c0       	rjmp	.+6      	; 0x9d8 <UART_sendstr+0x12>
	{
		UART_sendchar(ua_a_string[u8_a_lettercounter]); /** SEND THE LETTER USING UART_sendchar **/
 9d2:	0e 94 df 04 	call	0x9be	; 0x9be <UART_sendchar>
		u8_a_lettercounter++; /** JUMP TO THE NEXT LETTER **/
 9d6:	cf 5f       	subi	r28, 0xFF	; 255
/**************************************************************/
uart_errorstatus UART_sendstr(uint8_t * ua_a_string)
{
	uint8_t u8_a_lettercounter = 0 ; /** LETTERS COUNTER **/
		
	while (ua_a_string[u8_a_lettercounter] != '\0')  /** UNTILL THE STRING ISN'T NULL **/
 9d8:	f8 01       	movw	r30, r16
 9da:	ec 0f       	add	r30, r28
 9dc:	f1 1d       	adc	r31, r1
 9de:	80 81       	ld	r24, Z
 9e0:	81 11       	cpse	r24, r1
 9e2:	f7 cf       	rjmp	.-18     	; 0x9d2 <UART_sendstr+0xc>
	{
		UART_sendchar(ua_a_string[u8_a_lettercounter]); /** SEND THE LETTER USING UART_sendchar **/
		u8_a_lettercounter++; /** JUMP TO THE NEXT LETTER **/
	}
}
 9e4:	cf 91       	pop	r28
 9e6:	1f 91       	pop	r17
 9e8:	0f 91       	pop	r16
 9ea:	08 95       	ret

000009ec <UART_receivechar>:
/** ARGUMENTS : u8_recdata (POINTER TO STORE THE RECEIVED DATA)    **/
/** RETURNS   : uart_errorstatus                                   **/
/********************************************************************/
uart_errorstatus UART_receivechar(uint8_t * u8_a_recdata)
{
	while( ! (UCSRA & (1 << 7)) ) ; /** WAIT UNTILL THE DATA RECIVE FLAG RAISED **/
 9ec:	5f 9b       	sbis	0x0b, 7	; 11
 9ee:	fe cf       	rjmp	.-4      	; 0x9ec <UART_receivechar>
	
	*u8_a_recdata =  UDR ;	/** RETURN THE DATA IN UDR **/
 9f0:	2c b1       	in	r18, 0x0c	; 12
 9f2:	fc 01       	movw	r30, r24
 9f4:	20 83       	st	Z, r18
	
	
}
 9f6:	08 95       	ret

000009f8 <UART_receivestr>:
/** FUNCTION TO RECEIVE STRING VIA UART                                   **/
/** ARGUMENTS : u8_a_recstring (POINTER TO STORE THE RECEIVED DATA)       **/
/** RETURNS   : uart_errorstatus                                          **/
/***************************************************************************/
uart_errorstatus UART_receivestr(uint8_t * u8_a_recstring)
{
 9f8:	0f 93       	push	r16
 9fa:	1f 93       	push	r17
 9fc:	cf 93       	push	r28
 9fe:	8c 01       	movw	r16, r24
	uint8_t u8_a_lettercounter = 0 ; /** COUNTER TO LETTERS **/
 a00:	c0 e0       	ldi	r28, 0x00	; 0
	 
	//UART_receivechar(u8_a_recstring[u8_a_lettercounter]) ; /** RECEIVE THE FIRST CHARACTER **/
	
	while (u8_a_recstring[u8_a_lettercounter] != '\0') /** WHILE STRING ISN'T NULL **/
 a02:	03 c0       	rjmp	.+6      	; 0xa0a <UART_receivestr+0x12>
	{
		
		UART_receivechar(&u8_a_recstring[u8_a_lettercounter]); /** RECEIVE CHARACTER **/
 a04:	0e 94 f6 04 	call	0x9ec	; 0x9ec <UART_receivechar>
		
		u8_a_lettercounter++ ; /** JUMP TO THE NEXT INDEX **/
 a08:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t u8_a_lettercounter = 0 ; /** COUNTER TO LETTERS **/
	 
	//UART_receivechar(u8_a_recstring[u8_a_lettercounter]) ; /** RECEIVE THE FIRST CHARACTER **/
	
	while (u8_a_recstring[u8_a_lettercounter] != '\0') /** WHILE STRING ISN'T NULL **/
 a0a:	c8 01       	movw	r24, r16
 a0c:	8c 0f       	add	r24, r28
 a0e:	91 1d       	adc	r25, r1
 a10:	fc 01       	movw	r30, r24
 a12:	20 81       	ld	r18, Z
 a14:	21 11       	cpse	r18, r1
 a16:	f6 cf       	rjmp	.-20     	; 0xa04 <UART_receivestr+0xc>
		u8_a_lettercounter++ ; /** JUMP TO THE NEXT INDEX **/
		
	}
	
	//u8_a_recstring[u8_a_lettercounter] = '\0';	/** SET THE LAST CHARACTER TO NULL **/
 a18:	cf 91       	pop	r28
 a1a:	1f 91       	pop	r17
 a1c:	0f 91       	pop	r16
 a1e:	08 95       	ret

00000a20 <__divsf3>:
 a20:	0e 94 24 05 	call	0xa48	; 0xa48 <__divsf3x>
 a24:	0c 94 05 06 	jmp	0xc0a	; 0xc0a <__fp_round>
 a28:	0e 94 fe 05 	call	0xbfc	; 0xbfc <__fp_pscB>
 a2c:	58 f0       	brcs	.+22     	; 0xa44 <__divsf3+0x24>
 a2e:	0e 94 f7 05 	call	0xbee	; 0xbee <__fp_pscA>
 a32:	40 f0       	brcs	.+16     	; 0xa44 <__divsf3+0x24>
 a34:	29 f4       	brne	.+10     	; 0xa40 <__divsf3+0x20>
 a36:	5f 3f       	cpi	r21, 0xFF	; 255
 a38:	29 f0       	breq	.+10     	; 0xa44 <__divsf3+0x24>
 a3a:	0c 94 ee 05 	jmp	0xbdc	; 0xbdc <__fp_inf>
 a3e:	51 11       	cpse	r21, r1
 a40:	0c 94 39 06 	jmp	0xc72	; 0xc72 <__fp_szero>
 a44:	0c 94 f4 05 	jmp	0xbe8	; 0xbe8 <__fp_nan>

00000a48 <__divsf3x>:
 a48:	0e 94 16 06 	call	0xc2c	; 0xc2c <__fp_split3>
 a4c:	68 f3       	brcs	.-38     	; 0xa28 <__divsf3+0x8>

00000a4e <__divsf3_pse>:
 a4e:	99 23       	and	r25, r25
 a50:	b1 f3       	breq	.-20     	; 0xa3e <__divsf3+0x1e>
 a52:	55 23       	and	r21, r21
 a54:	91 f3       	breq	.-28     	; 0xa3a <__divsf3+0x1a>
 a56:	95 1b       	sub	r25, r21
 a58:	55 0b       	sbc	r21, r21
 a5a:	bb 27       	eor	r27, r27
 a5c:	aa 27       	eor	r26, r26
 a5e:	62 17       	cp	r22, r18
 a60:	73 07       	cpc	r23, r19
 a62:	84 07       	cpc	r24, r20
 a64:	38 f0       	brcs	.+14     	; 0xa74 <__divsf3_pse+0x26>
 a66:	9f 5f       	subi	r25, 0xFF	; 255
 a68:	5f 4f       	sbci	r21, 0xFF	; 255
 a6a:	22 0f       	add	r18, r18
 a6c:	33 1f       	adc	r19, r19
 a6e:	44 1f       	adc	r20, r20
 a70:	aa 1f       	adc	r26, r26
 a72:	a9 f3       	breq	.-22     	; 0xa5e <__divsf3_pse+0x10>
 a74:	35 d0       	rcall	.+106    	; 0xae0 <__divsf3_pse+0x92>
 a76:	0e 2e       	mov	r0, r30
 a78:	3a f0       	brmi	.+14     	; 0xa88 <__divsf3_pse+0x3a>
 a7a:	e0 e8       	ldi	r30, 0x80	; 128
 a7c:	32 d0       	rcall	.+100    	; 0xae2 <__divsf3_pse+0x94>
 a7e:	91 50       	subi	r25, 0x01	; 1
 a80:	50 40       	sbci	r21, 0x00	; 0
 a82:	e6 95       	lsr	r30
 a84:	00 1c       	adc	r0, r0
 a86:	ca f7       	brpl	.-14     	; 0xa7a <__divsf3_pse+0x2c>
 a88:	2b d0       	rcall	.+86     	; 0xae0 <__divsf3_pse+0x92>
 a8a:	fe 2f       	mov	r31, r30
 a8c:	29 d0       	rcall	.+82     	; 0xae0 <__divsf3_pse+0x92>
 a8e:	66 0f       	add	r22, r22
 a90:	77 1f       	adc	r23, r23
 a92:	88 1f       	adc	r24, r24
 a94:	bb 1f       	adc	r27, r27
 a96:	26 17       	cp	r18, r22
 a98:	37 07       	cpc	r19, r23
 a9a:	48 07       	cpc	r20, r24
 a9c:	ab 07       	cpc	r26, r27
 a9e:	b0 e8       	ldi	r27, 0x80	; 128
 aa0:	09 f0       	breq	.+2      	; 0xaa4 <__divsf3_pse+0x56>
 aa2:	bb 0b       	sbc	r27, r27
 aa4:	80 2d       	mov	r24, r0
 aa6:	bf 01       	movw	r22, r30
 aa8:	ff 27       	eor	r31, r31
 aaa:	93 58       	subi	r25, 0x83	; 131
 aac:	5f 4f       	sbci	r21, 0xFF	; 255
 aae:	3a f0       	brmi	.+14     	; 0xabe <__divsf3_pse+0x70>
 ab0:	9e 3f       	cpi	r25, 0xFE	; 254
 ab2:	51 05       	cpc	r21, r1
 ab4:	78 f0       	brcs	.+30     	; 0xad4 <__divsf3_pse+0x86>
 ab6:	0c 94 ee 05 	jmp	0xbdc	; 0xbdc <__fp_inf>
 aba:	0c 94 39 06 	jmp	0xc72	; 0xc72 <__fp_szero>
 abe:	5f 3f       	cpi	r21, 0xFF	; 255
 ac0:	e4 f3       	brlt	.-8      	; 0xaba <__divsf3_pse+0x6c>
 ac2:	98 3e       	cpi	r25, 0xE8	; 232
 ac4:	d4 f3       	brlt	.-12     	; 0xaba <__divsf3_pse+0x6c>
 ac6:	86 95       	lsr	r24
 ac8:	77 95       	ror	r23
 aca:	67 95       	ror	r22
 acc:	b7 95       	ror	r27
 ace:	f7 95       	ror	r31
 ad0:	9f 5f       	subi	r25, 0xFF	; 255
 ad2:	c9 f7       	brne	.-14     	; 0xac6 <__divsf3_pse+0x78>
 ad4:	88 0f       	add	r24, r24
 ad6:	91 1d       	adc	r25, r1
 ad8:	96 95       	lsr	r25
 ada:	87 95       	ror	r24
 adc:	97 f9       	bld	r25, 7
 ade:	08 95       	ret
 ae0:	e1 e0       	ldi	r30, 0x01	; 1
 ae2:	66 0f       	add	r22, r22
 ae4:	77 1f       	adc	r23, r23
 ae6:	88 1f       	adc	r24, r24
 ae8:	bb 1f       	adc	r27, r27
 aea:	62 17       	cp	r22, r18
 aec:	73 07       	cpc	r23, r19
 aee:	84 07       	cpc	r24, r20
 af0:	ba 07       	cpc	r27, r26
 af2:	20 f0       	brcs	.+8      	; 0xafc <__divsf3_pse+0xae>
 af4:	62 1b       	sub	r22, r18
 af6:	73 0b       	sbc	r23, r19
 af8:	84 0b       	sbc	r24, r20
 afa:	ba 0b       	sbc	r27, r26
 afc:	ee 1f       	adc	r30, r30
 afe:	88 f7       	brcc	.-30     	; 0xae2 <__divsf3_pse+0x94>
 b00:	e0 95       	com	r30
 b02:	08 95       	ret

00000b04 <__fixunssfsi>:
 b04:	0e 94 1e 06 	call	0xc3c	; 0xc3c <__fp_splitA>
 b08:	88 f0       	brcs	.+34     	; 0xb2c <__fixunssfsi+0x28>
 b0a:	9f 57       	subi	r25, 0x7F	; 127
 b0c:	98 f0       	brcs	.+38     	; 0xb34 <__fixunssfsi+0x30>
 b0e:	b9 2f       	mov	r27, r25
 b10:	99 27       	eor	r25, r25
 b12:	b7 51       	subi	r27, 0x17	; 23
 b14:	b0 f0       	brcs	.+44     	; 0xb42 <__fixunssfsi+0x3e>
 b16:	e1 f0       	breq	.+56     	; 0xb50 <__fixunssfsi+0x4c>
 b18:	66 0f       	add	r22, r22
 b1a:	77 1f       	adc	r23, r23
 b1c:	88 1f       	adc	r24, r24
 b1e:	99 1f       	adc	r25, r25
 b20:	1a f0       	brmi	.+6      	; 0xb28 <__fixunssfsi+0x24>
 b22:	ba 95       	dec	r27
 b24:	c9 f7       	brne	.-14     	; 0xb18 <__fixunssfsi+0x14>
 b26:	14 c0       	rjmp	.+40     	; 0xb50 <__fixunssfsi+0x4c>
 b28:	b1 30       	cpi	r27, 0x01	; 1
 b2a:	91 f0       	breq	.+36     	; 0xb50 <__fixunssfsi+0x4c>
 b2c:	0e 94 38 06 	call	0xc70	; 0xc70 <__fp_zero>
 b30:	b1 e0       	ldi	r27, 0x01	; 1
 b32:	08 95       	ret
 b34:	0c 94 38 06 	jmp	0xc70	; 0xc70 <__fp_zero>
 b38:	67 2f       	mov	r22, r23
 b3a:	78 2f       	mov	r23, r24
 b3c:	88 27       	eor	r24, r24
 b3e:	b8 5f       	subi	r27, 0xF8	; 248
 b40:	39 f0       	breq	.+14     	; 0xb50 <__fixunssfsi+0x4c>
 b42:	b9 3f       	cpi	r27, 0xF9	; 249
 b44:	cc f3       	brlt	.-14     	; 0xb38 <__fixunssfsi+0x34>
 b46:	86 95       	lsr	r24
 b48:	77 95       	ror	r23
 b4a:	67 95       	ror	r22
 b4c:	b3 95       	inc	r27
 b4e:	d9 f7       	brne	.-10     	; 0xb46 <__fixunssfsi+0x42>
 b50:	3e f4       	brtc	.+14     	; 0xb60 <__fixunssfsi+0x5c>
 b52:	90 95       	com	r25
 b54:	80 95       	com	r24
 b56:	70 95       	com	r23
 b58:	61 95       	neg	r22
 b5a:	7f 4f       	sbci	r23, 0xFF	; 255
 b5c:	8f 4f       	sbci	r24, 0xFF	; 255
 b5e:	9f 4f       	sbci	r25, 0xFF	; 255
 b60:	08 95       	ret

00000b62 <__floatunsisf>:
 b62:	e8 94       	clt
 b64:	09 c0       	rjmp	.+18     	; 0xb78 <__floatsisf+0x12>

00000b66 <__floatsisf>:
 b66:	97 fb       	bst	r25, 7
 b68:	3e f4       	brtc	.+14     	; 0xb78 <__floatsisf+0x12>
 b6a:	90 95       	com	r25
 b6c:	80 95       	com	r24
 b6e:	70 95       	com	r23
 b70:	61 95       	neg	r22
 b72:	7f 4f       	sbci	r23, 0xFF	; 255
 b74:	8f 4f       	sbci	r24, 0xFF	; 255
 b76:	9f 4f       	sbci	r25, 0xFF	; 255
 b78:	99 23       	and	r25, r25
 b7a:	a9 f0       	breq	.+42     	; 0xba6 <__floatsisf+0x40>
 b7c:	f9 2f       	mov	r31, r25
 b7e:	96 e9       	ldi	r25, 0x96	; 150
 b80:	bb 27       	eor	r27, r27
 b82:	93 95       	inc	r25
 b84:	f6 95       	lsr	r31
 b86:	87 95       	ror	r24
 b88:	77 95       	ror	r23
 b8a:	67 95       	ror	r22
 b8c:	b7 95       	ror	r27
 b8e:	f1 11       	cpse	r31, r1
 b90:	f8 cf       	rjmp	.-16     	; 0xb82 <__floatsisf+0x1c>
 b92:	fa f4       	brpl	.+62     	; 0xbd2 <__floatsisf+0x6c>
 b94:	bb 0f       	add	r27, r27
 b96:	11 f4       	brne	.+4      	; 0xb9c <__floatsisf+0x36>
 b98:	60 ff       	sbrs	r22, 0
 b9a:	1b c0       	rjmp	.+54     	; 0xbd2 <__floatsisf+0x6c>
 b9c:	6f 5f       	subi	r22, 0xFF	; 255
 b9e:	7f 4f       	sbci	r23, 0xFF	; 255
 ba0:	8f 4f       	sbci	r24, 0xFF	; 255
 ba2:	9f 4f       	sbci	r25, 0xFF	; 255
 ba4:	16 c0       	rjmp	.+44     	; 0xbd2 <__floatsisf+0x6c>
 ba6:	88 23       	and	r24, r24
 ba8:	11 f0       	breq	.+4      	; 0xbae <__floatsisf+0x48>
 baa:	96 e9       	ldi	r25, 0x96	; 150
 bac:	11 c0       	rjmp	.+34     	; 0xbd0 <__floatsisf+0x6a>
 bae:	77 23       	and	r23, r23
 bb0:	21 f0       	breq	.+8      	; 0xbba <__floatsisf+0x54>
 bb2:	9e e8       	ldi	r25, 0x8E	; 142
 bb4:	87 2f       	mov	r24, r23
 bb6:	76 2f       	mov	r23, r22
 bb8:	05 c0       	rjmp	.+10     	; 0xbc4 <__floatsisf+0x5e>
 bba:	66 23       	and	r22, r22
 bbc:	71 f0       	breq	.+28     	; 0xbda <__floatsisf+0x74>
 bbe:	96 e8       	ldi	r25, 0x86	; 134
 bc0:	86 2f       	mov	r24, r22
 bc2:	70 e0       	ldi	r23, 0x00	; 0
 bc4:	60 e0       	ldi	r22, 0x00	; 0
 bc6:	2a f0       	brmi	.+10     	; 0xbd2 <__floatsisf+0x6c>
 bc8:	9a 95       	dec	r25
 bca:	66 0f       	add	r22, r22
 bcc:	77 1f       	adc	r23, r23
 bce:	88 1f       	adc	r24, r24
 bd0:	da f7       	brpl	.-10     	; 0xbc8 <__floatsisf+0x62>
 bd2:	88 0f       	add	r24, r24
 bd4:	96 95       	lsr	r25
 bd6:	87 95       	ror	r24
 bd8:	97 f9       	bld	r25, 7
 bda:	08 95       	ret

00000bdc <__fp_inf>:
 bdc:	97 f9       	bld	r25, 7
 bde:	9f 67       	ori	r25, 0x7F	; 127
 be0:	80 e8       	ldi	r24, 0x80	; 128
 be2:	70 e0       	ldi	r23, 0x00	; 0
 be4:	60 e0       	ldi	r22, 0x00	; 0
 be6:	08 95       	ret

00000be8 <__fp_nan>:
 be8:	9f ef       	ldi	r25, 0xFF	; 255
 bea:	80 ec       	ldi	r24, 0xC0	; 192
 bec:	08 95       	ret

00000bee <__fp_pscA>:
 bee:	00 24       	eor	r0, r0
 bf0:	0a 94       	dec	r0
 bf2:	16 16       	cp	r1, r22
 bf4:	17 06       	cpc	r1, r23
 bf6:	18 06       	cpc	r1, r24
 bf8:	09 06       	cpc	r0, r25
 bfa:	08 95       	ret

00000bfc <__fp_pscB>:
 bfc:	00 24       	eor	r0, r0
 bfe:	0a 94       	dec	r0
 c00:	12 16       	cp	r1, r18
 c02:	13 06       	cpc	r1, r19
 c04:	14 06       	cpc	r1, r20
 c06:	05 06       	cpc	r0, r21
 c08:	08 95       	ret

00000c0a <__fp_round>:
 c0a:	09 2e       	mov	r0, r25
 c0c:	03 94       	inc	r0
 c0e:	00 0c       	add	r0, r0
 c10:	11 f4       	brne	.+4      	; 0xc16 <__fp_round+0xc>
 c12:	88 23       	and	r24, r24
 c14:	52 f0       	brmi	.+20     	; 0xc2a <__fp_round+0x20>
 c16:	bb 0f       	add	r27, r27
 c18:	40 f4       	brcc	.+16     	; 0xc2a <__fp_round+0x20>
 c1a:	bf 2b       	or	r27, r31
 c1c:	11 f4       	brne	.+4      	; 0xc22 <__fp_round+0x18>
 c1e:	60 ff       	sbrs	r22, 0
 c20:	04 c0       	rjmp	.+8      	; 0xc2a <__fp_round+0x20>
 c22:	6f 5f       	subi	r22, 0xFF	; 255
 c24:	7f 4f       	sbci	r23, 0xFF	; 255
 c26:	8f 4f       	sbci	r24, 0xFF	; 255
 c28:	9f 4f       	sbci	r25, 0xFF	; 255
 c2a:	08 95       	ret

00000c2c <__fp_split3>:
 c2c:	57 fd       	sbrc	r21, 7
 c2e:	90 58       	subi	r25, 0x80	; 128
 c30:	44 0f       	add	r20, r20
 c32:	55 1f       	adc	r21, r21
 c34:	59 f0       	breq	.+22     	; 0xc4c <__fp_splitA+0x10>
 c36:	5f 3f       	cpi	r21, 0xFF	; 255
 c38:	71 f0       	breq	.+28     	; 0xc56 <__fp_splitA+0x1a>
 c3a:	47 95       	ror	r20

00000c3c <__fp_splitA>:
 c3c:	88 0f       	add	r24, r24
 c3e:	97 fb       	bst	r25, 7
 c40:	99 1f       	adc	r25, r25
 c42:	61 f0       	breq	.+24     	; 0xc5c <__fp_splitA+0x20>
 c44:	9f 3f       	cpi	r25, 0xFF	; 255
 c46:	79 f0       	breq	.+30     	; 0xc66 <__fp_splitA+0x2a>
 c48:	87 95       	ror	r24
 c4a:	08 95       	ret
 c4c:	12 16       	cp	r1, r18
 c4e:	13 06       	cpc	r1, r19
 c50:	14 06       	cpc	r1, r20
 c52:	55 1f       	adc	r21, r21
 c54:	f2 cf       	rjmp	.-28     	; 0xc3a <__fp_split3+0xe>
 c56:	46 95       	lsr	r20
 c58:	f1 df       	rcall	.-30     	; 0xc3c <__fp_splitA>
 c5a:	08 c0       	rjmp	.+16     	; 0xc6c <__fp_splitA+0x30>
 c5c:	16 16       	cp	r1, r22
 c5e:	17 06       	cpc	r1, r23
 c60:	18 06       	cpc	r1, r24
 c62:	99 1f       	adc	r25, r25
 c64:	f1 cf       	rjmp	.-30     	; 0xc48 <__fp_splitA+0xc>
 c66:	86 95       	lsr	r24
 c68:	71 05       	cpc	r23, r1
 c6a:	61 05       	cpc	r22, r1
 c6c:	08 94       	sec
 c6e:	08 95       	ret

00000c70 <__fp_zero>:
 c70:	e8 94       	clt

00000c72 <__fp_szero>:
 c72:	bb 27       	eor	r27, r27
 c74:	66 27       	eor	r22, r22
 c76:	77 27       	eor	r23, r23
 c78:	cb 01       	movw	r24, r22
 c7a:	97 f9       	bld	r25, 7
 c7c:	08 95       	ret

00000c7e <strcmp>:
 c7e:	fb 01       	movw	r30, r22
 c80:	dc 01       	movw	r26, r24
 c82:	8d 91       	ld	r24, X+
 c84:	01 90       	ld	r0, Z+
 c86:	80 19       	sub	r24, r0
 c88:	01 10       	cpse	r0, r1
 c8a:	d9 f3       	breq	.-10     	; 0xc82 <strcmp+0x4>
 c8c:	99 0b       	sbc	r25, r25
 c8e:	08 95       	ret

00000c90 <_exit>:
 c90:	f8 94       	cli

00000c92 <__stop_program>:
 c92:	ff cf       	rjmp	.-2      	; 0xc92 <__stop_program>
