
ATM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a76  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000f2  00800060  00000a76  00000b0a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800152  00800152  00000bfc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000bfc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c2c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000210  00000000  00000000  00000c68  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a49  00000000  00000000  00000e78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b73  00000000  00000000  000028c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011d0  00000000  00000000  00003434  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003d8  00000000  00000000  00004604  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009a0  00000000  00000000  000049dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c84  00000000  00000000  0000537c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000190  00000000  00000000  00006000  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e7       	ldi	r30, 0x76	; 118
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 35       	cpi	r26, 0x52	; 82
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a2 e5       	ldi	r26, 0x52	; 82
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 35       	cpi	r26, 0x57	; 87
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 b2 01 	call	0x364	; 0x364 <main>
  8a:	0c 94 39 05 	jmp	0xa72	; 0xa72 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <APP_init>:


/** FUNCTION FOR INITIALIZATION **/
void APP_init()
{
   TMR0_init(); /** TIMER 0 INITIALIZATION **/
  92:	0e 94 33 03 	call	0x666	; 0x666 <TMR0_init>
	
	UART_init();  /** INITIALIZATION UART MODULE **/
  96:	0e 94 96 03 	call	0x72c	; 0x72c <UART_init>
	
	SPI_initmaster(); /** INITIALIZE SPI MASTER **/
  9a:	0e 94 dd 02 	call	0x5ba	; 0x5ba <SPI_initmaster>
	
	EEPROM_init(); /** INITIALIZE EEPROM MODULE **/
  9e:	0e 94 18 01 	call	0x230	; 0x230 <EEPROM_init>
  a2:	08 95       	ret

000000a4 <APP_cardprogram>:
}

/** FUNCTION TO PROGRAM THE CARD DATA **/
void APP_cardprogram()
{
  a4:	cf 93       	push	r28
  a6:	df 93       	push	r29
	/************************************************************************/
	/**                     PROGRAMMING THE CARD                           **/
	/************************************************************************/
	//uint8_t u8_a_try = 0 ; /** COUNTER FOR PIN ATTEMPTS **/
	
	UART_sendstr("\r\n          you are in the programming mode\r\n"); /** MESSAGE **/
  a8:	87 e9       	ldi	r24, 0x97	; 151
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <UART_sendstr>
	
	UART_sendstr("Please enter card PAN\r\n"); /** ASK USER TO INTER CARD PAN **/
  b0:	85 ec       	ldi	r24, 0xC5	; 197
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <UART_sendstr>
	UART_receivestr(&u8_g_cardpan); /** RECEIVE PAN FROM USER **/
  b8:	8e e7       	ldi	r24, 0x7E	; 126
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	0e 94 ed 03 	call	0x7da	; 0x7da <UART_receivestr>

/** FUNCTION TO PROGRAM THE CARD DATA **/
void APP_cardprogram()
{
	/** PIN NUMBER ITERATOR , CHARACTER FOUND STATUS , COUNTER FOR PIN ATTEMPTS **/
	uint8_t u8_a_num = 0 , u8_character = 0 , u8_a_try = 0; 
  c0:	c0 e0       	ldi	r28, 0x00	; 0
	UART_sendstr("\r\n          you are in the programming mode\r\n"); /** MESSAGE **/
	
	UART_sendstr("Please enter card PAN\r\n"); /** ASK USER TO INTER CARD PAN **/
	UART_receivestr(&u8_g_cardpan); /** RECEIVE PAN FROM USER **/
	
	while (u8_a_try <= 2) /** JUST TWO ATTEMPTS TO SET CARD PIN **/
  c2:	36 c0       	rjmp	.+108    	; 0x130 <APP_cardprogram+0x8c>
	{
		UART_sendstr("\r\nPlease enter new 4-numbers PIN\r\n");/** ASK USER TO INTER CARD PIN **/
  c4:	8d ed       	ldi	r24, 0xDD	; 221
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <UART_sendstr>
		UART_receivestr(&u8_g_cardpin);  /** RECEIVE PIN FROM USER **/
  cc:	82 e9       	ldi	r24, 0x92	; 146
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	0e 94 ed 03 	call	0x7da	; 0x7da <UART_receivestr>
		
		UART_sendstr("\r\nPlease confirm your PIN\r\n");/** ASK USER TO INTER CARD PIN **/
  d4:	80 e0       	ldi	r24, 0x00	; 0
  d6:	91 e0       	ldi	r25, 0x01	; 1
  d8:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <UART_sendstr>
		UART_receivestr(&u8_g_cardpinconfirm); /** RECEIVE PIN CONFIRMATION **/
  dc:	89 e7       	ldi	r24, 0x79	; 121
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	0e 94 ed 03 	call	0x7da	; 0x7da <UART_receivestr>
		
		/** CHECK IF CHARACTER ENTERED **/
		while(u8_a_num < 4)
  e4:	d0 e0       	ldi	r29, 0x00	; 0
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	0a c0       	rjmp	.+20     	; 0xfe <APP_cardprogram+0x5a>
		{
			/** VALIDATE THE USER INPUT AS NUMBERS ONLY **/
			if (!((u8_g_cardpin[u8_a_num] > 48) && (u8_g_cardpin[u8_a_num] < 57)))
  ea:	e8 2f       	mov	r30, r24
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	ee 56       	subi	r30, 0x6E	; 110
  f0:	ff 4f       	sbci	r31, 0xFF	; 255
  f2:	90 81       	ld	r25, Z
  f4:	91 53       	subi	r25, 0x31	; 49
  f6:	98 30       	cpi	r25, 0x08	; 8
  f8:	08 f0       	brcs	.+2      	; 0xfc <APP_cardprogram+0x58>
			{
				u8_character = 1 ; /** CHARACTER FOUND **/
  fa:	d1 e0       	ldi	r29, 0x01	; 1
			}
			u8_a_num++ ; /** JUMP TO THE NEXT NUMBER **/
  fc:	8f 5f       	subi	r24, 0xFF	; 255
		
		UART_sendstr("\r\nPlease confirm your PIN\r\n");/** ASK USER TO INTER CARD PIN **/
		UART_receivestr(&u8_g_cardpinconfirm); /** RECEIVE PIN CONFIRMATION **/
		
		/** CHECK IF CHARACTER ENTERED **/
		while(u8_a_num < 4)
  fe:	84 30       	cpi	r24, 0x04	; 4
 100:	a0 f3       	brcs	.-24     	; 0xea <APP_cardprogram+0x46>
				u8_character = 1 ; /** CHARACTER FOUND **/
			}
			u8_a_num++ ; /** JUMP TO THE NEXT NUMBER **/
		}
		
		u8_a_notmatched = strcmp(u8_g_cardpin , u8_g_cardpinconfirm); /** CHECK IF PIN MATCHED OR NOT **/
 102:	69 e7       	ldi	r22, 0x79	; 121
 104:	70 e0       	ldi	r23, 0x00	; 0
 106:	82 e9       	ldi	r24, 0x92	; 146
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	0e 94 30 05 	call	0xa60	; 0xa60 <strcmp>
 10e:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <__data_end>
		
		if (u8_a_notmatched == 0 && u8_character == 0) /** IF PIN MATCHED AND NO CHARACTERS **/
 112:	81 11       	cpse	r24, r1
 114:	07 c0       	rjmp	.+14     	; 0x124 <APP_cardprogram+0x80>
 116:	d1 11       	cpse	r29, r1
 118:	05 c0       	rjmp	.+10     	; 0x124 <APP_cardprogram+0x80>
		{
			UART_sendstr("\r\nData received successfully\r\n");
 11a:	8c e1       	ldi	r24, 0x1C	; 28
 11c:	91 e0       	ldi	r25, 0x01	; 1
 11e:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <UART_sendstr>
			break ;
 122:	08 c0       	rjmp	.+16     	; 0x134 <APP_cardprogram+0x90>
		}
		u8_a_num = 0 ; /** REINITIALIZE ITERATOR AND CHARACTER STATUS TO 0 AGAIN **/
		u8_character = 0 ;

		u8_a_try++ ; /** NEXT TRY **/
 124:	cf 5f       	subi	r28, 0xFF	; 255
		
		if(u8_a_try >= 1) /** NOT THE FIRST MESSAGE **/
 126:	21 f0       	breq	.+8      	; 0x130 <APP_cardprogram+0x8c>
			{
				UART_sendstr("\r\n Letters not allowed , numbers only\r\n");
			}
			else /** PIN NOT MATCHED **/
			{
				UART_sendstr("\r\nPIN didn't match !\r\n");/** ASK USER TO INTER CARD PIN **/
 128:	8b e3       	ldi	r24, 0x3B	; 59
 12a:	91 e0       	ldi	r25, 0x01	; 1
 12c:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <UART_sendstr>
	UART_sendstr("\r\n          you are in the programming mode\r\n"); /** MESSAGE **/
	
	UART_sendstr("Please enter card PAN\r\n"); /** ASK USER TO INTER CARD PAN **/
	UART_receivestr(&u8_g_cardpan); /** RECEIVE PAN FROM USER **/
	
	while (u8_a_try <= 2) /** JUST TWO ATTEMPTS TO SET CARD PIN **/
 130:	c3 30       	cpi	r28, 0x03	; 3
 132:	40 f2       	brcs	.-112    	; 0xc4 <APP_cardprogram+0x20>
			{
				UART_sendstr("\r\nPIN didn't match !\r\n");/** ASK USER TO INTER CARD PIN **/
			}
		}
	}
}
 134:	df 91       	pop	r29
 136:	cf 91       	pop	r28
 138:	08 95       	ret

0000013a <APP_storecard>:

/** FUNCTION TO STORE CARD DATA IN THE EEPROM **/
void APP_storecard()
{
 13a:	cf 93       	push	r28
 13c:	df 93       	push	r29
	/** STORE PIN NUMBER **/
	for (uint16_t pin_counter = 0x0000 ; pin_counter < 0x0004 ; pin_counter++)
 13e:	c0 e0       	ldi	r28, 0x00	; 0
 140:	d0 e0       	ldi	r29, 0x00	; 0
 142:	11 c0       	rjmp	.+34     	; 0x166 <APP_storecard+0x2c>
	{
		EEPROM_writebyte(CARD_PINADDRESS_0+pin_counter , u8_g_cardpin[pin_counter] , PAGE_0 );
 144:	fe 01       	movw	r30, r28
 146:	ee 56       	subi	r30, 0x6E	; 110
 148:	ff 4f       	sbci	r31, 0xFF	; 255
 14a:	40 e0       	ldi	r20, 0x00	; 0
 14c:	60 81       	ld	r22, Z
 14e:	ce 01       	movw	r24, r28
 150:	8f 5e       	subi	r24, 0xEF	; 239
 152:	9c 4f       	sbci	r25, 0xFC	; 252
 154:	0e 94 1b 01 	call	0x236	; 0x236 <EEPROM_writebyte>
		TMR0_delayms(20);
 158:	64 e1       	ldi	r22, 0x14	; 20
 15a:	70 e0       	ldi	r23, 0x00	; 0
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <TMR0_delayms>

/** FUNCTION TO STORE CARD DATA IN THE EEPROM **/
void APP_storecard()
{
	/** STORE PIN NUMBER **/
	for (uint16_t pin_counter = 0x0000 ; pin_counter < 0x0004 ; pin_counter++)
 164:	21 96       	adiw	r28, 0x01	; 1
 166:	c4 30       	cpi	r28, 0x04	; 4
 168:	d1 05       	cpc	r29, r1
 16a:	60 f3       	brcs	.-40     	; 0x144 <APP_storecard+0xa>
 16c:	c0 e0       	ldi	r28, 0x00	; 0
 16e:	d0 e0       	ldi	r29, 0x00	; 0
 170:	11 c0       	rjmp	.+34     	; 0x194 <APP_storecard+0x5a>
	}

	/** STORE PAN NUMBER **/
	for (uint16_t pan_counter = 0x0000 ; pan_counter < 0x0014 ; pan_counter++)
	{
		EEPROM_writebyte(CARD_PANADDRESS_0+pan_counter , u8_g_cardpan[pan_counter] , PAGE_0 );
 172:	fe 01       	movw	r30, r28
 174:	e2 58       	subi	r30, 0x82	; 130
 176:	ff 4f       	sbci	r31, 0xFF	; 255
 178:	40 e0       	ldi	r20, 0x00	; 0
 17a:	60 81       	ld	r22, Z
 17c:	ce 01       	movw	r24, r28
 17e:	87 5e       	subi	r24, 0xE7	; 231
 180:	9c 4f       	sbci	r25, 0xFC	; 252
 182:	0e 94 1b 01 	call	0x236	; 0x236 <EEPROM_writebyte>
		TMR0_delayms(20);
 186:	64 e1       	ldi	r22, 0x14	; 20
 188:	70 e0       	ldi	r23, 0x00	; 0
 18a:	80 e0       	ldi	r24, 0x00	; 0
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <TMR0_delayms>
		EEPROM_writebyte(CARD_PINADDRESS_0+pin_counter , u8_g_cardpin[pin_counter] , PAGE_0 );
		TMR0_delayms(20);
	}

	/** STORE PAN NUMBER **/
	for (uint16_t pan_counter = 0x0000 ; pan_counter < 0x0014 ; pan_counter++)
 192:	21 96       	adiw	r28, 0x01	; 1
 194:	c4 31       	cpi	r28, 0x14	; 20
 196:	d1 05       	cpc	r29, r1
 198:	60 f3       	brcs	.-40     	; 0x172 <APP_storecard+0x38>
	{
		EEPROM_writebyte(CARD_PANADDRESS_0+pan_counter , u8_g_cardpan[pan_counter] , PAGE_0 );
		TMR0_delayms(20);
	}

}
 19a:	df 91       	pop	r29
 19c:	cf 91       	pop	r28
 19e:	08 95       	ret

000001a0 <APP_getcarddata>:

/** FUNCTION TO READ CARD DATA FROM EEPROM **/
void APP_getcarddata(void)
{
 1a0:	cf 93       	push	r28
 1a2:	df 93       	push	r29
	/** GET PIN FROM THE EEPROM **/
	for (uint16_t counter = 0x0000 ; counter < 0x0004 ; counter++)
 1a4:	c0 e0       	ldi	r28, 0x00	; 0
 1a6:	d0 e0       	ldi	r29, 0x00	; 0
 1a8:	10 c0       	rjmp	.+32     	; 0x1ca <APP_getcarddata+0x2a>
	{
		EEPROM_readbyte(CARD_PINADDRESS_0+counter , &readpin[counter] , PAGE_0 );
 1aa:	be 01       	movw	r22, r28
 1ac:	6c 58       	subi	r22, 0x8C	; 140
 1ae:	7f 4f       	sbci	r23, 0xFF	; 255
 1b0:	40 e0       	ldi	r20, 0x00	; 0
 1b2:	ce 01       	movw	r24, r28
 1b4:	8f 5e       	subi	r24, 0xEF	; 239
 1b6:	9c 4f       	sbci	r25, 0xFC	; 252
 1b8:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <EEPROM_readbyte>
		TMR0_delayms(20);
 1bc:	64 e1       	ldi	r22, 0x14	; 20
 1be:	70 e0       	ldi	r23, 0x00	; 0
 1c0:	80 e0       	ldi	r24, 0x00	; 0
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <TMR0_delayms>

/** FUNCTION TO READ CARD DATA FROM EEPROM **/
void APP_getcarddata(void)
{
	/** GET PIN FROM THE EEPROM **/
	for (uint16_t counter = 0x0000 ; counter < 0x0004 ; counter++)
 1c8:	21 96       	adiw	r28, 0x01	; 1
 1ca:	c4 30       	cpi	r28, 0x04	; 4
 1cc:	d1 05       	cpc	r29, r1
 1ce:	68 f3       	brcs	.-38     	; 0x1aa <APP_getcarddata+0xa>
 1d0:	c0 e0       	ldi	r28, 0x00	; 0
 1d2:	d0 e0       	ldi	r29, 0x00	; 0
 1d4:	10 c0       	rjmp	.+32     	; 0x1f6 <APP_getcarddata+0x56>
	}
	
	/** GET PAN FROM THE EEPROM **/ 
	for (uint16_t pan_counter = 0x0000 ; pan_counter < 0x0014 ; pan_counter++)
	{
		EEPROM_readbyte(CARD_PANADDRESS_0+pan_counter , &readpan[pan_counter] , PAGE_0 );
 1d6:	be 01       	movw	r22, r28
 1d8:	60 5a       	subi	r22, 0xA0	; 160
 1da:	7f 4f       	sbci	r23, 0xFF	; 255
 1dc:	40 e0       	ldi	r20, 0x00	; 0
 1de:	ce 01       	movw	r24, r28
 1e0:	87 5e       	subi	r24, 0xE7	; 231
 1e2:	9c 4f       	sbci	r25, 0xFC	; 252
 1e4:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <EEPROM_readbyte>
		TMR0_delayms(20);
 1e8:	64 e1       	ldi	r22, 0x14	; 20
 1ea:	70 e0       	ldi	r23, 0x00	; 0
 1ec:	80 e0       	ldi	r24, 0x00	; 0
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <TMR0_delayms>
		EEPROM_readbyte(CARD_PINADDRESS_0+counter , &readpin[counter] , PAGE_0 );
		TMR0_delayms(20);
	}
	
	/** GET PAN FROM THE EEPROM **/ 
	for (uint16_t pan_counter = 0x0000 ; pan_counter < 0x0014 ; pan_counter++)
 1f4:	21 96       	adiw	r28, 0x01	; 1
 1f6:	c4 31       	cpi	r28, 0x14	; 20
 1f8:	d1 05       	cpc	r29, r1
 1fa:	68 f3       	brcs	.-38     	; 0x1d6 <APP_getcarddata+0x36>
	{
		EEPROM_readbyte(CARD_PANADDRESS_0+pan_counter , &readpan[pan_counter] , PAGE_0 );
		TMR0_delayms(20);
	}
			
}
 1fc:	df 91       	pop	r29
 1fe:	cf 91       	pop	r28
 200:	08 95       	ret

00000202 <APP_sendcarddata>:

/** FUNCTION TO SEND CARD DATA TO ATM ECU **/
void APP_sendcarddata() 
{
 	SPI_masterinittransmit(); /** START SPI TRANSMISSION **/
 202:	0e 94 10 03 	call	0x620	; 0x620 <SPI_masterinittransmit>
 	
 	SPI_sendstring(u8_g_cardpin); /** SEND STORED PIN TO ATM **/
 206:	82 e9       	ldi	r24, 0x92	; 146
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	0e 94 20 03 	call	0x640	; 0x640 <SPI_sendstring>
	
	SPI_masterendtransmit(); /** END TRANSMISSION **/
 20e:	0e 94 16 03 	call	0x62c	; 0x62c <SPI_masterendtransmit>
	
	TMR0_delayms(30); /** DELAY FOR 30 MS **/
 212:	6e e1       	ldi	r22, 0x1E	; 30
 214:	70 e0       	ldi	r23, 0x00	; 0
 216:	80 e0       	ldi	r24, 0x00	; 0
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <TMR0_delayms>
	
	SPI_masterinittransmit(); /** START SPI TRANSMISSION **/
 21e:	0e 94 10 03 	call	0x620	; 0x620 <SPI_masterinittransmit>
	
	SPI_sendstring(u8_g_cardpan); /** SEND STORED PIN TO ATM **/
 222:	8e e7       	ldi	r24, 0x7E	; 126
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	0e 94 20 03 	call	0x640	; 0x640 <SPI_sendstring>
	
	SPI_masterendtransmit();/** END TRANSMISSION **/
 22a:	0e 94 16 03 	call	0x62c	; 0x62c <SPI_masterendtransmit>
 22e:	08 95       	ret

00000230 <EEPROM_init>:
/** AGGUMENTS : VOID                                        **/
/** RETURNS   : VOID                                        **/
/*************************************************************/
void EEPROM_init(void)
{
	TWI_init(); /** INITIALIZE TWI MODULE **/
 230:	0e 94 bd 02 	call	0x57a	; 0x57a <TWI_init>
 234:	08 95       	ret

00000236 <EEPROM_writebyte>:
/** FUNCTION TO WRITE BYTE TO SPECIFIC EEPROM ADDRESS       **/
/** AGGUMENTS : u16_a_address (ADDRSS) , u8_a_data (DATA)   **/
/** RETURNS   : uint8_t (SUCCESS STATE/ FAIL STATE)         **/
/*************************************************************/
uint8_t EEPROM_writebyte(uint16_t u16_a_address , uint8_t u8_a_data , uint8_t u8_a_page_address)
{
 236:	0f 93       	push	r16
 238:	1f 93       	push	r17
 23a:	cf 93       	push	r28
 23c:	df 93       	push	r29
 23e:	18 2f       	mov	r17, r24
 240:	d9 2f       	mov	r29, r25
 242:	06 2f       	mov	r16, r22
 244:	c4 2f       	mov	r28, r20
	TWI_start(); /** SEND START CONDITION **/
 246:	0e 94 c3 02 	call	0x586	; 0x586 <TWI_start>
	
	if (TWI_getstatus() != TW_START) /** CHECK THE STATUS CODE **/
 24a:	0e 94 da 02 	call	0x5b4	; 0x5b4 <TWI_getstatus>
 24e:	88 30       	cpi	r24, 0x08	; 8
 250:	21 f5       	brne	.+72     	; 0x29a <EEPROM_writebyte+0x64>
	return ERROR;
	
	/** SEND DEVICE ADDRESS WITH WRITE OPERATION **/
	TWI_write(0xA0 | (u8_a_page_address << 1));
 252:	8c 2f       	mov	r24, r28
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	88 0f       	add	r24, r24
 258:	99 1f       	adc	r25, r25
 25a:	80 6a       	ori	r24, 0xA0	; 160
 25c:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <TWI_write>
	
	if (TWI_getstatus() != TW_MT_SLA_W_ACK) /** CHECK THE STATUS CODE **/
 260:	0e 94 da 02 	call	0x5b4	; 0x5b4 <TWI_getstatus>
 264:	88 31       	cpi	r24, 0x18	; 24
 266:	d9 f4       	brne	.+54     	; 0x29e <EEPROM_writebyte+0x68>
	return ERROR;
	
	/** SEND THE FIRST ADDRESS BYTE LOCATION ADDRESS **/
	TWI_write((uint8_t)(u16_a_address >> 8));
 268:	8d 2f       	mov	r24, r29
 26a:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <TWI_write>
	
	if (TWI_getstatus() != TW_MT_DATA_ACK)  /** CHECK THE STATUS CODE **/
 26e:	0e 94 da 02 	call	0x5b4	; 0x5b4 <TWI_getstatus>
 272:	88 32       	cpi	r24, 0x28	; 40
 274:	b1 f4       	brne	.+44     	; 0x2a2 <EEPROM_writebyte+0x6c>
	return ERROR;
	
	/** SEND THE SECOND ADDRESS BYTE LOCATION ADDRESS **/
	TWI_write((uint8_t)(u16_a_address));
 276:	81 2f       	mov	r24, r17
 278:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <TWI_write>
	
	if (TWI_getstatus() != TW_MT_DATA_ACK)  /** CHECK THE STATUS CODE **/
 27c:	0e 94 da 02 	call	0x5b4	; 0x5b4 <TWI_getstatus>
 280:	88 32       	cpi	r24, 0x28	; 40
 282:	89 f4       	brne	.+34     	; 0x2a6 <EEPROM_writebyte+0x70>
	return ERROR;
	
	/** WRITE THE DATA BYTE **/
	TWI_write(u8_a_data);
 284:	80 2f       	mov	r24, r16
 286:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <TWI_write>
	
	if (TWI_getstatus() != TW_MT_DATA_ACK)  /** CHECK THE STATUS CODE **/
 28a:	0e 94 da 02 	call	0x5b4	; 0x5b4 <TWI_getstatus>
 28e:	88 32       	cpi	r24, 0x28	; 40
 290:	61 f4       	brne	.+24     	; 0x2aa <EEPROM_writebyte+0x74>
	return ERROR;
	
	TWI_stop();
 292:	0e 94 d7 02 	call	0x5ae	; 0x5ae <TWI_stop>
	
	return SUCCESS;
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	09 c0       	rjmp	.+18     	; 0x2ac <EEPROM_writebyte+0x76>
uint8_t EEPROM_writebyte(uint16_t u16_a_address , uint8_t u8_a_data , uint8_t u8_a_page_address)
{
	TWI_start(); /** SEND START CONDITION **/
	
	if (TWI_getstatus() != TW_START) /** CHECK THE STATUS CODE **/
	return ERROR;
 29a:	80 e0       	ldi	r24, 0x00	; 0
 29c:	07 c0       	rjmp	.+14     	; 0x2ac <EEPROM_writebyte+0x76>
	
	/** SEND DEVICE ADDRESS WITH WRITE OPERATION **/
	TWI_write(0xA0 | (u8_a_page_address << 1));
	
	if (TWI_getstatus() != TW_MT_SLA_W_ACK) /** CHECK THE STATUS CODE **/
	return ERROR;
 29e:	80 e0       	ldi	r24, 0x00	; 0
 2a0:	05 c0       	rjmp	.+10     	; 0x2ac <EEPROM_writebyte+0x76>
	
	/** SEND THE FIRST ADDRESS BYTE LOCATION ADDRESS **/
	TWI_write((uint8_t)(u16_a_address >> 8));
	
	if (TWI_getstatus() != TW_MT_DATA_ACK)  /** CHECK THE STATUS CODE **/
	return ERROR;
 2a2:	80 e0       	ldi	r24, 0x00	; 0
 2a4:	03 c0       	rjmp	.+6      	; 0x2ac <EEPROM_writebyte+0x76>
	
	/** SEND THE SECOND ADDRESS BYTE LOCATION ADDRESS **/
	TWI_write((uint8_t)(u16_a_address));
	
	if (TWI_getstatus() != TW_MT_DATA_ACK)  /** CHECK THE STATUS CODE **/
	return ERROR;
 2a6:	80 e0       	ldi	r24, 0x00	; 0
 2a8:	01 c0       	rjmp	.+2      	; 0x2ac <EEPROM_writebyte+0x76>
	
	/** WRITE THE DATA BYTE **/
	TWI_write(u8_a_data);
	
	if (TWI_getstatus() != TW_MT_DATA_ACK)  /** CHECK THE STATUS CODE **/
	return ERROR;
 2aa:	80 e0       	ldi	r24, 0x00	; 0
	
	TWI_stop();
	
	return SUCCESS;
}
 2ac:	df 91       	pop	r29
 2ae:	cf 91       	pop	r28
 2b0:	1f 91       	pop	r17
 2b2:	0f 91       	pop	r16
 2b4:	08 95       	ret

000002b6 <EEPROM_readbyte>:
/** FUNCTION TO READ BYTE FROM SPECIFIC EEPROM ADDRESS      **/
/** AGGUMENTS : u16_a_address (ADDRSS) , u8_a_data (DATA)   **/
/** RETURNS   : uint8_t (SUCCESS STATE/ FAIL STATE)         **/
/*************************************************************/
uint8_t EEPROM_readbyte(uint16_t u16_a_address , uint8_t *u8_a_data , uint8_t u8_a_page_address)
{
 2b6:	ef 92       	push	r14
 2b8:	ff 92       	push	r15
 2ba:	0f 93       	push	r16
 2bc:	1f 93       	push	r17
 2be:	cf 93       	push	r28
 2c0:	df 93       	push	r29
 2c2:	08 2f       	mov	r16, r24
 2c4:	19 2f       	mov	r17, r25
 2c6:	7b 01       	movw	r14, r22
 2c8:	c4 2f       	mov	r28, r20
	TWI_start(); /** SEND START CONDITION **/
 2ca:	0e 94 c3 02 	call	0x586	; 0x586 <TWI_start>
	
	if (TWI_getstatus() != TW_START)  /** CHECK THE STATUS CODE **/
 2ce:	0e 94 da 02 	call	0x5b4	; 0x5b4 <TWI_getstatus>
 2d2:	88 30       	cpi	r24, 0x08	; 8
 2d4:	99 f5       	brne	.+102    	; 0x33c <EEPROM_readbyte+0x86>
	return ERROR;
	
	/** SEND DEVICE ADDRESS WITH WRITE OPERATION **/
	TWI_write(0xA0 | (u8_a_page_address << 1));
 2d6:	d0 e0       	ldi	r29, 0x00	; 0
 2d8:	cc 0f       	add	r28, r28
 2da:	dd 1f       	adc	r29, r29
 2dc:	8c 2f       	mov	r24, r28
 2de:	80 6a       	ori	r24, 0xA0	; 160
 2e0:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <TWI_write>
	
	if (TWI_getstatus() != TW_MT_SLA_W_ACK)  /** CHECK THE STATUS CODE **/
 2e4:	0e 94 da 02 	call	0x5b4	; 0x5b4 <TWI_getstatus>
 2e8:	88 31       	cpi	r24, 0x18	; 24
 2ea:	51 f5       	brne	.+84     	; 0x340 <EEPROM_readbyte+0x8a>
	return ERROR;
	
	/** SEND THE FIRST ADDRESS BYTE LOCATION ADDRESS **/
	TWI_write((uint8_t)(u16_a_address >> 8));
 2ec:	81 2f       	mov	r24, r17
 2ee:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <TWI_write>
	
	if (TWI_getstatus() != TW_MT_DATA_ACK)  /** CHECK THE STATUS CODE **/
 2f2:	0e 94 da 02 	call	0x5b4	; 0x5b4 <TWI_getstatus>
 2f6:	88 32       	cpi	r24, 0x28	; 40
 2f8:	29 f5       	brne	.+74     	; 0x344 <EEPROM_readbyte+0x8e>
	return ERROR;
	
	/** SEND THE SECOND ADDRESS BYTE LOCATION ADDRESS **/
	TWI_write((uint8_t)(u16_a_address));
 2fa:	80 2f       	mov	r24, r16
 2fc:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <TWI_write>
	
	if (TWI_getstatus() != TW_MT_DATA_ACK)  /** CHECK THE STATUS CODE **/
 300:	0e 94 da 02 	call	0x5b4	; 0x5b4 <TWI_getstatus>
 304:	88 32       	cpi	r24, 0x28	; 40
 306:	01 f5       	brne	.+64     	; 0x348 <EEPROM_readbyte+0x92>
	return ERROR;
	
	/** SEND REPEATED START **/
	TWI_start();
 308:	0e 94 c3 02 	call	0x586	; 0x586 <TWI_start>
	
	if (TWI_getstatus() != TW_REP_START)  /** CHECK THE STATUS CODE **/
 30c:	0e 94 da 02 	call	0x5b4	; 0x5b4 <TWI_getstatus>
 310:	80 31       	cpi	r24, 0x10	; 16
 312:	e1 f4       	brne	.+56     	; 0x34c <EEPROM_readbyte+0x96>
	return ERROR;
	
	/** SEND DEVICE ADDRESS WITH READ OPERATION **/
	TWI_write(0xA0 | ((u8_a_page_address << 1) | 0x01));
 314:	8c 2f       	mov	r24, r28
 316:	81 6a       	ori	r24, 0xA1	; 161
 318:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <TWI_write>
	
	if (TWI_getstatus() != TW_MT_SLA_R_ACK)  /** CHECK THE STATUS CODE **/
 31c:	0e 94 da 02 	call	0x5b4	; 0x5b4 <TWI_getstatus>
 320:	80 34       	cpi	r24, 0x40	; 64
 322:	b1 f4       	brne	.+44     	; 0x350 <EEPROM_readbyte+0x9a>
	return ERROR;
	
	*u8_a_data = TWI_readwithnack(); /** READ THE DATA WITH ACK BIT **/
 324:	0e 94 c9 02 	call	0x592	; 0x592 <TWI_readwithnack>
 328:	f7 01       	movw	r30, r14
 32a:	80 83       	st	Z, r24
	
	if (TWI_getstatus() != TW_MR_DATA_NACK)  /** CHECK THE STATUS CODE **/
 32c:	0e 94 da 02 	call	0x5b4	; 0x5b4 <TWI_getstatus>
 330:	88 35       	cpi	r24, 0x58	; 88
 332:	81 f4       	brne	.+32     	; 0x354 <EEPROM_readbyte+0x9e>
	return ERROR;
	
	TWI_stop(); /** SEND STOP CONDITION **/
 334:	0e 94 d7 02 	call	0x5ae	; 0x5ae <TWI_stop>
	
	return SUCCESS; /** RETURN SUCCESS IF THE FRAME SENT CORRECTLY **/
 338:	81 e0       	ldi	r24, 0x01	; 1
 33a:	0d c0       	rjmp	.+26     	; 0x356 <EEPROM_readbyte+0xa0>
uint8_t EEPROM_readbyte(uint16_t u16_a_address , uint8_t *u8_a_data , uint8_t u8_a_page_address)
{
	TWI_start(); /** SEND START CONDITION **/
	
	if (TWI_getstatus() != TW_START)  /** CHECK THE STATUS CODE **/
	return ERROR;
 33c:	80 e0       	ldi	r24, 0x00	; 0
 33e:	0b c0       	rjmp	.+22     	; 0x356 <EEPROM_readbyte+0xa0>
	
	/** SEND DEVICE ADDRESS WITH WRITE OPERATION **/
	TWI_write(0xA0 | (u8_a_page_address << 1));
	
	if (TWI_getstatus() != TW_MT_SLA_W_ACK)  /** CHECK THE STATUS CODE **/
	return ERROR;
 340:	80 e0       	ldi	r24, 0x00	; 0
 342:	09 c0       	rjmp	.+18     	; 0x356 <EEPROM_readbyte+0xa0>
	
	/** SEND THE FIRST ADDRESS BYTE LOCATION ADDRESS **/
	TWI_write((uint8_t)(u16_a_address >> 8));
	
	if (TWI_getstatus() != TW_MT_DATA_ACK)  /** CHECK THE STATUS CODE **/
	return ERROR;
 344:	80 e0       	ldi	r24, 0x00	; 0
 346:	07 c0       	rjmp	.+14     	; 0x356 <EEPROM_readbyte+0xa0>
	
	/** SEND THE SECOND ADDRESS BYTE LOCATION ADDRESS **/
	TWI_write((uint8_t)(u16_a_address));
	
	if (TWI_getstatus() != TW_MT_DATA_ACK)  /** CHECK THE STATUS CODE **/
	return ERROR;
 348:	80 e0       	ldi	r24, 0x00	; 0
 34a:	05 c0       	rjmp	.+10     	; 0x356 <EEPROM_readbyte+0xa0>
	
	/** SEND REPEATED START **/
	TWI_start();
	
	if (TWI_getstatus() != TW_REP_START)  /** CHECK THE STATUS CODE **/
	return ERROR;
 34c:	80 e0       	ldi	r24, 0x00	; 0
 34e:	03 c0       	rjmp	.+6      	; 0x356 <EEPROM_readbyte+0xa0>
	
	/** SEND DEVICE ADDRESS WITH READ OPERATION **/
	TWI_write(0xA0 | ((u8_a_page_address << 1) | 0x01));
	
	if (TWI_getstatus() != TW_MT_SLA_R_ACK)  /** CHECK THE STATUS CODE **/
	return ERROR;
 350:	80 e0       	ldi	r24, 0x00	; 0
 352:	01 c0       	rjmp	.+2      	; 0x356 <EEPROM_readbyte+0xa0>
	
	*u8_a_data = TWI_readwithnack(); /** READ THE DATA WITH ACK BIT **/
	
	if (TWI_getstatus() != TW_MR_DATA_NACK)  /** CHECK THE STATUS CODE **/
	return ERROR;
 354:	80 e0       	ldi	r24, 0x00	; 0
	
	TWI_stop(); /** SEND STOP CONDITION **/
	
	return SUCCESS; /** RETURN SUCCESS IF THE FRAME SENT CORRECTLY **/
}
 356:	df 91       	pop	r29
 358:	cf 91       	pop	r28
 35a:	1f 91       	pop	r17
 35c:	0f 91       	pop	r16
 35e:	ff 90       	pop	r15
 360:	ef 90       	pop	r14
 362:	08 95       	ret

00000364 <main>:
 
#include "APP/APP.h"

int main(void)
{
	APP_init(); /** INITIALIZATION **/
 364:	0e 94 49 00 	call	0x92	; 0x92 <APP_init>
	APP_cardprogram(); /** PROGRAMMING THE CARD **/
 368:	0e 94 52 00 	call	0xa4	; 0xa4 <APP_cardprogram>
    APP_storecard(); /** STORE CARD DATA IN EEPROM **/
 36c:	0e 94 9d 00 	call	0x13a	; 0x13a <APP_storecard>
	APP_getcarddata(); /** GET CARD DATA FROM THE EEPROM **/
 370:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <APP_getcarddata>
    APP_sendcarddata(); /** START THE **/
 374:	0e 94 01 01 	call	0x202	; 0x202 <APP_sendcarddata>
//     while (1) 
//     {
// 		
//     }
}
 378:	80 e0       	ldi	r24, 0x00	; 0
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	08 95       	ret

0000037e <DIO_setpindir>:
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
	
	switch(u8_a_pindir) /** SWITCH CASE ON THE DIRECTION VALUE **/
 37e:	44 23       	and	r20, r20
 380:	19 f0       	breq	.+6      	; 0x388 <DIO_setpindir+0xa>
 382:	41 30       	cpi	r20, 0x01	; 1
 384:	e9 f1       	breq	.+122    	; 0x400 <__EEPROM_REGION_LENGTH__>
 386:	74 c0       	rjmp	.+232    	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
	{
		case DIO_PIN_INPUT:  /* INPUT CASE  */
		
		switch(u8_a_portid) /** SWITCH CASE ON THE PORT ID */
 388:	81 30       	cpi	r24, 0x01	; 1
 38a:	99 f0       	breq	.+38     	; 0x3b2 <DIO_setpindir+0x34>
 38c:	28 f0       	brcs	.+10     	; 0x398 <DIO_setpindir+0x1a>
 38e:	82 30       	cpi	r24, 0x02	; 2
 390:	e9 f0       	breq	.+58     	; 0x3cc <DIO_setpindir+0x4e>
 392:	83 30       	cpi	r24, 0x03	; 3
 394:	41 f1       	breq	.+80     	; 0x3e6 <DIO_setpindir+0x68>
 396:	6e c0       	rjmp	.+220    	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
		{
			case DIO_PORTA:
			clear_bit(DDRA , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTA AS INPUT PIN **/
 398:	2a b3       	in	r18, 0x1a	; 26
 39a:	81 e0       	ldi	r24, 0x01	; 1
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	02 c0       	rjmp	.+4      	; 0x3a4 <DIO_setpindir+0x26>
 3a0:	88 0f       	add	r24, r24
 3a2:	99 1f       	adc	r25, r25
 3a4:	6a 95       	dec	r22
 3a6:	e2 f7       	brpl	.-8      	; 0x3a0 <DIO_setpindir+0x22>
 3a8:	80 95       	com	r24
 3aa:	82 23       	and	r24, r18
 3ac:	8a bb       	out	0x1a, r24	; 26
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
 3ae:	80 e0       	ldi	r24, 0x00	; 0
		
		switch(u8_a_portid) /** SWITCH CASE ON THE PORT ID */
		{
			case DIO_PORTA:
			clear_bit(DDRA , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTA AS INPUT PIN **/
			break;
 3b0:	08 95       	ret
			
			case DIO_PORTB:
			clear_bit(DDRB , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTB AS INPUT PIN **/
 3b2:	27 b3       	in	r18, 0x17	; 23
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	02 c0       	rjmp	.+4      	; 0x3be <DIO_setpindir+0x40>
 3ba:	88 0f       	add	r24, r24
 3bc:	99 1f       	adc	r25, r25
 3be:	6a 95       	dec	r22
 3c0:	e2 f7       	brpl	.-8      	; 0x3ba <DIO_setpindir+0x3c>
 3c2:	80 95       	com	r24
 3c4:	82 23       	and	r24, r18
 3c6:	87 bb       	out	0x17, r24	; 23
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
 3c8:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(DDRA , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTA AS INPUT PIN **/
			break;
			
			case DIO_PORTB:
			clear_bit(DDRB , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTB AS INPUT PIN **/
			break;
 3ca:	08 95       	ret
			
			case DIO_PORTC:
			clear_bit(DDRC , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTC AS INPUT PIN **/
 3cc:	24 b3       	in	r18, 0x14	; 20
 3ce:	81 e0       	ldi	r24, 0x01	; 1
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	02 c0       	rjmp	.+4      	; 0x3d8 <DIO_setpindir+0x5a>
 3d4:	88 0f       	add	r24, r24
 3d6:	99 1f       	adc	r25, r25
 3d8:	6a 95       	dec	r22
 3da:	e2 f7       	brpl	.-8      	; 0x3d4 <DIO_setpindir+0x56>
 3dc:	80 95       	com	r24
 3de:	82 23       	and	r24, r18
 3e0:	84 bb       	out	0x14, r24	; 20
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
 3e2:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(DDRB , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTB AS INPUT PIN **/
			break;
			
			case DIO_PORTC:
			clear_bit(DDRC , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTC AS INPUT PIN **/
			break;
 3e4:	08 95       	ret
			
			case DIO_PORTD:
			clear_bit(DDRD , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTD AS INPUT PIN **/
 3e6:	21 b3       	in	r18, 0x11	; 17
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	02 c0       	rjmp	.+4      	; 0x3f2 <DIO_setpindir+0x74>
 3ee:	88 0f       	add	r24, r24
 3f0:	99 1f       	adc	r25, r25
 3f2:	6a 95       	dec	r22
 3f4:	e2 f7       	brpl	.-8      	; 0x3ee <DIO_setpindir+0x70>
 3f6:	80 95       	com	r24
 3f8:	82 23       	and	r24, r18
 3fa:	81 bb       	out	0x11, r24	; 17
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
 3fc:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(DDRC , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTC AS INPUT PIN **/
			break;
			
			case DIO_PORTD:
			clear_bit(DDRD , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTD AS INPUT PIN **/
			break;
 3fe:	08 95       	ret
		} 
		break;
		
		case DIO_PIN_OUTPUT:  /* OUTPUT CASE  */
		
		switch(u8_a_portid) /** SWITCH CASE ON THE PORT ID */
 400:	81 30       	cpi	r24, 0x01	; 1
 402:	91 f0       	breq	.+36     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 404:	28 f0       	brcs	.+10     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 406:	82 30       	cpi	r24, 0x02	; 2
 408:	d9 f0       	breq	.+54     	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 40a:	83 30       	cpi	r24, 0x03	; 3
 40c:	29 f1       	breq	.+74     	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
 40e:	34 c0       	rjmp	.+104    	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
		{
			case DIO_PORTA:
			set_bit(DDRA , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
 410:	2a b3       	in	r18, 0x1a	; 26
 412:	81 e0       	ldi	r24, 0x01	; 1
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	02 c0       	rjmp	.+4      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 418:	88 0f       	add	r24, r24
 41a:	99 1f       	adc	r25, r25
 41c:	6a 95       	dec	r22
 41e:	e2 f7       	brpl	.-8      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 420:	82 2b       	or	r24, r18
 422:	8a bb       	out	0x1a, r24	; 26
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
 424:	80 e0       	ldi	r24, 0x00	; 0
		
		switch(u8_a_portid) /** SWITCH CASE ON THE PORT ID */
		{
			case DIO_PORTA:
			set_bit(DDRA , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
 426:	08 95       	ret
			
			case DIO_PORTB:
			set_bit(DDRB , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
 428:	27 b3       	in	r18, 0x17	; 23
 42a:	81 e0       	ldi	r24, 0x01	; 1
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	02 c0       	rjmp	.+4      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 430:	88 0f       	add	r24, r24
 432:	99 1f       	adc	r25, r25
 434:	6a 95       	dec	r22
 436:	e2 f7       	brpl	.-8      	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 438:	82 2b       	or	r24, r18
 43a:	87 bb       	out	0x17, r24	; 23
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
 43c:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(DDRA , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
			
			case DIO_PORTB:
			set_bit(DDRB , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
 43e:	08 95       	ret
			
			case DIO_PORTC:
			set_bit(DDRC , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
 440:	24 b3       	in	r18, 0x14	; 20
 442:	81 e0       	ldi	r24, 0x01	; 1
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	02 c0       	rjmp	.+4      	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 448:	88 0f       	add	r24, r24
 44a:	99 1f       	adc	r25, r25
 44c:	6a 95       	dec	r22
 44e:	e2 f7       	brpl	.-8      	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 450:	82 2b       	or	r24, r18
 452:	84 bb       	out	0x14, r24	; 20
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
 454:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(DDRB , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
			
			case DIO_PORTC:
			set_bit(DDRC , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
 456:	08 95       	ret
			
			case DIO_PORTD:
			set_bit(DDRD , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
 458:	21 b3       	in	r18, 0x11	; 17
 45a:	81 e0       	ldi	r24, 0x01	; 1
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	02 c0       	rjmp	.+4      	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
 460:	88 0f       	add	r24, r24
 462:	99 1f       	adc	r25, r25
 464:	6a 95       	dec	r22
 466:	e2 f7       	brpl	.-8      	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
 468:	82 2b       	or	r24, r18
 46a:	81 bb       	out	0x11, r24	; 17
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
 46c:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(DDRC , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
			
			case DIO_PORTD:
			set_bit(DDRD , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
 46e:	08 95       	ret
		} 
		break;
		 
		 
		default:  /** DIRECTION ISN'T INPUT OR OUTPUT */
		en_a_dirstate = NOT_VALID_DIRECTION ; /** RETURN AS DIR NOT VALID ERRORS **/
 470:	81 e0       	ldi	r24, 0x01	; 1
 472:	08 95       	ret
			case DIO_PORTD:
			clear_bit(DDRD , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTD AS INPUT PIN **/
			break;
			
			default: /** DO NOTHING **/
			en_a_dirstate = NOT_VALID_DIRECTION ; /** RETURN AS DIR NOT VALID ERRORS **/
 474:	81 e0       	ldi	r24, 0x01	; 1
 476:	08 95       	ret
			case DIO_PORTD:
			set_bit(DDRD , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
			
			default:  /** DO NOTHING **/
			en_a_dirstate = NOT_VALID_DIRECTION ; /** RETURN AS DIR NOT VALID ERRORS **/
 478:	81 e0       	ldi	r24, 0x01	; 1
		en_a_dirstate = NOT_VALID_DIRECTION ; /** RETURN AS DIR NOT VALID ERRORS **/
		break ; 
	} 
	
	return en_a_dirstate ; /** RETURN THE STATE OF FUNCTION **/
}
 47a:	08 95       	ret

0000047c <DIO_setpinvalue>:
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
	
	switch(u8_a_pinval)
 47c:	44 23       	and	r20, r20
 47e:	19 f0       	breq	.+6      	; 0x486 <DIO_setpinvalue+0xa>
 480:	41 30       	cpi	r20, 0x01	; 1
 482:	e9 f1       	breq	.+122    	; 0x4fe <DIO_setpinvalue+0x82>
 484:	74 c0       	rjmp	.+232    	; 0x56e <DIO_setpinvalue+0xf2>
	{
		case DIO_PIN_LOW:  /** IN CASE PIN VALUE IS LOW */
		
		switch(u8_a_portid)  /** SWITCH CASE ON THE PORT ID */ 
 486:	81 30       	cpi	r24, 0x01	; 1
 488:	99 f0       	breq	.+38     	; 0x4b0 <DIO_setpinvalue+0x34>
 48a:	28 f0       	brcs	.+10     	; 0x496 <DIO_setpinvalue+0x1a>
 48c:	82 30       	cpi	r24, 0x02	; 2
 48e:	e9 f0       	breq	.+58     	; 0x4ca <DIO_setpinvalue+0x4e>
 490:	83 30       	cpi	r24, 0x03	; 3
 492:	41 f1       	breq	.+80     	; 0x4e4 <DIO_setpinvalue+0x68>
 494:	6e c0       	rjmp	.+220    	; 0x572 <DIO_setpinvalue+0xf6>
		{
			case DIO_PORTA:
			clear_bit(PORTA , u8_a_pinid);       /** SET THIS PIN AS LOW **/
 496:	2b b3       	in	r18, 0x1b	; 27
 498:	81 e0       	ldi	r24, 0x01	; 1
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	02 c0       	rjmp	.+4      	; 0x4a2 <DIO_setpinvalue+0x26>
 49e:	88 0f       	add	r24, r24
 4a0:	99 1f       	adc	r25, r25
 4a2:	6a 95       	dec	r22
 4a4:	e2 f7       	brpl	.-8      	; 0x49e <DIO_setpinvalue+0x22>
 4a6:	80 95       	com	r24
 4a8:	82 23       	and	r24, r18
 4aa:	8b bb       	out	0x1b, r24	; 27
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
 4ac:	80 e0       	ldi	r24, 0x00	; 0
		
		switch(u8_a_portid)  /** SWITCH CASE ON THE PORT ID */ 
		{
			case DIO_PORTA:
			clear_bit(PORTA , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
 4ae:	08 95       	ret
			
			case DIO_PORTB:
			clear_bit(PORTB , u8_a_pinid);       /** SET THIS PIN AS LOW **/
 4b0:	28 b3       	in	r18, 0x18	; 24
 4b2:	81 e0       	ldi	r24, 0x01	; 1
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	02 c0       	rjmp	.+4      	; 0x4bc <DIO_setpinvalue+0x40>
 4b8:	88 0f       	add	r24, r24
 4ba:	99 1f       	adc	r25, r25
 4bc:	6a 95       	dec	r22
 4be:	e2 f7       	brpl	.-8      	; 0x4b8 <DIO_setpinvalue+0x3c>
 4c0:	80 95       	com	r24
 4c2:	82 23       	and	r24, r18
 4c4:	88 bb       	out	0x18, r24	; 24
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
 4c6:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(PORTA , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
			
			case DIO_PORTB:
			clear_bit(PORTB , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
 4c8:	08 95       	ret
			
			case DIO_PORTC:
			clear_bit(PORTC , u8_a_pinid);       /** SET THIS PIN AS LOW **/
 4ca:	25 b3       	in	r18, 0x15	; 21
 4cc:	81 e0       	ldi	r24, 0x01	; 1
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	02 c0       	rjmp	.+4      	; 0x4d6 <DIO_setpinvalue+0x5a>
 4d2:	88 0f       	add	r24, r24
 4d4:	99 1f       	adc	r25, r25
 4d6:	6a 95       	dec	r22
 4d8:	e2 f7       	brpl	.-8      	; 0x4d2 <DIO_setpinvalue+0x56>
 4da:	80 95       	com	r24
 4dc:	82 23       	and	r24, r18
 4de:	85 bb       	out	0x15, r24	; 21
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
 4e0:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(PORTB , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
			
			case DIO_PORTC:
			clear_bit(PORTC , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
 4e2:	08 95       	ret
			
			case DIO_PORTD:
			clear_bit(PORTD , u8_a_pinid);       /** SET THIS PIN AS LOW **/
 4e4:	22 b3       	in	r18, 0x12	; 18
 4e6:	81 e0       	ldi	r24, 0x01	; 1
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <DIO_setpinvalue+0x74>
 4ec:	88 0f       	add	r24, r24
 4ee:	99 1f       	adc	r25, r25
 4f0:	6a 95       	dec	r22
 4f2:	e2 f7       	brpl	.-8      	; 0x4ec <DIO_setpinvalue+0x70>
 4f4:	80 95       	com	r24
 4f6:	82 23       	and	r24, r18
 4f8:	82 bb       	out	0x12, r24	; 18
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
 4fa:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(PORTC , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
			
			case DIO_PORTD:
			clear_bit(PORTD , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
 4fc:	08 95       	ret
		} 
		break;
		
		case DIO_PIN_HIGH:
		
		switch(u8_a_portid)
 4fe:	81 30       	cpi	r24, 0x01	; 1
 500:	91 f0       	breq	.+36     	; 0x526 <DIO_setpinvalue+0xaa>
 502:	28 f0       	brcs	.+10     	; 0x50e <DIO_setpinvalue+0x92>
 504:	82 30       	cpi	r24, 0x02	; 2
 506:	d9 f0       	breq	.+54     	; 0x53e <DIO_setpinvalue+0xc2>
 508:	83 30       	cpi	r24, 0x03	; 3
 50a:	29 f1       	breq	.+74     	; 0x556 <DIO_setpinvalue+0xda>
 50c:	34 c0       	rjmp	.+104    	; 0x576 <DIO_setpinvalue+0xfa>
		{
			case DIO_PORTA:
			set_bit(PORTA , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
 50e:	2b b3       	in	r18, 0x1b	; 27
 510:	81 e0       	ldi	r24, 0x01	; 1
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	02 c0       	rjmp	.+4      	; 0x51a <DIO_setpinvalue+0x9e>
 516:	88 0f       	add	r24, r24
 518:	99 1f       	adc	r25, r25
 51a:	6a 95       	dec	r22
 51c:	e2 f7       	brpl	.-8      	; 0x516 <DIO_setpinvalue+0x9a>
 51e:	82 2b       	or	r24, r18
 520:	8b bb       	out	0x1b, r24	; 27
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
 522:	80 e0       	ldi	r24, 0x00	; 0
		
		switch(u8_a_portid)
		{
			case DIO_PORTA:
			set_bit(PORTA , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
 524:	08 95       	ret
			
			case DIO_PORTB:
			set_bit(PORTB , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
 526:	28 b3       	in	r18, 0x18	; 24
 528:	81 e0       	ldi	r24, 0x01	; 1
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	02 c0       	rjmp	.+4      	; 0x532 <DIO_setpinvalue+0xb6>
 52e:	88 0f       	add	r24, r24
 530:	99 1f       	adc	r25, r25
 532:	6a 95       	dec	r22
 534:	e2 f7       	brpl	.-8      	; 0x52e <DIO_setpinvalue+0xb2>
 536:	82 2b       	or	r24, r18
 538:	88 bb       	out	0x18, r24	; 24
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
 53a:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(PORTA , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
			
			case DIO_PORTB:
			set_bit(PORTB , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
 53c:	08 95       	ret
			
			case DIO_PORTC:
			set_bit(PORTC , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
 53e:	25 b3       	in	r18, 0x15	; 21
 540:	81 e0       	ldi	r24, 0x01	; 1
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	02 c0       	rjmp	.+4      	; 0x54a <DIO_setpinvalue+0xce>
 546:	88 0f       	add	r24, r24
 548:	99 1f       	adc	r25, r25
 54a:	6a 95       	dec	r22
 54c:	e2 f7       	brpl	.-8      	; 0x546 <DIO_setpinvalue+0xca>
 54e:	82 2b       	or	r24, r18
 550:	85 bb       	out	0x15, r24	; 21
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
 552:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(PORTB , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
			
			case DIO_PORTC:
			set_bit(PORTC , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
 554:	08 95       	ret
			
			case DIO_PORTD:
			set_bit(PORTD , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
 556:	22 b3       	in	r18, 0x12	; 18
 558:	81 e0       	ldi	r24, 0x01	; 1
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	02 c0       	rjmp	.+4      	; 0x562 <DIO_setpinvalue+0xe6>
 55e:	88 0f       	add	r24, r24
 560:	99 1f       	adc	r25, r25
 562:	6a 95       	dec	r22
 564:	e2 f7       	brpl	.-8      	; 0x55e <DIO_setpinvalue+0xe2>
 566:	82 2b       	or	r24, r18
 568:	82 bb       	out	0x12, r24	; 18
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
 56a:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(PORTC , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
			
			case DIO_PORTD:
			set_bit(PORTD , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
 56c:	08 95       	ret
			break;
		} 
		break;
		
		default :
		en_a_valstate = NOT_VALID_VALUE ;  /** RETURN VALUE AS NOT VALID **/
 56e:	81 e0       	ldi	r24, 0x01	; 1
 570:	08 95       	ret
			case DIO_PORTD:
			clear_bit(PORTD , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
			
			default:
			en_a_valstate = NOT_VALID_VALUE ;  /** RETURN VALUE AS NOT VALID **/
 572:	81 e0       	ldi	r24, 0x01	; 1
 574:	08 95       	ret
			case DIO_PORTD:
			set_bit(PORTD , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
			
			default:
			en_a_valstate = NOT_VALID_VALUE ;  /** RETURN VALUE AS NOT VALID **/
 576:	81 e0       	ldi	r24, 0x01	; 1
		en_a_valstate = NOT_VALID_VALUE ;  /** RETURN VALUE AS NOT VALID **/
		break ;
	} 
	
	return en_a_valstate ; /** RETURN THE FINAL STATE OF THE FUNCTION */
}
 578:	08 95       	ret

0000057a <TWI_init>:
    /** Wait for TWINT flag set in TWCR Register (start bit is send successfully) **/
    while(BIT_IS_CLEAR(TWCR,TWINT));
	
    /** READ DATA **/
    return TWDR;
}
 57a:	82 e0       	ldi	r24, 0x02	; 2
 57c:	80 b9       	out	0x00, r24	; 0
 57e:	11 b8       	out	0x01, r1	; 1
 580:	84 e0       	ldi	r24, 0x04	; 4
 582:	86 bf       	out	0x36, r24	; 54
 584:	08 95       	ret

00000586 <TWI_start>:
 586:	84 ea       	ldi	r24, 0xA4	; 164
 588:	86 bf       	out	0x36, r24	; 54
 58a:	06 b6       	in	r0, 0x36	; 54
 58c:	07 fe       	sbrs	r0, 7
 58e:	fd cf       	rjmp	.-6      	; 0x58a <TWI_start+0x4>
 590:	08 95       	ret

00000592 <TWI_readwithnack>:
	/************************************************/
	/* CLEAR THE TWINT FLAG                        **/
	/* DISABLE ACK BIT AFTER READING THE DATA      **/
	/* ENABLE TWI MODULE                           **/
	/************************************************/
	TWCR = (1 << TWINT) | (1 << TWEN) ;
 592:	84 e8       	ldi	r24, 0x84	; 132
 594:	86 bf       	out	0x36, r24	; 54
	
	/** Wait for TWINT flag set in TWCR Register (start bit is send successfully) **/
	while(BIT_IS_CLEAR(TWCR,TWINT));
 596:	06 b6       	in	r0, 0x36	; 54
 598:	07 fe       	sbrs	r0, 7
 59a:	fd cf       	rjmp	.-6      	; 0x596 <TWI_readwithnack+0x4>
	
	/** READ DATA **/
	return TWDR;
 59c:	83 b1       	in	r24, 0x03	; 3
}
 59e:	08 95       	ret

000005a0 <TWI_write>:
/** RETURNS   : VOID                                    **/
/*********************************************************/
void TWI_write(uint8_t u8_a_data)
{
	/** PREPARE DATA FOR SENDING **/
    TWDR = u8_a_data;
 5a0:	83 b9       	out	0x03, r24	; 3
    
	/***************************************/ 
	/** CLEAR THE TWINT FLAG              **/
	/** ENABLE TWI MODULE                 **/
	/***************************************/ 
    TWCR = (1 << TWINT) | (1 << TWEN);
 5a2:	84 e8       	ldi	r24, 0x84	; 132
 5a4:	86 bf       	out	0x36, r24	; 54
	
    /** Wait for TWINT flag set in TWCR Register (start bit is send successfully) **/
    while(BIT_IS_CLEAR(TWCR,TWINT));
 5a6:	06 b6       	in	r0, 0x36	; 54
 5a8:	07 fe       	sbrs	r0, 7
 5aa:	fd cf       	rjmp	.-6      	; 0x5a6 <TWI_write+0x6>
}
 5ac:	08 95       	ret

000005ae <TWI_stop>:
	/****************************************/ 
	/** CLEAR THE TWINT FLAG               **/
	/** SEND STIOP BIT EVENT               **/
	/** ENABLE TWI MODULE                  **/
	/****************************************/
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
 5ae:	84 e9       	ldi	r24, 0x94	; 148
 5b0:	86 bf       	out	0x36, r24	; 54
 5b2:	08 95       	ret

000005b4 <TWI_getstatus>:
uint8_t TWI_getstatus(void)
{
	uint8_t u8_a_status ; /** VARIABLE TO HOLD THE STATUS CODE VALUE **/
	
	/** MASKING THE FIRST THREE BITS TO GET THE LAST 5 BITS ONLY **/
	u8_a_status = TWSR & 0xF8;
 5b4:	81 b1       	in	r24, 0x01	; 1
	
	return u8_a_status;
 5b6:	88 7f       	andi	r24, 0xF8	; 248
 5b8:	08 95       	ret

000005ba <SPI_initmaster>:
{
	while( (SPI->SPSR &  (1 << 7)) == 0); /** WAIT UNTILL THE RECEIPTION FLAG RAISED **/
	
	*u8_a_recdata = SPI->SPDR ; /** SAVE THE DATA FROM SPDR **/
	
}
 5ba:	41 e0       	ldi	r20, 0x01	; 1
 5bc:	64 e0       	ldi	r22, 0x04	; 4
 5be:	81 e0       	ldi	r24, 0x01	; 1
 5c0:	0e 94 bf 01 	call	0x37e	; 0x37e <DIO_setpindir>
 5c4:	41 e0       	ldi	r20, 0x01	; 1
 5c6:	65 e0       	ldi	r22, 0x05	; 5
 5c8:	81 e0       	ldi	r24, 0x01	; 1
 5ca:	0e 94 bf 01 	call	0x37e	; 0x37e <DIO_setpindir>
 5ce:	40 e0       	ldi	r20, 0x00	; 0
 5d0:	66 e0       	ldi	r22, 0x06	; 6
 5d2:	81 e0       	ldi	r24, 0x01	; 1
 5d4:	0e 94 bf 01 	call	0x37e	; 0x37e <DIO_setpindir>
 5d8:	41 e0       	ldi	r20, 0x01	; 1
 5da:	67 e0       	ldi	r22, 0x07	; 7
 5dc:	81 e0       	ldi	r24, 0x01	; 1
 5de:	0e 94 bf 01 	call	0x37e	; 0x37e <DIO_setpindir>
 5e2:	8d b1       	in	r24, 0x0d	; 13
 5e4:	81 60       	ori	r24, 0x01	; 1
 5e6:	8d b9       	out	0x0d, r24	; 13
 5e8:	8d b1       	in	r24, 0x0d	; 13
 5ea:	82 60       	ori	r24, 0x02	; 2
 5ec:	8d b9       	out	0x0d, r24	; 13
 5ee:	8e b1       	in	r24, 0x0e	; 14
 5f0:	8e 7f       	andi	r24, 0xFE	; 254
 5f2:	8e b9       	out	0x0e, r24	; 14
 5f4:	8e b1       	in	r24, 0x0e	; 14
 5f6:	8e 7f       	andi	r24, 0xFE	; 254
 5f8:	8e b9       	out	0x0e, r24	; 14
 5fa:	8d b1       	in	r24, 0x0d	; 13
 5fc:	8f 77       	andi	r24, 0x7F	; 127
 5fe:	8d b9       	out	0x0d, r24	; 13
 600:	8d b1       	in	r24, 0x0d	; 13
 602:	8f 7d       	andi	r24, 0xDF	; 223
 604:	8d b9       	out	0x0d, r24	; 13
 606:	8d b1       	in	r24, 0x0d	; 13
 608:	87 7f       	andi	r24, 0xF7	; 247
 60a:	8d b9       	out	0x0d, r24	; 13
 60c:	8d b1       	in	r24, 0x0d	; 13
 60e:	8b 7f       	andi	r24, 0xFB	; 251
 610:	8d b9       	out	0x0d, r24	; 13
 612:	8d b1       	in	r24, 0x0d	; 13
 614:	80 61       	ori	r24, 0x10	; 16
 616:	8d b9       	out	0x0d, r24	; 13
 618:	8d b1       	in	r24, 0x0d	; 13
 61a:	80 64       	ori	r24, 0x40	; 64
 61c:	8d b9       	out	0x0d, r24	; 13
 61e:	08 95       	ret

00000620 <SPI_masterinittransmit>:
 620:	40 e0       	ldi	r20, 0x00	; 0
 622:	64 e0       	ldi	r22, 0x04	; 4
 624:	81 e0       	ldi	r24, 0x01	; 1
 626:	0e 94 3e 02 	call	0x47c	; 0x47c <DIO_setpinvalue>
 62a:	08 95       	ret

0000062c <SPI_masterendtransmit>:
 62c:	41 e0       	ldi	r20, 0x01	; 1
 62e:	64 e0       	ldi	r22, 0x04	; 4
 630:	81 e0       	ldi	r24, 0x01	; 1
 632:	0e 94 3e 02 	call	0x47c	; 0x47c <DIO_setpinvalue>
 636:	08 95       	ret

00000638 <SPI_sendbyte>:
 638:	8f b9       	out	0x0f, r24	; 15
 63a:	77 9b       	sbis	0x0e, 7	; 14
 63c:	fe cf       	rjmp	.-4      	; 0x63a <SPI_sendbyte+0x2>
 63e:	08 95       	ret

00000640 <SPI_sendstring>:
/** FUNCTION FOR MASTER TO SEND STRING                          **/
/** ARGUMENTS  : u8_a_str (string)                              **/
/** RETURNS    : en_a_spierrstatus                              **/
/*****************************************************************/
en_a_spierrstatus SPI_sendstring(const uint8_t * u8_a_str)
{
 640:	0f 93       	push	r16
 642:	1f 93       	push	r17
 644:	cf 93       	push	r28
 646:	8c 01       	movw	r16, r24
	uint8_t u8_L_counter = 0 ; /** COUNTER FOR STRING LETTERS **/
 648:	c0 e0       	ldi	r28, 0x00	; 0
	
	while (u8_a_str[u8_L_counter] != '\0')
 64a:	03 c0       	rjmp	.+6      	; 0x652 <SPI_sendstring+0x12>
	{
		SPI_sendbyte(u8_a_str[u8_L_counter]); /** SEND CHARACTER **/
 64c:	0e 94 1c 03 	call	0x638	; 0x638 <SPI_sendbyte>
		
		u8_L_counter++; /* MOVE TO THE SECOND LETTER */
 650:	cf 5f       	subi	r28, 0xFF	; 255
/*****************************************************************/
en_a_spierrstatus SPI_sendstring(const uint8_t * u8_a_str)
{
	uint8_t u8_L_counter = 0 ; /** COUNTER FOR STRING LETTERS **/
	
	while (u8_a_str[u8_L_counter] != '\0')
 652:	f8 01       	movw	r30, r16
 654:	ec 0f       	add	r30, r28
 656:	f1 1d       	adc	r31, r1
 658:	80 81       	ld	r24, Z
 65a:	81 11       	cpse	r24, r1
 65c:	f7 cf       	rjmp	.-18     	; 0x64c <SPI_sendstring+0xc>
	{
		SPI_sendbyte(u8_a_str[u8_L_counter]); /** SEND CHARACTER **/
		
		u8_L_counter++; /* MOVE TO THE SECOND LETTER */
	}
}
 65e:	cf 91       	pop	r28
 660:	1f 91       	pop	r17
 662:	0f 91       	pop	r16
 664:	08 95       	ret

00000666 <TMR0_init>:
	 /* TIMER MODE OF TMR0 */
	#elif TIMER0_CLK_SRC == INTERNAL_CLK_SRC
	
	 #if TIMER0_MODE == TMR0_NORMAL_MODE
	 
	 clear_bit(TCCR0 , 7);
 666:	83 b7       	in	r24, 0x33	; 51
 668:	8f 77       	andi	r24, 0x7F	; 127
 66a:	83 bf       	out	0x33, r24	; 51
	 clear_bit(TCCR0 , 6);
 66c:	83 b7       	in	r24, 0x33	; 51
 66e:	8f 7b       	andi	r24, 0xBF	; 191
 670:	83 bf       	out	0x33, r24	; 51
	 clear_bit(TCCR0 , 3);
 672:	83 b7       	in	r24, 0x33	; 51
 674:	87 7f       	andi	r24, 0xF7	; 247
 676:	83 bf       	out	0x33, r24	; 51
	 clear_bit(TCCR0 , 4);
 678:	83 b7       	in	r24, 0x33	; 51
 67a:	8f 7e       	andi	r24, 0xEF	; 239
 67c:	83 bf       	out	0x33, r24	; 51
	 clear_bit(TCCR0 , 5);
 67e:	83 b7       	in	r24, 0x33	; 51
 680:	8f 7d       	andi	r24, 0xDF	; 223
 682:	83 bf       	out	0x33, r24	; 51
	  #endif
	 #endif
	#endif
	
	return en_a_initstatus ; /** RETURN THE STATUS OF INITIALIZATION **/
}
 684:	80 e0       	ldi	r24, 0x00	; 0
 686:	08 95       	ret

00000688 <TMR0_start>:
{
	TMR0_start_error en_a_startstatus = VALID_START ; /** VARIABLE TO RETURN THE STATUS OF START **/
	
	#if TIMER0_PRESCALER_VAL == PRESCALER_1024
	
	set_bit(TCCR0 , 0);
 688:	83 b7       	in	r24, 0x33	; 51
 68a:	81 60       	ori	r24, 0x01	; 1
 68c:	83 bf       	out	0x33, r24	; 51
	clear_bit(TCCR0 , 1);
 68e:	83 b7       	in	r24, 0x33	; 51
 690:	8d 7f       	andi	r24, 0xFD	; 253
 692:	83 bf       	out	0x33, r24	; 51
	set_bit(TCCR0 , 2);
 694:	83 b7       	in	r24, 0x33	; 51
 696:	84 60       	ori	r24, 0x04	; 4
 698:	83 bf       	out	0x33, r24	; 51
	en_a_startstatus = VALID_START ; /** START DONE PROBERLY **/
	
	#endif
	
	return en_a_startstatus ; /** RETURN THE STATUS **/
}
 69a:	80 e0       	ldi	r24, 0x00	; 0
 69c:	08 95       	ret

0000069e <TMR0_stop>:
TMR0_stop_error TMR0_stop(void)
{
	TMR0_stop_error en_a_stopStatus = VALID_STOP ; /** VARIABLE TO RETURN THE STATUS **/
	
	/** SET CONFIGURATIONS AS NO CLOCK SOURCE **/
	clear_bit(TCCR0 , 0);
 69e:	83 b7       	in	r24, 0x33	; 51
 6a0:	8e 7f       	andi	r24, 0xFE	; 254
 6a2:	83 bf       	out	0x33, r24	; 51
	clear_bit(TCCR0 , 1);
 6a4:	83 b7       	in	r24, 0x33	; 51
 6a6:	8d 7f       	andi	r24, 0xFD	; 253
 6a8:	83 bf       	out	0x33, r24	; 51
	clear_bit(TCCR0 , 2);
 6aa:	83 b7       	in	r24, 0x33	; 51
 6ac:	8b 7f       	andi	r24, 0xFB	; 251
 6ae:	83 bf       	out	0x33, r24	; 51
	
	en_a_stopStatus = VALID_STOP ; /** STOP DONE PROPERLY **/
	
	return en_a_stopStatus ; /** RETURN THE STATUS **/
	
}
 6b0:	80 e0       	ldi	r24, 0x00	; 0
 6b2:	08 95       	ret

000006b4 <TMR0_delayms>:
	/******************************************************************************************/
	/**               THIS CALCULATIONS CONFIGURED AS F_CPU   16 MHZ                         **/
	/******************************************************************************************/
	#if TIMER0_PRESCALER_VAL == PRESCALER_1024  /** CHECK THE PRESCALLER FROM CONFIG FILE **/
	 
        u32_gs_tmr0nuofovs = (u32_a_delayms / 16.384);   /** CALCULATING NUMBER OF OVERFLOWS ( DESIRED DELAY / TIME OF OVER FLOW ) **/ 
 6b4:	0e 94 a2 04 	call	0x944	; 0x944 <__floatunsisf>
 6b8:	2f e6       	ldi	r18, 0x6F	; 111
 6ba:	32 e1       	ldi	r19, 0x12	; 18
 6bc:	43 e8       	ldi	r20, 0x83	; 131
 6be:	51 e4       	ldi	r21, 0x41	; 65
 6c0:	0e 94 01 04 	call	0x802	; 0x802 <__divsf3>
 6c4:	0e 94 73 04 	call	0x8e6	; 0x8e6 <__fixunssfsi>
 6c8:	60 93 53 01 	sts	0x0153, r22	; 0x800153 <u32_gs_tmr0nuofovs>
 6cc:	70 93 54 01 	sts	0x0154, r23	; 0x800154 <u32_gs_tmr0nuofovs+0x1>
 6d0:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <u32_gs_tmr0nuofovs+0x2>
 6d4:	90 93 56 01 	sts	0x0156, r25	; 0x800156 <u32_gs_tmr0nuofovs+0x3>
	
        TCNT0 = 0 ;   /** SET THE INITIAL VALUE IN TCNT0 REGISTER **/
 6d8:	12 be       	out	0x32, r1	; 50
	
	    en_a_delaystatus = VALID_DELAY ; /** VALID DELAY CONFIGURATIN **/
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
 6da:	0e 94 44 03 	call	0x688	; 0x688 <TMR0_start>
/** RETURNS    : TMR0_delay                                                    */
/*******************************************************************************/
TMR0_delay_error TMR0_delayms(uint32_t u32_a_delayms)
{
	
	uint32_t u32_a_overflowcounter = 0 ;
 6de:	40 e0       	ldi	r20, 0x00	; 0
 6e0:	50 e0       	ldi	r21, 0x00	; 0
 6e2:	ba 01       	movw	r22, r20
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
	
	while ( u32_a_overflowcounter < u32_gs_tmr0nuofovs ) /** STUCK IN THIS LOOP UNTILL THIS CONDITION IS FALSE **/
 6e4:	0a c0       	rjmp	.+20     	; 0x6fa <TMR0_delayms+0x46>
	{
		while((TIFR & (1 << 0)) == 0); /** DO NOTHING UNTILL THIS FLAG RAISED (OVERFLOW HAPPENED) **/
 6e6:	08 b6       	in	r0, 0x38	; 56
 6e8:	00 fe       	sbrs	r0, 0
 6ea:	fd cf       	rjmp	.-6      	; 0x6e6 <TMR0_delayms+0x32>
		
		set_bit(TIFR , 0);        /** CLEAR THE FLAG BY SOFTWARE **/
 6ec:	88 b7       	in	r24, 0x38	; 56
 6ee:	81 60       	ori	r24, 0x01	; 1
 6f0:	88 bf       	out	0x38, r24	; 56
		
		u32_a_overflowcounter++ ; /** INCREASE THE OVERFLOWS BY ONE **/
 6f2:	4f 5f       	subi	r20, 0xFF	; 255
 6f4:	5f 4f       	sbci	r21, 0xFF	; 255
 6f6:	6f 4f       	sbci	r22, 0xFF	; 255
 6f8:	7f 4f       	sbci	r23, 0xFF	; 255
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
	
	while ( u32_a_overflowcounter < u32_gs_tmr0nuofovs ) /** STUCK IN THIS LOOP UNTILL THIS CONDITION IS FALSE **/
 6fa:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <u32_gs_tmr0nuofovs>
 6fe:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <u32_gs_tmr0nuofovs+0x1>
 702:	a0 91 55 01 	lds	r26, 0x0155	; 0x800155 <u32_gs_tmr0nuofovs+0x2>
 706:	b0 91 56 01 	lds	r27, 0x0156	; 0x800156 <u32_gs_tmr0nuofovs+0x3>
 70a:	48 17       	cp	r20, r24
 70c:	59 07       	cpc	r21, r25
 70e:	6a 07       	cpc	r22, r26
 710:	7b 07       	cpc	r23, r27
 712:	48 f3       	brcs	.-46     	; 0x6e6 <TMR0_delayms+0x32>
		set_bit(TIFR , 0);        /** CLEAR THE FLAG BY SOFTWARE **/
		
		u32_a_overflowcounter++ ; /** INCREASE THE OVERFLOWS BY ONE **/
	}
	
	u32_gs_tmr0nuofovs = 0 ; /** REINTIALIZE THE OVERFLOWS COUNTER TO 0 AGAIN **/
 714:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <u32_gs_tmr0nuofovs>
 718:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <u32_gs_tmr0nuofovs+0x1>
 71c:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <u32_gs_tmr0nuofovs+0x2>
 720:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <u32_gs_tmr0nuofovs+0x3>

	TMR0_stop();   /** STOP TMR0 TOSTART FROM 0 WHEN IT CALLED AGAIN **/
 724:	0e 94 4f 03 	call	0x69e	; 0x69e <TMR0_stop>
	
	return en_a_delaystatus ; /** RETURN THE STATUS **/
}
 728:	80 e0       	ldi	r24, 0x00	; 0
 72a:	08 95       	ret

0000072c <UART_init>:
/** RETURNS   : uart_errorstatus                             **/
/**************************************************************/
uart_errorstatus UART_init(void)
{
		/** SET DIRECTIONS OF TX AND RX PINS **/
		DIO_setpindir(DIO_PORTD , DIO_PIN1 , DIO_PIN_OUTPUT);  /** SET TX PIN AS OUTPUT **/
 72c:	41 e0       	ldi	r20, 0x01	; 1
 72e:	61 e0       	ldi	r22, 0x01	; 1
 730:	83 e0       	ldi	r24, 0x03	; 3
 732:	0e 94 bf 01 	call	0x37e	; 0x37e <DIO_setpindir>
		DIO_setpindir(DIO_PORTD , DIO_PIN0 , DIO_PIN_INPUT);   /** SET RX PIN AS INPUT  **/
 736:	40 e0       	ldi	r20, 0x00	; 0
 738:	60 e0       	ldi	r22, 0x00	; 0
 73a:	83 e0       	ldi	r24, 0x03	; 3
 73c:	0e 94 bf 01 	call	0x37e	; 0x37e <DIO_setpindir>
// 		UBRRH = 0 ;
		
		#if BAUDRATE_VALUE == BAUDRATE_9600
		uint32_t u32_a_BRVALUE = 0; /** VARIABLE TO HOLD THE VALUE TO BE STORED IN UBRRL **/
		u32_a_BRVALUE = ((80000) / (16 * 96)) - 1; /** CALCULATE THE UBRRL VALUE **/
		UBRRL = u32_a_BRVALUE;       /** ASSIGN UBRRL **/
 740:	83 e3       	ldi	r24, 0x33	; 51
 742:	89 b9       	out	0x09, r24	; 9
		u32_a_BRVALUE = ((16000000) / (16 * 115200)) - 1; /** CALCULATE THE UBRRL VALUE **/
		UBRRL = u32_a_BRVALUE ;       /** ASSIGN UBRRL **/
		#endif
		
		/** ENABLE TRANSMISSION AND RECEIVING **/
		set_bit(UCSRB , 3);
 744:	8a b1       	in	r24, 0x0a	; 10
 746:	88 60       	ori	r24, 0x08	; 8
 748:	8a b9       	out	0x0a, r24	; 10
		set_bit(UCSRB , 4);
 74a:	8a b1       	in	r24, 0x0a	; 10
 74c:	80 61       	ori	r24, 0x10	; 16
 74e:	8a b9       	out	0x0a, r24	; 10
		
		/** SELECT THE FIRST BIT TO WRITE TO THE UCSRC REGISTER **/
 		set_bit(UCSRC , 7);
 750:	80 b5       	in	r24, 0x20	; 32
 752:	80 68       	ori	r24, 0x80	; 128
 754:	80 bd       	out	0x20, r24	; 32
		clear_bit(UCSRC , 1);
		set_bit(UCSRC , 2);
		clear_bit(UCSRB , 2);
		
		#elif CHARACTER_SIZE == CHAR_SIZE_8BIT
		set_bit(UCSRC , 1);
 756:	80 b5       	in	r24, 0x20	; 32
 758:	82 60       	ori	r24, 0x02	; 2
 75a:	80 bd       	out	0x20, r24	; 32
		set_bit(UCSRC , 2);
 75c:	80 b5       	in	r24, 0x20	; 32
 75e:	84 60       	ori	r24, 0x04	; 4
 760:	80 bd       	out	0x20, r24	; 32
		clear_bit(UCSRB , 2);
 762:	8a b1       	in	r24, 0x0a	; 10
 764:	8b 7f       	andi	r24, 0xFB	; 251
 766:	8a b9       	out	0x0a, r24	; 10
		set_bit(UCSRB , 2);
		#endif
		
		
		#if PARITY_BIT_MODE == DISABLE_PARITY_BIT
		clear_bit(UCSRC , 4);
 768:	80 b5       	in	r24, 0x20	; 32
 76a:	8f 7e       	andi	r24, 0xEF	; 239
 76c:	80 bd       	out	0x20, r24	; 32
		clear_bit(UCSRC , 5);
 76e:	80 b5       	in	r24, 0x20	; 32
 770:	8f 7d       	andi	r24, 0xDF	; 223
 772:	80 bd       	out	0x20, r24	; 32
		set_bit(UCSRC , 4);
		set_bit(UCSRC , 5);
		#endif
		
		#if STOP_BITS == ONE_STOP_BIT
		clear_bit(UCSRC , 3);
 774:	80 b5       	in	r24, 0x20	; 32
 776:	87 7f       	andi	r24, 0xF7	; 247
 778:	80 bd       	out	0x20, r24	; 32
		set_bit(UCSRC , 3);
		#endif
		
		/** SET THE UART SYNCRONYZATION MODE **/
		#if UART_MODE == ASYNCRONOUS_MODE
		    clear_bit(UCSRC , 6);
 77a:	80 b5       	in	r24, 0x20	; 32
 77c:	8f 7b       	andi	r24, 0xBF	; 191
 77e:	80 bd       	out	0x20, r24	; 32
		
		#if DOUBLE_SPEED_MODE == ENABLE_DOUBLE_SPEED_MODE
		    set_bit(UCSRA , 1);
		
		#elif DOUBLE_SPEED_MODE == DISABLE_DOUBLE_SPEED_MODE
		     clear_bit(UCSRA , 1);
 780:	8b b1       	in	r24, 0x0b	; 11
 782:	8d 7f       	andi	r24, 0xFD	; 253
 784:	8b b9       	out	0x0b, r24	; 11
		
		#if MULTI_PROCESSOR_MODE == ENABLE_MULTIPROCESSOR_MODE
		    set_bit(UCSRA , 0);
		
		#elif MULTI_PROCESSOR_MODE == DISABLE_MULTIPROCESSOR_MODE
		     clear_bit(UCSRA , 0);
 786:	8b b1       	in	r24, 0x0b	; 11
 788:	8e 7f       	andi	r24, 0xFE	; 254
 78a:	8b b9       	out	0x0b, r24	; 11
		
		#if RECEIVING_INTERRUPT == ENABLE_RECEIVING_INTERRUPT
     		set_bit(UCSRB , 7);
		
		#elif RECEIVING_INTERRUPT == DISABLE_RECEIVING_INTERRUPT	
		      clear_bit(UCSRB , 7);
 78c:	8a b1       	in	r24, 0x0a	; 10
 78e:	8f 77       	andi	r24, 0x7F	; 127
 790:	8a b9       	out	0x0a, r24	; 10

		#if TRANSMITTING_INTERRUPT == ENABLE_TRANSMITTING_INTERRUPT
     		set_bit(UCSRB , 6);
		
		#elif TRANSMITTING_INTERRUPT == DISABLE_TRANSMITTING_INTERRUPT	
		    clear_bit(UCSRB , 6);
 792:	8a b1       	in	r24, 0x0a	; 10
 794:	8f 7b       	andi	r24, 0xBF	; 191
 796:	8a b9       	out	0x0a, r24	; 10
		
		#if UDR_INTERRUPT == ENABLE_UDR_INTERRUPT
		    set_bit(UCSRB , 5);
		
		#elif UDR_INTERRUPT == DISABLE_UDR_INTERRUPT
		    clear_bit(UCSRB , 5);
 798:	8a b1       	in	r24, 0x0a	; 10
 79a:	8f 7d       	andi	r24, 0xDF	; 223
 79c:	8a b9       	out	0x0a, r24	; 10
		#endif
		
}
 79e:	08 95       	ret

000007a0 <UART_sendchar>:
/** ARGUMENTS : ua_a_data                                    **/
/** RETURNS   : uart_errorstatus                             **/
/**************************************************************/
uart_errorstatus UART_sendchar(uint8_t ua_a_data)
{
	while( ! ( UCSRA & (1 <<5))); /** HOLD HERE UNTILL DATA REGISTER IS EMPTY (DATA SENT) **/
 7a0:	5d 9b       	sbis	0x0b, 5	; 11
 7a2:	fe cf       	rjmp	.-4      	; 0x7a0 <UART_sendchar>
    
	UDR = ua_a_data ; /** STORE THE DATA IN THE UDR BUFFER TO BE SENT **/
 7a4:	8c b9       	out	0x0c, r24	; 12
	
}
 7a6:	08 95       	ret

000007a8 <UART_sendstr>:
/** FUNCTION TO SEND STRING VIA UART                         **/
/** ARGUMENTS : ua_a_string                                  **/
/** RETURNS   : uart_errorstatus                             **/
/**************************************************************/
uart_errorstatus UART_sendstr(uint8_t * ua_a_string)
{
 7a8:	0f 93       	push	r16
 7aa:	1f 93       	push	r17
 7ac:	cf 93       	push	r28
 7ae:	8c 01       	movw	r16, r24
	uint8_t u8_a_lettercounter = 0 ; /** LETTERS COUNTER **/
 7b0:	c0 e0       	ldi	r28, 0x00	; 0
		
	while (ua_a_string[u8_a_lettercounter] != '\0')  /** UNTILL THE STRING ISN'T NULL **/
 7b2:	03 c0       	rjmp	.+6      	; 0x7ba <UART_sendstr+0x12>
	{
		UART_sendchar(ua_a_string[u8_a_lettercounter]); /** SEND THE LETTER USING UART_sendchar **/
 7b4:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <UART_sendchar>
		u8_a_lettercounter++; /** JUMP TO THE NEXT LETTER **/
 7b8:	cf 5f       	subi	r28, 0xFF	; 255
/**************************************************************/
uart_errorstatus UART_sendstr(uint8_t * ua_a_string)
{
	uint8_t u8_a_lettercounter = 0 ; /** LETTERS COUNTER **/
		
	while (ua_a_string[u8_a_lettercounter] != '\0')  /** UNTILL THE STRING ISN'T NULL **/
 7ba:	f8 01       	movw	r30, r16
 7bc:	ec 0f       	add	r30, r28
 7be:	f1 1d       	adc	r31, r1
 7c0:	80 81       	ld	r24, Z
 7c2:	81 11       	cpse	r24, r1
 7c4:	f7 cf       	rjmp	.-18     	; 0x7b4 <UART_sendstr+0xc>
	{
		UART_sendchar(ua_a_string[u8_a_lettercounter]); /** SEND THE LETTER USING UART_sendchar **/
		u8_a_lettercounter++; /** JUMP TO THE NEXT LETTER **/
	}
}
 7c6:	cf 91       	pop	r28
 7c8:	1f 91       	pop	r17
 7ca:	0f 91       	pop	r16
 7cc:	08 95       	ret

000007ce <UART_receivechar>:
/** ARGUMENTS : u8_recdata (POINTER TO STORE THE RECEIVED DATA)    **/
/** RETURNS   : uart_errorstatus                                   **/
/********************************************************************/
uart_errorstatus UART_receivechar(uint8_t * u8_a_recdata)
{
	while( ! (UCSRA & (1 << 7)) ) ; /** WAIT UNTILL THE DATA RECIVE FLAG RAISED **/
 7ce:	5f 9b       	sbis	0x0b, 7	; 11
 7d0:	fe cf       	rjmp	.-4      	; 0x7ce <UART_receivechar>
	
	*u8_a_recdata =  UDR ;	/** RETURN THE DATA IN UDR **/
 7d2:	2c b1       	in	r18, 0x0c	; 12
 7d4:	fc 01       	movw	r30, r24
 7d6:	20 83       	st	Z, r18
	
	
}
 7d8:	08 95       	ret

000007da <UART_receivestr>:
/** FUNCTION TO RECEIVE STRING VIA UART                                   **/
/** ARGUMENTS : u8_a_recstring (POINTER TO STORE THE RECEIVED DATA)       **/
/** RETURNS   : uart_errorstatus                                          **/
/***************************************************************************/
uart_errorstatus UART_receivestr(uint8_t * u8_a_recstring)
{
 7da:	0f 93       	push	r16
 7dc:	1f 93       	push	r17
 7de:	cf 93       	push	r28
 7e0:	8c 01       	movw	r16, r24
	uint8_t u8_a_lettercounter = 0 ; /** COUNTER TO LETTERS **/
 7e2:	c0 e0       	ldi	r28, 0x00	; 0
	 
	//UART_receivechar(u8_a_recstring[u8_a_lettercounter]) ; /** RECEIVE THE FIRST CHARACTER **/
	
	while (u8_a_recstring[u8_a_lettercounter] != '\0') /** WHILE STRING ISN'T NULL **/
 7e4:	03 c0       	rjmp	.+6      	; 0x7ec <UART_receivestr+0x12>
	{
		
		UART_receivechar(&u8_a_recstring[u8_a_lettercounter]); /** RECEIVE CHARACTER **/
 7e6:	0e 94 e7 03 	call	0x7ce	; 0x7ce <UART_receivechar>
		
		u8_a_lettercounter++ ; /** JUMP TO THE NEXT INDEX **/
 7ea:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t u8_a_lettercounter = 0 ; /** COUNTER TO LETTERS **/
	 
	//UART_receivechar(u8_a_recstring[u8_a_lettercounter]) ; /** RECEIVE THE FIRST CHARACTER **/
	
	while (u8_a_recstring[u8_a_lettercounter] != '\0') /** WHILE STRING ISN'T NULL **/
 7ec:	c8 01       	movw	r24, r16
 7ee:	8c 0f       	add	r24, r28
 7f0:	91 1d       	adc	r25, r1
 7f2:	fc 01       	movw	r30, r24
 7f4:	20 81       	ld	r18, Z
 7f6:	21 11       	cpse	r18, r1
 7f8:	f6 cf       	rjmp	.-20     	; 0x7e6 <UART_receivestr+0xc>
		u8_a_lettercounter++ ; /** JUMP TO THE NEXT INDEX **/
		
	}
	
	//u8_a_recstring[u8_a_lettercounter] = '\0';	/** SET THE LAST CHARACTER TO NULL **/
 7fa:	cf 91       	pop	r28
 7fc:	1f 91       	pop	r17
 7fe:	0f 91       	pop	r16
 800:	08 95       	ret

00000802 <__divsf3>:
 802:	0e 94 15 04 	call	0x82a	; 0x82a <__divsf3x>
 806:	0c 94 f6 04 	jmp	0x9ec	; 0x9ec <__fp_round>
 80a:	0e 94 ef 04 	call	0x9de	; 0x9de <__fp_pscB>
 80e:	58 f0       	brcs	.+22     	; 0x826 <__divsf3+0x24>
 810:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <__fp_pscA>
 814:	40 f0       	brcs	.+16     	; 0x826 <__divsf3+0x24>
 816:	29 f4       	brne	.+10     	; 0x822 <__divsf3+0x20>
 818:	5f 3f       	cpi	r21, 0xFF	; 255
 81a:	29 f0       	breq	.+10     	; 0x826 <__divsf3+0x24>
 81c:	0c 94 df 04 	jmp	0x9be	; 0x9be <__fp_inf>
 820:	51 11       	cpse	r21, r1
 822:	0c 94 2a 05 	jmp	0xa54	; 0xa54 <__fp_szero>
 826:	0c 94 e5 04 	jmp	0x9ca	; 0x9ca <__fp_nan>

0000082a <__divsf3x>:
 82a:	0e 94 07 05 	call	0xa0e	; 0xa0e <__fp_split3>
 82e:	68 f3       	brcs	.-38     	; 0x80a <__divsf3+0x8>

00000830 <__divsf3_pse>:
 830:	99 23       	and	r25, r25
 832:	b1 f3       	breq	.-20     	; 0x820 <__divsf3+0x1e>
 834:	55 23       	and	r21, r21
 836:	91 f3       	breq	.-28     	; 0x81c <__divsf3+0x1a>
 838:	95 1b       	sub	r25, r21
 83a:	55 0b       	sbc	r21, r21
 83c:	bb 27       	eor	r27, r27
 83e:	aa 27       	eor	r26, r26
 840:	62 17       	cp	r22, r18
 842:	73 07       	cpc	r23, r19
 844:	84 07       	cpc	r24, r20
 846:	38 f0       	brcs	.+14     	; 0x856 <__divsf3_pse+0x26>
 848:	9f 5f       	subi	r25, 0xFF	; 255
 84a:	5f 4f       	sbci	r21, 0xFF	; 255
 84c:	22 0f       	add	r18, r18
 84e:	33 1f       	adc	r19, r19
 850:	44 1f       	adc	r20, r20
 852:	aa 1f       	adc	r26, r26
 854:	a9 f3       	breq	.-22     	; 0x840 <__divsf3_pse+0x10>
 856:	35 d0       	rcall	.+106    	; 0x8c2 <__stack+0x63>
 858:	0e 2e       	mov	r0, r30
 85a:	3a f0       	brmi	.+14     	; 0x86a <__stack+0xb>
 85c:	e0 e8       	ldi	r30, 0x80	; 128
 85e:	32 d0       	rcall	.+100    	; 0x8c4 <__stack+0x65>
 860:	91 50       	subi	r25, 0x01	; 1
 862:	50 40       	sbci	r21, 0x00	; 0
 864:	e6 95       	lsr	r30
 866:	00 1c       	adc	r0, r0
 868:	ca f7       	brpl	.-14     	; 0x85c <__divsf3_pse+0x2c>
 86a:	2b d0       	rcall	.+86     	; 0x8c2 <__stack+0x63>
 86c:	fe 2f       	mov	r31, r30
 86e:	29 d0       	rcall	.+82     	; 0x8c2 <__stack+0x63>
 870:	66 0f       	add	r22, r22
 872:	77 1f       	adc	r23, r23
 874:	88 1f       	adc	r24, r24
 876:	bb 1f       	adc	r27, r27
 878:	26 17       	cp	r18, r22
 87a:	37 07       	cpc	r19, r23
 87c:	48 07       	cpc	r20, r24
 87e:	ab 07       	cpc	r26, r27
 880:	b0 e8       	ldi	r27, 0x80	; 128
 882:	09 f0       	breq	.+2      	; 0x886 <__stack+0x27>
 884:	bb 0b       	sbc	r27, r27
 886:	80 2d       	mov	r24, r0
 888:	bf 01       	movw	r22, r30
 88a:	ff 27       	eor	r31, r31
 88c:	93 58       	subi	r25, 0x83	; 131
 88e:	5f 4f       	sbci	r21, 0xFF	; 255
 890:	3a f0       	brmi	.+14     	; 0x8a0 <__stack+0x41>
 892:	9e 3f       	cpi	r25, 0xFE	; 254
 894:	51 05       	cpc	r21, r1
 896:	78 f0       	brcs	.+30     	; 0x8b6 <__stack+0x57>
 898:	0c 94 df 04 	jmp	0x9be	; 0x9be <__fp_inf>
 89c:	0c 94 2a 05 	jmp	0xa54	; 0xa54 <__fp_szero>
 8a0:	5f 3f       	cpi	r21, 0xFF	; 255
 8a2:	e4 f3       	brlt	.-8      	; 0x89c <__stack+0x3d>
 8a4:	98 3e       	cpi	r25, 0xE8	; 232
 8a6:	d4 f3       	brlt	.-12     	; 0x89c <__stack+0x3d>
 8a8:	86 95       	lsr	r24
 8aa:	77 95       	ror	r23
 8ac:	67 95       	ror	r22
 8ae:	b7 95       	ror	r27
 8b0:	f7 95       	ror	r31
 8b2:	9f 5f       	subi	r25, 0xFF	; 255
 8b4:	c9 f7       	brne	.-14     	; 0x8a8 <__stack+0x49>
 8b6:	88 0f       	add	r24, r24
 8b8:	91 1d       	adc	r25, r1
 8ba:	96 95       	lsr	r25
 8bc:	87 95       	ror	r24
 8be:	97 f9       	bld	r25, 7
 8c0:	08 95       	ret
 8c2:	e1 e0       	ldi	r30, 0x01	; 1
 8c4:	66 0f       	add	r22, r22
 8c6:	77 1f       	adc	r23, r23
 8c8:	88 1f       	adc	r24, r24
 8ca:	bb 1f       	adc	r27, r27
 8cc:	62 17       	cp	r22, r18
 8ce:	73 07       	cpc	r23, r19
 8d0:	84 07       	cpc	r24, r20
 8d2:	ba 07       	cpc	r27, r26
 8d4:	20 f0       	brcs	.+8      	; 0x8de <__stack+0x7f>
 8d6:	62 1b       	sub	r22, r18
 8d8:	73 0b       	sbc	r23, r19
 8da:	84 0b       	sbc	r24, r20
 8dc:	ba 0b       	sbc	r27, r26
 8de:	ee 1f       	adc	r30, r30
 8e0:	88 f7       	brcc	.-30     	; 0x8c4 <__stack+0x65>
 8e2:	e0 95       	com	r30
 8e4:	08 95       	ret

000008e6 <__fixunssfsi>:
 8e6:	0e 94 0f 05 	call	0xa1e	; 0xa1e <__fp_splitA>
 8ea:	88 f0       	brcs	.+34     	; 0x90e <__fixunssfsi+0x28>
 8ec:	9f 57       	subi	r25, 0x7F	; 127
 8ee:	98 f0       	brcs	.+38     	; 0x916 <__fixunssfsi+0x30>
 8f0:	b9 2f       	mov	r27, r25
 8f2:	99 27       	eor	r25, r25
 8f4:	b7 51       	subi	r27, 0x17	; 23
 8f6:	b0 f0       	brcs	.+44     	; 0x924 <__fixunssfsi+0x3e>
 8f8:	e1 f0       	breq	.+56     	; 0x932 <__fixunssfsi+0x4c>
 8fa:	66 0f       	add	r22, r22
 8fc:	77 1f       	adc	r23, r23
 8fe:	88 1f       	adc	r24, r24
 900:	99 1f       	adc	r25, r25
 902:	1a f0       	brmi	.+6      	; 0x90a <__fixunssfsi+0x24>
 904:	ba 95       	dec	r27
 906:	c9 f7       	brne	.-14     	; 0x8fa <__fixunssfsi+0x14>
 908:	14 c0       	rjmp	.+40     	; 0x932 <__fixunssfsi+0x4c>
 90a:	b1 30       	cpi	r27, 0x01	; 1
 90c:	91 f0       	breq	.+36     	; 0x932 <__fixunssfsi+0x4c>
 90e:	0e 94 29 05 	call	0xa52	; 0xa52 <__fp_zero>
 912:	b1 e0       	ldi	r27, 0x01	; 1
 914:	08 95       	ret
 916:	0c 94 29 05 	jmp	0xa52	; 0xa52 <__fp_zero>
 91a:	67 2f       	mov	r22, r23
 91c:	78 2f       	mov	r23, r24
 91e:	88 27       	eor	r24, r24
 920:	b8 5f       	subi	r27, 0xF8	; 248
 922:	39 f0       	breq	.+14     	; 0x932 <__fixunssfsi+0x4c>
 924:	b9 3f       	cpi	r27, 0xF9	; 249
 926:	cc f3       	brlt	.-14     	; 0x91a <__fixunssfsi+0x34>
 928:	86 95       	lsr	r24
 92a:	77 95       	ror	r23
 92c:	67 95       	ror	r22
 92e:	b3 95       	inc	r27
 930:	d9 f7       	brne	.-10     	; 0x928 <__fixunssfsi+0x42>
 932:	3e f4       	brtc	.+14     	; 0x942 <__fixunssfsi+0x5c>
 934:	90 95       	com	r25
 936:	80 95       	com	r24
 938:	70 95       	com	r23
 93a:	61 95       	neg	r22
 93c:	7f 4f       	sbci	r23, 0xFF	; 255
 93e:	8f 4f       	sbci	r24, 0xFF	; 255
 940:	9f 4f       	sbci	r25, 0xFF	; 255
 942:	08 95       	ret

00000944 <__floatunsisf>:
 944:	e8 94       	clt
 946:	09 c0       	rjmp	.+18     	; 0x95a <__floatsisf+0x12>

00000948 <__floatsisf>:
 948:	97 fb       	bst	r25, 7
 94a:	3e f4       	brtc	.+14     	; 0x95a <__floatsisf+0x12>
 94c:	90 95       	com	r25
 94e:	80 95       	com	r24
 950:	70 95       	com	r23
 952:	61 95       	neg	r22
 954:	7f 4f       	sbci	r23, 0xFF	; 255
 956:	8f 4f       	sbci	r24, 0xFF	; 255
 958:	9f 4f       	sbci	r25, 0xFF	; 255
 95a:	99 23       	and	r25, r25
 95c:	a9 f0       	breq	.+42     	; 0x988 <__floatsisf+0x40>
 95e:	f9 2f       	mov	r31, r25
 960:	96 e9       	ldi	r25, 0x96	; 150
 962:	bb 27       	eor	r27, r27
 964:	93 95       	inc	r25
 966:	f6 95       	lsr	r31
 968:	87 95       	ror	r24
 96a:	77 95       	ror	r23
 96c:	67 95       	ror	r22
 96e:	b7 95       	ror	r27
 970:	f1 11       	cpse	r31, r1
 972:	f8 cf       	rjmp	.-16     	; 0x964 <__floatsisf+0x1c>
 974:	fa f4       	brpl	.+62     	; 0x9b4 <__floatsisf+0x6c>
 976:	bb 0f       	add	r27, r27
 978:	11 f4       	brne	.+4      	; 0x97e <__floatsisf+0x36>
 97a:	60 ff       	sbrs	r22, 0
 97c:	1b c0       	rjmp	.+54     	; 0x9b4 <__floatsisf+0x6c>
 97e:	6f 5f       	subi	r22, 0xFF	; 255
 980:	7f 4f       	sbci	r23, 0xFF	; 255
 982:	8f 4f       	sbci	r24, 0xFF	; 255
 984:	9f 4f       	sbci	r25, 0xFF	; 255
 986:	16 c0       	rjmp	.+44     	; 0x9b4 <__floatsisf+0x6c>
 988:	88 23       	and	r24, r24
 98a:	11 f0       	breq	.+4      	; 0x990 <__floatsisf+0x48>
 98c:	96 e9       	ldi	r25, 0x96	; 150
 98e:	11 c0       	rjmp	.+34     	; 0x9b2 <__floatsisf+0x6a>
 990:	77 23       	and	r23, r23
 992:	21 f0       	breq	.+8      	; 0x99c <__floatsisf+0x54>
 994:	9e e8       	ldi	r25, 0x8E	; 142
 996:	87 2f       	mov	r24, r23
 998:	76 2f       	mov	r23, r22
 99a:	05 c0       	rjmp	.+10     	; 0x9a6 <__floatsisf+0x5e>
 99c:	66 23       	and	r22, r22
 99e:	71 f0       	breq	.+28     	; 0x9bc <__floatsisf+0x74>
 9a0:	96 e8       	ldi	r25, 0x86	; 134
 9a2:	86 2f       	mov	r24, r22
 9a4:	70 e0       	ldi	r23, 0x00	; 0
 9a6:	60 e0       	ldi	r22, 0x00	; 0
 9a8:	2a f0       	brmi	.+10     	; 0x9b4 <__floatsisf+0x6c>
 9aa:	9a 95       	dec	r25
 9ac:	66 0f       	add	r22, r22
 9ae:	77 1f       	adc	r23, r23
 9b0:	88 1f       	adc	r24, r24
 9b2:	da f7       	brpl	.-10     	; 0x9aa <__floatsisf+0x62>
 9b4:	88 0f       	add	r24, r24
 9b6:	96 95       	lsr	r25
 9b8:	87 95       	ror	r24
 9ba:	97 f9       	bld	r25, 7
 9bc:	08 95       	ret

000009be <__fp_inf>:
 9be:	97 f9       	bld	r25, 7
 9c0:	9f 67       	ori	r25, 0x7F	; 127
 9c2:	80 e8       	ldi	r24, 0x80	; 128
 9c4:	70 e0       	ldi	r23, 0x00	; 0
 9c6:	60 e0       	ldi	r22, 0x00	; 0
 9c8:	08 95       	ret

000009ca <__fp_nan>:
 9ca:	9f ef       	ldi	r25, 0xFF	; 255
 9cc:	80 ec       	ldi	r24, 0xC0	; 192
 9ce:	08 95       	ret

000009d0 <__fp_pscA>:
 9d0:	00 24       	eor	r0, r0
 9d2:	0a 94       	dec	r0
 9d4:	16 16       	cp	r1, r22
 9d6:	17 06       	cpc	r1, r23
 9d8:	18 06       	cpc	r1, r24
 9da:	09 06       	cpc	r0, r25
 9dc:	08 95       	ret

000009de <__fp_pscB>:
 9de:	00 24       	eor	r0, r0
 9e0:	0a 94       	dec	r0
 9e2:	12 16       	cp	r1, r18
 9e4:	13 06       	cpc	r1, r19
 9e6:	14 06       	cpc	r1, r20
 9e8:	05 06       	cpc	r0, r21
 9ea:	08 95       	ret

000009ec <__fp_round>:
 9ec:	09 2e       	mov	r0, r25
 9ee:	03 94       	inc	r0
 9f0:	00 0c       	add	r0, r0
 9f2:	11 f4       	brne	.+4      	; 0x9f8 <__fp_round+0xc>
 9f4:	88 23       	and	r24, r24
 9f6:	52 f0       	brmi	.+20     	; 0xa0c <__fp_round+0x20>
 9f8:	bb 0f       	add	r27, r27
 9fa:	40 f4       	brcc	.+16     	; 0xa0c <__fp_round+0x20>
 9fc:	bf 2b       	or	r27, r31
 9fe:	11 f4       	brne	.+4      	; 0xa04 <__fp_round+0x18>
 a00:	60 ff       	sbrs	r22, 0
 a02:	04 c0       	rjmp	.+8      	; 0xa0c <__fp_round+0x20>
 a04:	6f 5f       	subi	r22, 0xFF	; 255
 a06:	7f 4f       	sbci	r23, 0xFF	; 255
 a08:	8f 4f       	sbci	r24, 0xFF	; 255
 a0a:	9f 4f       	sbci	r25, 0xFF	; 255
 a0c:	08 95       	ret

00000a0e <__fp_split3>:
 a0e:	57 fd       	sbrc	r21, 7
 a10:	90 58       	subi	r25, 0x80	; 128
 a12:	44 0f       	add	r20, r20
 a14:	55 1f       	adc	r21, r21
 a16:	59 f0       	breq	.+22     	; 0xa2e <__fp_splitA+0x10>
 a18:	5f 3f       	cpi	r21, 0xFF	; 255
 a1a:	71 f0       	breq	.+28     	; 0xa38 <__fp_splitA+0x1a>
 a1c:	47 95       	ror	r20

00000a1e <__fp_splitA>:
 a1e:	88 0f       	add	r24, r24
 a20:	97 fb       	bst	r25, 7
 a22:	99 1f       	adc	r25, r25
 a24:	61 f0       	breq	.+24     	; 0xa3e <__fp_splitA+0x20>
 a26:	9f 3f       	cpi	r25, 0xFF	; 255
 a28:	79 f0       	breq	.+30     	; 0xa48 <__fp_splitA+0x2a>
 a2a:	87 95       	ror	r24
 a2c:	08 95       	ret
 a2e:	12 16       	cp	r1, r18
 a30:	13 06       	cpc	r1, r19
 a32:	14 06       	cpc	r1, r20
 a34:	55 1f       	adc	r21, r21
 a36:	f2 cf       	rjmp	.-28     	; 0xa1c <__fp_split3+0xe>
 a38:	46 95       	lsr	r20
 a3a:	f1 df       	rcall	.-30     	; 0xa1e <__fp_splitA>
 a3c:	08 c0       	rjmp	.+16     	; 0xa4e <__fp_splitA+0x30>
 a3e:	16 16       	cp	r1, r22
 a40:	17 06       	cpc	r1, r23
 a42:	18 06       	cpc	r1, r24
 a44:	99 1f       	adc	r25, r25
 a46:	f1 cf       	rjmp	.-30     	; 0xa2a <__fp_splitA+0xc>
 a48:	86 95       	lsr	r24
 a4a:	71 05       	cpc	r23, r1
 a4c:	61 05       	cpc	r22, r1
 a4e:	08 94       	sec
 a50:	08 95       	ret

00000a52 <__fp_zero>:
 a52:	e8 94       	clt

00000a54 <__fp_szero>:
 a54:	bb 27       	eor	r27, r27
 a56:	66 27       	eor	r22, r22
 a58:	77 27       	eor	r23, r23
 a5a:	cb 01       	movw	r24, r22
 a5c:	97 f9       	bld	r25, 7
 a5e:	08 95       	ret

00000a60 <strcmp>:
 a60:	fb 01       	movw	r30, r22
 a62:	dc 01       	movw	r26, r24
 a64:	8d 91       	ld	r24, X+
 a66:	01 90       	ld	r0, Z+
 a68:	80 19       	sub	r24, r0
 a6a:	01 10       	cpse	r0, r1
 a6c:	d9 f3       	breq	.-10     	; 0xa64 <strcmp+0x4>
 a6e:	99 0b       	sbc	r25, r25
 a70:	08 95       	ret

00000a72 <_exit>:
 a72:	f8 94       	cli

00000a74 <__stop_program>:
 a74:	ff cf       	rjmp	.-2      	; 0xa74 <__stop_program>
