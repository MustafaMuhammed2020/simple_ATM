
ATM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000cb0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001c4  00800060  00000cb0  00000d44  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800224  00800224  00000f08  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f08  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000f38  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000250  00000000  00000000  00000f74  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000020fb  00000000  00000000  000011c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d36  00000000  00000000  000032bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000014f0  00000000  00000000  00003ff5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000468  00000000  00000000  000054e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b1f  00000000  00000000  00005950  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f22  00000000  00000000  0000646f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c0  00000000  00000000  00007391  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	12 e0       	ldi	r17, 0x02	; 2
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 eb       	ldi	r30, 0xB0	; 176
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 32       	cpi	r26, 0x24	; 36
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	22 e0       	ldi	r18, 0x02	; 2
  78:	a4 e2       	ldi	r26, 0x24	; 36
  7a:	b2 e0       	ldi	r27, 0x02	; 2
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 32       	cpi	r26, 0x2A	; 42
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 41 02 	call	0x482	; 0x482 <main>
  8a:	0c 94 56 06 	jmp	0xcac	; 0xcac <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <APP_init>:
uint8_t readpan[20] = "0000000000000000000";

/** FUNCTION FOR INITIALIZATION **/
void APP_init()
{
    TMR0_init(); /** TIMER 0 INITIALIZATION **/
  92:	0e 94 50 04 	call	0x8a0	; 0x8a0 <TMR0_init>
	
	UART_init();  /** INITIALIZATION UART MODULE **/
  96:	0e 94 b3 04 	call	0x966	; 0x966 <UART_init>
	
	SPI_initmaster(); /** INITIALIZE SPI MASTER **/
  9a:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <SPI_initmaster>
	
	EEPROM_init(); /** INITIALIZE EEPROM MODULE **/
  9e:	0e 94 a7 01 	call	0x34e	; 0x34e <EEPROM_init>
	
	Button_init(BUTTON1_PORT , BUTTON1_PIN); /** COMMUNICATION TRIGGER **/
  a2:	60 e0       	ldi	r22, 0x00	; 0
  a4:	81 e0       	ldi	r24, 0x01	; 1
  a6:	0e 94 84 01 	call	0x308	; 0x308 <Button_init>
	
	DIO_setpindir(DIO_PORTA , DIO_PIN0 , DIO_PIN_OUTPUT); /** OUTPUT PIN TO TRIGGER ATM ECU **/
  aa:	41 e0       	ldi	r20, 0x01	; 1
  ac:	60 e0       	ldi	r22, 0x00	; 0
  ae:	80 e0       	ldi	r24, 0x00	; 0
  b0:	0e 94 9e 02 	call	0x53c	; 0x53c <DIO_setpindir>
	DIO_setpinvalue(DIO_PORTA , DIO_PIN0 , DIO_PIN_LOW);  /** PIN IS LOW (TRIGGER OFF)      **/
  b4:	40 e0       	ldi	r20, 0x00	; 0
  b6:	60 e0       	ldi	r22, 0x00	; 0
  b8:	80 e0       	ldi	r24, 0x00	; 0
  ba:	0e 94 1d 03 	call	0x63a	; 0x63a <DIO_setpinvalue>
  be:	08 95       	ret

000000c0 <APP_entrypoint>:
}

/** FUNCTION TO SET THE ENTRY POINT USER / PROGRAMMING OR REPROGRAMMING MODE **/
uint8_t APP_entrypoint()
{
  c0:	cf 93       	push	r28
  c2:	df 93       	push	r29
  c4:	00 d0       	rcall	.+0      	; 0xc6 <APP_entrypoint+0x6>
  c6:	cd b7       	in	r28, 0x3d	; 61
  c8:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_l_eepromcheck = 0 , u8_l_returnmode = 0 , u8_receiveddata = 0;
  ca:	19 82       	std	Y+1, r1	; 0x01
  cc:	1a 82       	std	Y+2, r1	; 0x02
	
	EEPROM_readbyte(TEST_ADDRESS , &u8_l_eepromcheck , PAGE_0); /** READ THE FIRST BYTE WHICH WE WRITE TO  **/
  ce:	40 e0       	ldi	r20, 0x00	; 0
  d0:	be 01       	movw	r22, r28
  d2:	6f 5f       	subi	r22, 0xFF	; 255
  d4:	7f 4f       	sbci	r23, 0xFF	; 255
  d6:	80 e0       	ldi	r24, 0x00	; 0
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <EEPROM_readbyte>
	
	if (u8_l_eepromcheck == 0xFF) /** IF THE ADDRESS IS EMPTY **/
  de:	89 81       	ldd	r24, Y+1	; 0x01
  e0:	8f 3f       	cpi	r24, 0xFF	; 255
  e2:	31 f4       	brne	.+12     	; 0xf0 <APP_entrypoint+0x30>
	{
		UART_sendstr("\r\n First insertion for this card wait to program it\r\n");
  e4:	87 e9       	ldi	r24, 0x97	; 151
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <UART_sendstr>
		
		u8_l_returnmode = PROGRAM_MODE ; /** RETURN THE PROGRAMMING MODE **/
  ec:	80 e0       	ldi	r24, 0x00	; 0
  ee:	1c c0       	rjmp	.+56     	; 0x128 <APP_entrypoint+0x68>
	}
	
	else if(u8_l_eepromcheck == TEST_DATA) /** CARD PROGRAMMED PREVIOUSLY **/
  f0:	82 31       	cpi	r24, 0x12	; 18
  f2:	a9 f4       	brne	.+42     	; 0x11e <APP_entrypoint+0x5e>
	{
		UART_sendstr("\r\nTo reprogram your card press 2 , for user mode press 1 \r\n");
  f4:	8d ec       	ldi	r24, 0xCD	; 205
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <UART_sendstr>
		
		UART_receivechar(&u8_receiveddata);
  fc:	ce 01       	movw	r24, r28
  fe:	02 96       	adiw	r24, 0x02	; 2
 100:	0e 94 04 05 	call	0xa08	; 0xa08 <UART_receivechar>
		
		if (u8_receiveddata == '2')
 104:	8a 81       	ldd	r24, Y+2	; 0x02
 106:	82 33       	cpi	r24, 0x32	; 50
 108:	61 f0       	breq	.+24     	; 0x122 <APP_entrypoint+0x62>
		{
			u8_l_returnmode = REPROGRAM_MODE ; /** RETURN THE REPROGRAMMING MODE **/ 
		}
		
		else if (u8_receiveddata == '1')
 10a:	81 33       	cpi	r24, 0x31	; 49
 10c:	61 f0       	breq	.+24     	; 0x126 <APP_entrypoint+0x66>
			u8_l_returnmode = USER_MODE ; /** RETURN THE USER MODE **/
		}
		
		else 
		{
			UART_sendstr("\r\nNot valid choice\r\n");
 10e:	89 e0       	ldi	r24, 0x09	; 9
 110:	91 e0       	ldi	r25, 0x01	; 1
 112:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <UART_sendstr>
			exit(0);
 116:	80 e0       	ldi	r24, 0x00	; 0
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	0e 94 56 06 	call	0xcac	; 0xcac <_exit>
}

/** FUNCTION TO SET THE ENTRY POINT USER / PROGRAMMING OR REPROGRAMMING MODE **/
uint8_t APP_entrypoint()
{
	uint8_t u8_l_eepromcheck = 0 , u8_l_returnmode = 0 , u8_receiveddata = 0;
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	03 c0       	rjmp	.+6      	; 0x128 <APP_entrypoint+0x68>
		
		UART_receivechar(&u8_receiveddata);
		
		if (u8_receiveddata == '2')
		{
			u8_l_returnmode = REPROGRAM_MODE ; /** RETURN THE REPROGRAMMING MODE **/ 
 122:	82 e0       	ldi	r24, 0x02	; 2
 124:	01 c0       	rjmp	.+2      	; 0x128 <APP_entrypoint+0x68>
		}
		
		else if (u8_receiveddata == '1')
		{
			u8_l_returnmode = USER_MODE ; /** RETURN THE USER MODE **/
 126:	81 e0       	ldi	r24, 0x01	; 1
			exit(0);
		}
	}
	
	return u8_l_returnmode ; /** RETURN THE FINAL MODE **/
}
 128:	0f 90       	pop	r0
 12a:	0f 90       	pop	r0
 12c:	df 91       	pop	r29
 12e:	cf 91       	pop	r28
 130:	08 95       	ret

00000132 <APP_cardprogram>:


/** FUNCTION TO PROGRAM THE CARD DATA **/
uint8_t APP_cardprogram()
{
 132:	cf 93       	push	r28
 134:	df 93       	push	r29
	
	/************************************************************************/
	/**                     PROGRAMMING THE CARD                           **/
	/************************************************************************/
	
	UART_sendstr("\r\n          you are in the programming mode\r\n"); /** MESSAGE **/
 136:	8e e1       	ldi	r24, 0x1E	; 30
 138:	91 e0       	ldi	r25, 0x01	; 1
 13a:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <UART_sendstr>
	
	UART_sendstr("Please enter card PAN\r\n"); /** ASK USER TO INTER CARD PAN **/
 13e:	8c e4       	ldi	r24, 0x4C	; 76
 140:	91 e0       	ldi	r25, 0x01	; 1
 142:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <UART_sendstr>
	UART_receivestr(&u8_g_cardpan); /** RECEIVE PAN FROM USER **/
 146:	8e e7       	ldi	r24, 0x7E	; 126
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 0a 05 	call	0xa14	; 0xa14 <UART_receivestr>
uint8_t APP_cardprogram()
{
	uint8_t u8_a_cardstatus = CARD_NOT_OK ;
	
	/** PIN NUMBER ITERATOR , CHARACTER FOUND STATUS , COUNTER FOR PIN ATTEMPTS **/
	uint8_t u8_a_num = 0 , u8_character = 0 , u8_a_try = 0; 
 14e:	d0 e0       	ldi	r29, 0x00	; 0
	UART_sendstr("\r\n          you are in the programming mode\r\n"); /** MESSAGE **/
	
	UART_sendstr("Please enter card PAN\r\n"); /** ASK USER TO INTER CARD PAN **/
	UART_receivestr(&u8_g_cardpan); /** RECEIVE PAN FROM USER **/
	
	while (u8_a_try <= 2) /** JUST TWO ATTEMPTS TO SET CARD PIN **/
 150:	3d c0       	rjmp	.+122    	; 0x1cc <APP_cardprogram+0x9a>
	{
		UART_sendstr("\r\nPlease enter new 4-numbers PIN\r\n");/** ASK USER TO INTER CARD PIN **/
 152:	84 e6       	ldi	r24, 0x64	; 100
 154:	91 e0       	ldi	r25, 0x01	; 1
 156:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <UART_sendstr>
		UART_receivestr(&u8_g_cardpin);  /** RECEIVE PIN FROM USER **/
 15a:	82 e9       	ldi	r24, 0x92	; 146
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	0e 94 0a 05 	call	0xa14	; 0xa14 <UART_receivestr>
		
		UART_sendstr("\r\nPlease confirm your PIN\r\n");/** ASK USER TO INTER CARD PIN **/
 162:	87 e8       	ldi	r24, 0x87	; 135
 164:	91 e0       	ldi	r25, 0x01	; 1
 166:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <UART_sendstr>
		UART_receivestr(&u8_g_cardpinconfirm); /** RECEIVE PIN CONFIRMATION **/
 16a:	89 e7       	ldi	r24, 0x79	; 121
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	0e 94 0a 05 	call	0xa14	; 0xa14 <UART_receivestr>
		
		/** CHECK IF CHARACTER ENTERED **/
		while(u8_a_num < 4)
 172:	c0 e0       	ldi	r28, 0x00	; 0
 174:	80 e0       	ldi	r24, 0x00	; 0
 176:	0a c0       	rjmp	.+20     	; 0x18c <APP_cardprogram+0x5a>
		{
			/** VALIDATE THE USER INPUT AS NUMBERS ONLY **/
			if (!((u8_g_cardpin[u8_a_num] >= 48) && (u8_g_cardpin[u8_a_num] <= 57)))
 178:	e8 2f       	mov	r30, r24
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	ee 56       	subi	r30, 0x6E	; 110
 17e:	ff 4f       	sbci	r31, 0xFF	; 255
 180:	90 81       	ld	r25, Z
 182:	90 53       	subi	r25, 0x30	; 48
 184:	9a 30       	cpi	r25, 0x0A	; 10
 186:	08 f0       	brcs	.+2      	; 0x18a <APP_cardprogram+0x58>
			{
				u8_character = 1 ; /** CHARACTER FOUND **/
 188:	c1 e0       	ldi	r28, 0x01	; 1
			}
			u8_a_num++ ; /** JUMP TO THE NEXT NUMBER **/
 18a:	8f 5f       	subi	r24, 0xFF	; 255
		
		UART_sendstr("\r\nPlease confirm your PIN\r\n");/** ASK USER TO INTER CARD PIN **/
		UART_receivestr(&u8_g_cardpinconfirm); /** RECEIVE PIN CONFIRMATION **/
		
		/** CHECK IF CHARACTER ENTERED **/
		while(u8_a_num < 4)
 18c:	84 30       	cpi	r24, 0x04	; 4
 18e:	a0 f3       	brcs	.-24     	; 0x178 <APP_cardprogram+0x46>
				u8_character = 1 ; /** CHARACTER FOUND **/
			}
			u8_a_num++ ; /** JUMP TO THE NEXT NUMBER **/
		}
		
		u8_a_notmatched = strcmp(u8_g_cardpin , u8_g_cardpinconfirm); /** CHECK IF PIN MATCHED OR NOT **/
 190:	69 e7       	ldi	r22, 0x79	; 121
 192:	70 e0       	ldi	r23, 0x00	; 0
 194:	82 e9       	ldi	r24, 0x92	; 146
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	0e 94 4d 06 	call	0xc9a	; 0xc9a <strcmp>
 19c:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <__data_end>
		
		if (u8_a_notmatched == 0 && u8_character == 0) /** IF PIN MATCHED AND NO CHARACTERS **/
 1a0:	81 11       	cpse	r24, r1
 1a2:	08 c0       	rjmp	.+16     	; 0x1b4 <APP_cardprogram+0x82>
 1a4:	c1 11       	cpse	r28, r1
 1a6:	06 c0       	rjmp	.+12     	; 0x1b4 <APP_cardprogram+0x82>
		{
			UART_sendstr("\r\nData received successfully\r\n");
 1a8:	83 ea       	ldi	r24, 0xA3	; 163
 1aa:	91 e0       	ldi	r25, 0x01	; 1
 1ac:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <UART_sendstr>
			u8_a_cardstatus = CARD_OK ;
 1b0:	81 e0       	ldi	r24, 0x01	; 1
			break ;
 1b2:	0f c0       	rjmp	.+30     	; 0x1d2 <APP_cardprogram+0xa0>
		}
		
		else /** TRY FAILED **/
		{
			if (u8_character == 1) /** USER ENTERED CHARACTER **/
 1b4:	c1 30       	cpi	r28, 0x01	; 1
 1b6:	29 f4       	brne	.+10     	; 0x1c2 <APP_cardprogram+0x90>
			{
				UART_sendstr("\r\n Letters not allowed , numbers only\r\n");
 1b8:	82 ec       	ldi	r24, 0xC2	; 194
 1ba:	91 e0       	ldi	r25, 0x01	; 1
 1bc:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <UART_sendstr>
 1c0:	04 c0       	rjmp	.+8      	; 0x1ca <APP_cardprogram+0x98>
			}
			else /** PIN NOT MATCHED **/
			{
				UART_sendstr("\r\nPIN didn't match !\r\n");/** ASK USER TO INTER CARD PIN **/
 1c2:	8a ee       	ldi	r24, 0xEA	; 234
 1c4:	91 e0       	ldi	r25, 0x01	; 1
 1c6:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <UART_sendstr>
			}
		}
		
    	u8_a_try++ ; /** NEXT TRY **/
 1ca:	df 5f       	subi	r29, 0xFF	; 255
	UART_sendstr("\r\n          you are in the programming mode\r\n"); /** MESSAGE **/
	
	UART_sendstr("Please enter card PAN\r\n"); /** ASK USER TO INTER CARD PAN **/
	UART_receivestr(&u8_g_cardpan); /** RECEIVE PAN FROM USER **/
	
	while (u8_a_try <= 2) /** JUST TWO ATTEMPTS TO SET CARD PIN **/
 1cc:	d3 30       	cpi	r29, 0x03	; 3
 1ce:	08 f2       	brcs	.-126    	; 0x152 <APP_cardprogram+0x20>


/** FUNCTION TO PROGRAM THE CARD DATA **/
uint8_t APP_cardprogram()
{
	uint8_t u8_a_cardstatus = CARD_NOT_OK ;
 1d0:	80 e0       	ldi	r24, 0x00	; 0
		u8_character = 0 ;
		
	}
	
	return u8_a_cardstatus ; /** RETURN THE CARD STATUS **/
}
 1d2:	df 91       	pop	r29
 1d4:	cf 91       	pop	r28
 1d6:	08 95       	ret

000001d8 <APP_cardfailed>:

/** FUNCTION FOR CARD PROGRAMMING FAILURE **/
void APP_cardfailed()
{
	/** DISPLAY MESSAGE WHEN CARD PROGRAMMING FAILS **/
	UART_sendstr("\r\n Sorry card programming failed\r\n");
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	92 e0       	ldi	r25, 0x02	; 2
 1dc:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <UART_sendstr>
 1e0:	08 95       	ret

000001e2 <APP_storecard>:
}

/** FUNCTION TO STORE CARD DATA IN THE EEPROM **/
void APP_storecard()
{
 1e2:	cf 93       	push	r28
 1e4:	df 93       	push	r29
	/** STORE THE TEST DATA IN THE EEPROM **/
	EEPROM_writebyte(TEST_ADDRESS , TEST_DATA , PAGE_0 );
 1e6:	40 e0       	ldi	r20, 0x00	; 0
 1e8:	62 e1       	ldi	r22, 0x12	; 18
 1ea:	80 e0       	ldi	r24, 0x00	; 0
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	0e 94 aa 01 	call	0x354	; 0x354 <EEPROM_writebyte>
	TMR0_delayms(40);
 1f2:	68 e2       	ldi	r22, 0x28	; 40
 1f4:	70 e0       	ldi	r23, 0x00	; 0
 1f6:	80 e0       	ldi	r24, 0x00	; 0
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	0e 94 77 04 	call	0x8ee	; 0x8ee <TMR0_delayms>
	
	/** STORE PIN NUMBER **/
	for (uint16_t pin_counter = 0x0000 ; pin_counter < 0x0004 ; pin_counter++)
 1fe:	c0 e0       	ldi	r28, 0x00	; 0
 200:	d0 e0       	ldi	r29, 0x00	; 0
 202:	11 c0       	rjmp	.+34     	; 0x226 <APP_storecard+0x44>
	{
		EEPROM_writebyte(CARD_PINADDRESS_0+pin_counter , u8_g_cardpin[pin_counter] , PAGE_0 );
 204:	fe 01       	movw	r30, r28
 206:	ee 56       	subi	r30, 0x6E	; 110
 208:	ff 4f       	sbci	r31, 0xFF	; 255
 20a:	40 e0       	ldi	r20, 0x00	; 0
 20c:	60 81       	ld	r22, Z
 20e:	ce 01       	movw	r24, r28
 210:	80 51       	subi	r24, 0x10	; 16
 212:	9f 4f       	sbci	r25, 0xFF	; 255
 214:	0e 94 aa 01 	call	0x354	; 0x354 <EEPROM_writebyte>
		TMR0_delayms(20);
 218:	64 e1       	ldi	r22, 0x14	; 20
 21a:	70 e0       	ldi	r23, 0x00	; 0
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	0e 94 77 04 	call	0x8ee	; 0x8ee <TMR0_delayms>
	/** STORE THE TEST DATA IN THE EEPROM **/
	EEPROM_writebyte(TEST_ADDRESS , TEST_DATA , PAGE_0 );
	TMR0_delayms(40);
	
	/** STORE PIN NUMBER **/
	for (uint16_t pin_counter = 0x0000 ; pin_counter < 0x0004 ; pin_counter++)
 224:	21 96       	adiw	r28, 0x01	; 1
 226:	c4 30       	cpi	r28, 0x04	; 4
 228:	d1 05       	cpc	r29, r1
 22a:	60 f3       	brcs	.-40     	; 0x204 <APP_storecard+0x22>
 22c:	c0 e0       	ldi	r28, 0x00	; 0
 22e:	d0 e0       	ldi	r29, 0x00	; 0
 230:	11 c0       	rjmp	.+34     	; 0x254 <APP_storecard+0x72>
	}

	/** STORE PAN NUMBER **/
	for (uint16_t pan_counter = 0x0000 ; pan_counter < 0x0014 ; pan_counter++)
	{
		EEPROM_writebyte(CARD_PANADDRESS_0+pan_counter , u8_g_cardpan[pan_counter] , PAGE_0 );
 232:	fe 01       	movw	r30, r28
 234:	e2 58       	subi	r30, 0x82	; 130
 236:	ff 4f       	sbci	r31, 0xFF	; 255
 238:	40 e0       	ldi	r20, 0x00	; 0
 23a:	60 81       	ld	r22, Z
 23c:	ce 01       	movw	r24, r28
 23e:	80 54       	subi	r24, 0x40	; 64
 240:	9f 4f       	sbci	r25, 0xFF	; 255
 242:	0e 94 aa 01 	call	0x354	; 0x354 <EEPROM_writebyte>
		TMR0_delayms(20);
 246:	64 e1       	ldi	r22, 0x14	; 20
 248:	70 e0       	ldi	r23, 0x00	; 0
 24a:	80 e0       	ldi	r24, 0x00	; 0
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	0e 94 77 04 	call	0x8ee	; 0x8ee <TMR0_delayms>
		EEPROM_writebyte(CARD_PINADDRESS_0+pin_counter , u8_g_cardpin[pin_counter] , PAGE_0 );
		TMR0_delayms(20);
	}

	/** STORE PAN NUMBER **/
	for (uint16_t pan_counter = 0x0000 ; pan_counter < 0x0014 ; pan_counter++)
 252:	21 96       	adiw	r28, 0x01	; 1
 254:	c4 31       	cpi	r28, 0x14	; 20
 256:	d1 05       	cpc	r29, r1
 258:	60 f3       	brcs	.-40     	; 0x232 <APP_storecard+0x50>
	{
		EEPROM_writebyte(CARD_PANADDRESS_0+pan_counter , u8_g_cardpan[pan_counter] , PAGE_0 );
		TMR0_delayms(20);
	}

}
 25a:	df 91       	pop	r29
 25c:	cf 91       	pop	r28
 25e:	08 95       	ret

00000260 <APP_getcarddata>:

/** FUNCTION TO READ CARD DATA FROM EEPROM **/
void APP_getcarddata(void)
{
 260:	cf 93       	push	r28
 262:	df 93       	push	r29
	/** GET PIN FROM THE EEPROM **/
	for (uint16_t counter = 0x0000 ; counter < 0x0004 ; counter++)
 264:	c0 e0       	ldi	r28, 0x00	; 0
 266:	d0 e0       	ldi	r29, 0x00	; 0
 268:	10 c0       	rjmp	.+32     	; 0x28a <APP_getcarddata+0x2a>
	{
		EEPROM_readbyte(CARD_PINADDRESS_0+counter , &readpin[counter] , PAGE_0 );
 26a:	be 01       	movw	r22, r28
 26c:	6c 58       	subi	r22, 0x8C	; 140
 26e:	7f 4f       	sbci	r23, 0xFF	; 255
 270:	40 e0       	ldi	r20, 0x00	; 0
 272:	ce 01       	movw	r24, r28
 274:	80 51       	subi	r24, 0x10	; 16
 276:	9f 4f       	sbci	r25, 0xFF	; 255
 278:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <EEPROM_readbyte>
		TMR0_delayms(40);
 27c:	68 e2       	ldi	r22, 0x28	; 40
 27e:	70 e0       	ldi	r23, 0x00	; 0
 280:	80 e0       	ldi	r24, 0x00	; 0
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	0e 94 77 04 	call	0x8ee	; 0x8ee <TMR0_delayms>

/** FUNCTION TO READ CARD DATA FROM EEPROM **/
void APP_getcarddata(void)
{
	/** GET PIN FROM THE EEPROM **/
	for (uint16_t counter = 0x0000 ; counter < 0x0004 ; counter++)
 288:	21 96       	adiw	r28, 0x01	; 1
 28a:	c4 30       	cpi	r28, 0x04	; 4
 28c:	d1 05       	cpc	r29, r1
 28e:	68 f3       	brcs	.-38     	; 0x26a <APP_getcarddata+0xa>
 290:	c0 e0       	ldi	r28, 0x00	; 0
 292:	d0 e0       	ldi	r29, 0x00	; 0
 294:	10 c0       	rjmp	.+32     	; 0x2b6 <APP_getcarddata+0x56>
	}
	
	/** GET PAN FROM THE EEPROM **/ 
	for (uint16_t pan_counter = 0x0000 ; pan_counter < 0x0014 ; pan_counter++)
	{
		EEPROM_readbyte(CARD_PANADDRESS_0+pan_counter , &readpan[pan_counter] , PAGE_0 );
 296:	be 01       	movw	r22, r28
 298:	60 5a       	subi	r22, 0xA0	; 160
 29a:	7f 4f       	sbci	r23, 0xFF	; 255
 29c:	40 e0       	ldi	r20, 0x00	; 0
 29e:	ce 01       	movw	r24, r28
 2a0:	80 54       	subi	r24, 0x40	; 64
 2a2:	9f 4f       	sbci	r25, 0xFF	; 255
 2a4:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <EEPROM_readbyte>
		TMR0_delayms(40);
 2a8:	68 e2       	ldi	r22, 0x28	; 40
 2aa:	70 e0       	ldi	r23, 0x00	; 0
 2ac:	80 e0       	ldi	r24, 0x00	; 0
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	0e 94 77 04 	call	0x8ee	; 0x8ee <TMR0_delayms>
		EEPROM_readbyte(CARD_PINADDRESS_0+counter , &readpin[counter] , PAGE_0 );
		TMR0_delayms(40);
	}
	
	/** GET PAN FROM THE EEPROM **/ 
	for (uint16_t pan_counter = 0x0000 ; pan_counter < 0x0014 ; pan_counter++)
 2b4:	21 96       	adiw	r28, 0x01	; 1
 2b6:	c4 31       	cpi	r28, 0x14	; 20
 2b8:	d1 05       	cpc	r29, r1
 2ba:	68 f3       	brcs	.-38     	; 0x296 <APP_getcarddata+0x36>
	{
		EEPROM_readbyte(CARD_PANADDRESS_0+pan_counter , &readpan[pan_counter] , PAGE_0 );
		TMR0_delayms(40);
	}	
}
 2bc:	df 91       	pop	r29
 2be:	cf 91       	pop	r28
 2c0:	08 95       	ret

000002c2 <APP_sendtrigger>:

APP_sendtrigger()
{
	/** ACTIVATE THE TRIGGER PIN **/
	DIO_setpinvalue(DIO_PORTA , DIO_PIN0 , DIO_PIN_HIGH);
 2c2:	41 e0       	ldi	r20, 0x01	; 1
 2c4:	60 e0       	ldi	r22, 0x00	; 0
 2c6:	80 e0       	ldi	r24, 0x00	; 0
 2c8:	0e 94 1d 03 	call	0x63a	; 0x63a <DIO_setpinvalue>
}
 2cc:	08 95       	ret

000002ce <APP_sendcarddata>:

/** FUNCTION TO SEND CARD DATA TO ATM ECU **/
void APP_sendcarddata() 
{
	TMR0_delayms(30);
 2ce:	6e e1       	ldi	r22, 0x1E	; 30
 2d0:	70 e0       	ldi	r23, 0x00	; 0
 2d2:	80 e0       	ldi	r24, 0x00	; 0
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	0e 94 77 04 	call	0x8ee	; 0x8ee <TMR0_delayms>
	
 	SPI_masterinittransmit(); /** START SPI TRANSMISSION **/
 2da:	0e 94 2d 04 	call	0x85a	; 0x85a <SPI_masterinittransmit>
 	
 	SPI_sendstring(readpin); /** SEND STORED PIN TO ATM **/
 2de:	84 e7       	ldi	r24, 0x74	; 116
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	0e 94 3d 04 	call	0x87a	; 0x87a <SPI_sendstring>
	
	SPI_masterendtransmit(); /** END TRANSMISSION **/
 2e6:	0e 94 33 04 	call	0x866	; 0x866 <SPI_masterendtransmit>
	
	TMR0_delayms(30); /** DELAY FOR 30 MS **/
 2ea:	6e e1       	ldi	r22, 0x1E	; 30
 2ec:	70 e0       	ldi	r23, 0x00	; 0
 2ee:	80 e0       	ldi	r24, 0x00	; 0
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	0e 94 77 04 	call	0x8ee	; 0x8ee <TMR0_delayms>
	
	SPI_masterinittransmit(); /** START SPI TRANSMISSION **/
 2f6:	0e 94 2d 04 	call	0x85a	; 0x85a <SPI_masterinittransmit>
	
	SPI_sendstring(readpan); /** SEND STORED PIN TO ATM **/
 2fa:	80 e6       	ldi	r24, 0x60	; 96
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	0e 94 3d 04 	call	0x87a	; 0x87a <SPI_sendstring>
	
	SPI_masterendtransmit();/** END TRANSMISSION **/
 302:	0e 94 33 04 	call	0x866	; 0x866 <SPI_masterendtransmit>
 306:	08 95       	ret

00000308 <Button_init>:
/* RETURN    : void                                              */
/*****************************************************************/
void Button_init(uint8_t Button_port , uint8_t Button_pin)
{
	/** SET THE DIRECTION OF BUTTON AS INPUT **/
	DIO_setpindir(Button_port , Button_pin , DIO_PIN_INPUT);
 308:	40 e0       	ldi	r20, 0x00	; 0
 30a:	0e 94 9e 02 	call	0x53c	; 0x53c <DIO_setpindir>
 30e:	08 95       	ret

00000310 <Is_pressed>:
/* FUNCTION TO CHECK THE BUTTON STATUS PRESSED OR NOT            */
/* ARGUMENTS : TAKES THE BUTTON PIN                              */
/* RETURN    : RETURNS BUTTON_t type                             */
/*****************************************************************/
button_t Is_pressed(uint8_t Button_port , uint8_t Button_pin , uint8_t * value)
{
 310:	0f 93       	push	r16
 312:	1f 93       	push	r17
 314:	cf 93       	push	r28
 316:	df 93       	push	r29
 318:	1f 92       	push	r1
 31a:	cd b7       	in	r28, 0x3d	; 61
 31c:	de b7       	in	r29, 0x3e	; 62
 31e:	8a 01       	movw	r16, r20
	button_t button_state = Button_Notpressed ; /* VARIABLE TO HOLD THE RETURN TYPE OF THE FUNCTION */
	
	PinRead_t pin_status = NOT_VALID_READ ;  /** VARIABLE TO HOLD THE STATE OF PIN READ **/
	
	uint8_t pvalue = 0 ;
 320:	19 82       	std	Y+1, r1	; 0x01
	
	pin_status = DIO_readpin(Button_port , Button_pin , &pvalue); /** READ THE BUTTON PIN VALUE */
 322:	ae 01       	movw	r20, r28
 324:	4f 5f       	subi	r20, 0xFF	; 255
 326:	5f 4f       	sbci	r21, 0xFF	; 255
 328:	0e 94 9c 03 	call	0x738	; 0x738 <DIO_readpin>
	
	if (!pin_status) 
 32c:	81 11       	cpse	r24, r1
 32e:	05 c0       	rjmp	.+10     	; 0x33a <Is_pressed+0x2a>
	{
		button_state = Button_pressed ; /** RETURN THE STATUS AS BUTTON IS PRESSED **/
		*value = pvalue ;
 330:	89 81       	ldd	r24, Y+1	; 0x01
 332:	f8 01       	movw	r30, r16
 334:	80 83       	st	Z, r24
	
	pin_status = DIO_readpin(Button_port , Button_pin , &pvalue); /** READ THE BUTTON PIN VALUE */
	
	if (!pin_status) 
	{
		button_state = Button_pressed ; /** RETURN THE STATUS AS BUTTON IS PRESSED **/
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	04 c0       	rjmp	.+8      	; 0x342 <Is_pressed+0x32>
	}
	
	else
	{
		button_state = Button_Notpressed ; /** RETURN THE STATUS AS BUTTON IS PRESSED **/
		*value = pvalue ;
 33a:	89 81       	ldd	r24, Y+1	; 0x01
 33c:	f8 01       	movw	r30, r16
 33e:	80 83       	st	Z, r24
		*value = pvalue ;
	}
	
	else
	{
		button_state = Button_Notpressed ; /** RETURN THE STATUS AS BUTTON IS PRESSED **/
 340:	80 e0       	ldi	r24, 0x00	; 0
		*value = pvalue ;
	}
	
	return button_state ; /** RETURN THE STATUS OF THE BUTTON **/
}
 342:	0f 90       	pop	r0
 344:	df 91       	pop	r29
 346:	cf 91       	pop	r28
 348:	1f 91       	pop	r17
 34a:	0f 91       	pop	r16
 34c:	08 95       	ret

0000034e <EEPROM_init>:
/** AGGUMENTS : VOID                                        **/
/** RETURNS   : VOID                                        **/
/*************************************************************/
void EEPROM_init(void)
{
	TWI_init(); /** INITIALIZE TWI MODULE **/
 34e:	0e 94 da 03 	call	0x7b4	; 0x7b4 <TWI_init>
 352:	08 95       	ret

00000354 <EEPROM_writebyte>:
/** FUNCTION TO WRITE BYTE TO SPECIFIC EEPROM ADDRESS       **/
/** AGGUMENTS : u16_a_address (ADDRSS) , u8_a_data (DATA)   **/
/** RETURNS   : uint8_t (SUCCESS STATE/ FAIL STATE)         **/
/*************************************************************/
uint8_t EEPROM_writebyte(uint16_t u16_a_address , uint8_t u8_a_data , uint8_t u8_a_page_address)
{
 354:	0f 93       	push	r16
 356:	1f 93       	push	r17
 358:	cf 93       	push	r28
 35a:	df 93       	push	r29
 35c:	18 2f       	mov	r17, r24
 35e:	d9 2f       	mov	r29, r25
 360:	06 2f       	mov	r16, r22
 362:	c4 2f       	mov	r28, r20
	TWI_start(); /** SEND START CONDITION **/
 364:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <TWI_start>
	
	if (TWI_getstatus() != TW_START) /** CHECK THE STATUS CODE **/
 368:	0e 94 f7 03 	call	0x7ee	; 0x7ee <TWI_getstatus>
 36c:	88 30       	cpi	r24, 0x08	; 8
 36e:	21 f5       	brne	.+72     	; 0x3b8 <EEPROM_writebyte+0x64>
	return ERROR;
	
	/** SEND DEVICE ADDRESS WITH WRITE OPERATION **/
	TWI_write(0xA0 | (u8_a_page_address << 1));
 370:	8c 2f       	mov	r24, r28
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	88 0f       	add	r24, r24
 376:	99 1f       	adc	r25, r25
 378:	80 6a       	ori	r24, 0xA0	; 160
 37a:	0e 94 ed 03 	call	0x7da	; 0x7da <TWI_write>
	
	if (TWI_getstatus() != TW_MT_SLA_W_ACK) /** CHECK THE STATUS CODE **/
 37e:	0e 94 f7 03 	call	0x7ee	; 0x7ee <TWI_getstatus>
 382:	88 31       	cpi	r24, 0x18	; 24
 384:	d9 f4       	brne	.+54     	; 0x3bc <EEPROM_writebyte+0x68>
	return ERROR;
	
	/** SEND THE FIRST ADDRESS BYTE LOCATION ADDRESS **/
	TWI_write((uint8_t)(u16_a_address >> 8));
 386:	8d 2f       	mov	r24, r29
 388:	0e 94 ed 03 	call	0x7da	; 0x7da <TWI_write>
	
	if (TWI_getstatus() != TW_MT_DATA_ACK)  /** CHECK THE STATUS CODE **/
 38c:	0e 94 f7 03 	call	0x7ee	; 0x7ee <TWI_getstatus>
 390:	88 32       	cpi	r24, 0x28	; 40
 392:	b1 f4       	brne	.+44     	; 0x3c0 <EEPROM_writebyte+0x6c>
	return ERROR;
	
	/** SEND THE SECOND ADDRESS BYTE LOCATION ADDRESS **/
	TWI_write((uint8_t)(u16_a_address));
 394:	81 2f       	mov	r24, r17
 396:	0e 94 ed 03 	call	0x7da	; 0x7da <TWI_write>
	
	if (TWI_getstatus() != TW_MT_DATA_ACK)  /** CHECK THE STATUS CODE **/
 39a:	0e 94 f7 03 	call	0x7ee	; 0x7ee <TWI_getstatus>
 39e:	88 32       	cpi	r24, 0x28	; 40
 3a0:	89 f4       	brne	.+34     	; 0x3c4 <EEPROM_writebyte+0x70>
	return ERROR;
	
	/** WRITE THE DATA BYTE **/
	TWI_write(u8_a_data);
 3a2:	80 2f       	mov	r24, r16
 3a4:	0e 94 ed 03 	call	0x7da	; 0x7da <TWI_write>
	
	if (TWI_getstatus() != TW_MT_DATA_ACK)  /** CHECK THE STATUS CODE **/
 3a8:	0e 94 f7 03 	call	0x7ee	; 0x7ee <TWI_getstatus>
 3ac:	88 32       	cpi	r24, 0x28	; 40
 3ae:	61 f4       	brne	.+24     	; 0x3c8 <EEPROM_writebyte+0x74>
	return ERROR;
	
	TWI_stop();
 3b0:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <TWI_stop>
	
	return SUCCESS;
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	09 c0       	rjmp	.+18     	; 0x3ca <EEPROM_writebyte+0x76>
uint8_t EEPROM_writebyte(uint16_t u16_a_address , uint8_t u8_a_data , uint8_t u8_a_page_address)
{
	TWI_start(); /** SEND START CONDITION **/
	
	if (TWI_getstatus() != TW_START) /** CHECK THE STATUS CODE **/
	return ERROR;
 3b8:	80 e0       	ldi	r24, 0x00	; 0
 3ba:	07 c0       	rjmp	.+14     	; 0x3ca <EEPROM_writebyte+0x76>
	
	/** SEND DEVICE ADDRESS WITH WRITE OPERATION **/
	TWI_write(0xA0 | (u8_a_page_address << 1));
	
	if (TWI_getstatus() != TW_MT_SLA_W_ACK) /** CHECK THE STATUS CODE **/
	return ERROR;
 3bc:	80 e0       	ldi	r24, 0x00	; 0
 3be:	05 c0       	rjmp	.+10     	; 0x3ca <EEPROM_writebyte+0x76>
	
	/** SEND THE FIRST ADDRESS BYTE LOCATION ADDRESS **/
	TWI_write((uint8_t)(u16_a_address >> 8));
	
	if (TWI_getstatus() != TW_MT_DATA_ACK)  /** CHECK THE STATUS CODE **/
	return ERROR;
 3c0:	80 e0       	ldi	r24, 0x00	; 0
 3c2:	03 c0       	rjmp	.+6      	; 0x3ca <EEPROM_writebyte+0x76>
	
	/** SEND THE SECOND ADDRESS BYTE LOCATION ADDRESS **/
	TWI_write((uint8_t)(u16_a_address));
	
	if (TWI_getstatus() != TW_MT_DATA_ACK)  /** CHECK THE STATUS CODE **/
	return ERROR;
 3c4:	80 e0       	ldi	r24, 0x00	; 0
 3c6:	01 c0       	rjmp	.+2      	; 0x3ca <EEPROM_writebyte+0x76>
	
	/** WRITE THE DATA BYTE **/
	TWI_write(u8_a_data);
	
	if (TWI_getstatus() != TW_MT_DATA_ACK)  /** CHECK THE STATUS CODE **/
	return ERROR;
 3c8:	80 e0       	ldi	r24, 0x00	; 0
	
	TWI_stop();
	
	return SUCCESS;
}
 3ca:	df 91       	pop	r29
 3cc:	cf 91       	pop	r28
 3ce:	1f 91       	pop	r17
 3d0:	0f 91       	pop	r16
 3d2:	08 95       	ret

000003d4 <EEPROM_readbyte>:
/** FUNCTION TO READ BYTE FROM SPECIFIC EEPROM ADDRESS      **/
/** AGGUMENTS : u16_a_address (ADDRSS) , u8_a_data (DATA)   **/
/** RETURNS   : uint8_t (SUCCESS STATE/ FAIL STATE)         **/
/*************************************************************/
uint8_t EEPROM_readbyte(uint16_t u16_a_address , uint8_t *u8_a_data , uint8_t u8_a_page_address)
{
 3d4:	ef 92       	push	r14
 3d6:	ff 92       	push	r15
 3d8:	0f 93       	push	r16
 3da:	1f 93       	push	r17
 3dc:	cf 93       	push	r28
 3de:	df 93       	push	r29
 3e0:	08 2f       	mov	r16, r24
 3e2:	19 2f       	mov	r17, r25
 3e4:	7b 01       	movw	r14, r22
 3e6:	c4 2f       	mov	r28, r20
	TWI_start(); /** SEND START CONDITION **/
 3e8:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <TWI_start>
	
	if (TWI_getstatus() != TW_START)  /** CHECK THE STATUS CODE **/
 3ec:	0e 94 f7 03 	call	0x7ee	; 0x7ee <TWI_getstatus>
 3f0:	88 30       	cpi	r24, 0x08	; 8
 3f2:	99 f5       	brne	.+102    	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
	return ERROR;
	
	/** SEND DEVICE ADDRESS WITH WRITE OPERATION **/
	TWI_write(0xA0 | (u8_a_page_address << 1));
 3f4:	d0 e0       	ldi	r29, 0x00	; 0
 3f6:	cc 0f       	add	r28, r28
 3f8:	dd 1f       	adc	r29, r29
 3fa:	8c 2f       	mov	r24, r28
 3fc:	80 6a       	ori	r24, 0xA0	; 160
 3fe:	0e 94 ed 03 	call	0x7da	; 0x7da <TWI_write>
	
	if (TWI_getstatus() != TW_MT_SLA_W_ACK)  /** CHECK THE STATUS CODE **/
 402:	0e 94 f7 03 	call	0x7ee	; 0x7ee <TWI_getstatus>
 406:	88 31       	cpi	r24, 0x18	; 24
 408:	51 f5       	brne	.+84     	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
	return ERROR;
	
	/** SEND THE FIRST ADDRESS BYTE LOCATION ADDRESS **/
	TWI_write((uint8_t)(u16_a_address >> 8));
 40a:	81 2f       	mov	r24, r17
 40c:	0e 94 ed 03 	call	0x7da	; 0x7da <TWI_write>
	
	if (TWI_getstatus() != TW_MT_DATA_ACK)  /** CHECK THE STATUS CODE **/
 410:	0e 94 f7 03 	call	0x7ee	; 0x7ee <TWI_getstatus>
 414:	88 32       	cpi	r24, 0x28	; 40
 416:	29 f5       	brne	.+74     	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
	return ERROR;
	
	/** SEND THE SECOND ADDRESS BYTE LOCATION ADDRESS **/
	TWI_write((uint8_t)(u16_a_address));
 418:	80 2f       	mov	r24, r16
 41a:	0e 94 ed 03 	call	0x7da	; 0x7da <TWI_write>
	
	if (TWI_getstatus() != TW_MT_DATA_ACK)  /** CHECK THE STATUS CODE **/
 41e:	0e 94 f7 03 	call	0x7ee	; 0x7ee <TWI_getstatus>
 422:	88 32       	cpi	r24, 0x28	; 40
 424:	01 f5       	brne	.+64     	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
	return ERROR;
	
	/** SEND REPEATED START **/
	TWI_start();
 426:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <TWI_start>
	
	if (TWI_getstatus() != TW_REP_START)  /** CHECK THE STATUS CODE **/
 42a:	0e 94 f7 03 	call	0x7ee	; 0x7ee <TWI_getstatus>
 42e:	80 31       	cpi	r24, 0x10	; 16
 430:	e1 f4       	brne	.+56     	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
	return ERROR;
	
	/** SEND DEVICE ADDRESS WITH READ OPERATION **/
	TWI_write(0xA0 | ((u8_a_page_address << 1) | 0x01));
 432:	8c 2f       	mov	r24, r28
 434:	81 6a       	ori	r24, 0xA1	; 161
 436:	0e 94 ed 03 	call	0x7da	; 0x7da <TWI_write>
	
	if (TWI_getstatus() != TW_MT_SLA_R_ACK)  /** CHECK THE STATUS CODE **/
 43a:	0e 94 f7 03 	call	0x7ee	; 0x7ee <TWI_getstatus>
 43e:	80 34       	cpi	r24, 0x40	; 64
 440:	b1 f4       	brne	.+44     	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
	return ERROR;
	
	*u8_a_data = TWI_readwithnack(); /** READ THE DATA WITH ACK BIT **/
 442:	0e 94 e6 03 	call	0x7cc	; 0x7cc <TWI_readwithnack>
 446:	f7 01       	movw	r30, r14
 448:	80 83       	st	Z, r24
	
	if (TWI_getstatus() != TW_MR_DATA_NACK)  /** CHECK THE STATUS CODE **/
 44a:	0e 94 f7 03 	call	0x7ee	; 0x7ee <TWI_getstatus>
 44e:	88 35       	cpi	r24, 0x58	; 88
 450:	81 f4       	brne	.+32     	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
	return ERROR;
	
	TWI_stop(); /** SEND STOP CONDITION **/
 452:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <TWI_stop>
	
	return SUCCESS; /** RETURN SUCCESS IF THE FRAME SENT CORRECTLY **/
 456:	81 e0       	ldi	r24, 0x01	; 1
 458:	0d c0       	rjmp	.+26     	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
uint8_t EEPROM_readbyte(uint16_t u16_a_address , uint8_t *u8_a_data , uint8_t u8_a_page_address)
{
	TWI_start(); /** SEND START CONDITION **/
	
	if (TWI_getstatus() != TW_START)  /** CHECK THE STATUS CODE **/
	return ERROR;
 45a:	80 e0       	ldi	r24, 0x00	; 0
 45c:	0b c0       	rjmp	.+22     	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
	
	/** SEND DEVICE ADDRESS WITH WRITE OPERATION **/
	TWI_write(0xA0 | (u8_a_page_address << 1));
	
	if (TWI_getstatus() != TW_MT_SLA_W_ACK)  /** CHECK THE STATUS CODE **/
	return ERROR;
 45e:	80 e0       	ldi	r24, 0x00	; 0
 460:	09 c0       	rjmp	.+18     	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
	
	/** SEND THE FIRST ADDRESS BYTE LOCATION ADDRESS **/
	TWI_write((uint8_t)(u16_a_address >> 8));
	
	if (TWI_getstatus() != TW_MT_DATA_ACK)  /** CHECK THE STATUS CODE **/
	return ERROR;
 462:	80 e0       	ldi	r24, 0x00	; 0
 464:	07 c0       	rjmp	.+14     	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
	
	/** SEND THE SECOND ADDRESS BYTE LOCATION ADDRESS **/
	TWI_write((uint8_t)(u16_a_address));
	
	if (TWI_getstatus() != TW_MT_DATA_ACK)  /** CHECK THE STATUS CODE **/
	return ERROR;
 466:	80 e0       	ldi	r24, 0x00	; 0
 468:	05 c0       	rjmp	.+10     	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
	
	/** SEND REPEATED START **/
	TWI_start();
	
	if (TWI_getstatus() != TW_REP_START)  /** CHECK THE STATUS CODE **/
	return ERROR;
 46a:	80 e0       	ldi	r24, 0x00	; 0
 46c:	03 c0       	rjmp	.+6      	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
	
	/** SEND DEVICE ADDRESS WITH READ OPERATION **/
	TWI_write(0xA0 | ((u8_a_page_address << 1) | 0x01));
	
	if (TWI_getstatus() != TW_MT_SLA_R_ACK)  /** CHECK THE STATUS CODE **/
	return ERROR;
 46e:	80 e0       	ldi	r24, 0x00	; 0
 470:	01 c0       	rjmp	.+2      	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
	
	*u8_a_data = TWI_readwithnack(); /** READ THE DATA WITH ACK BIT **/
	
	if (TWI_getstatus() != TW_MR_DATA_NACK)  /** CHECK THE STATUS CODE **/
	return ERROR;
 472:	80 e0       	ldi	r24, 0x00	; 0
	
	TWI_stop(); /** SEND STOP CONDITION **/
	
	return SUCCESS; /** RETURN SUCCESS IF THE FRAME SENT CORRECTLY **/
}
 474:	df 91       	pop	r29
 476:	cf 91       	pop	r28
 478:	1f 91       	pop	r17
 47a:	0f 91       	pop	r16
 47c:	ff 90       	pop	r15
 47e:	ef 90       	pop	r14
 480:	08 95       	ret

00000482 <main>:

int main(void)
{
	uint8_t u8_a_card_valid = CARD_NOT_OK , u8_a_entrypoint ;
	
	APP_init();        /** INITIALIZATION **/
 482:	0e 94 49 00 	call	0x92	; 0x92 <APP_init>
	
	u8_a_entrypoint = APP_entrypoint(); /** DECIDE THE PROGRAM ENTRY POINT **/
 486:	0e 94 60 00 	call	0xc0	; 0xc0 <APP_entrypoint>
	
	if (u8_a_entrypoint == PROGRAM_MODE)
 48a:	81 11       	cpse	r24, r1
 48c:	1f c0       	rjmp	.+62     	; 0x4cc <main+0x4a>
	{
		u8_a_card_valid = APP_cardprogram(); /** PROGRAMMING THE CARD **/
 48e:	0e 94 99 00 	call	0x132	; 0x132 <APP_cardprogram>
		
		if(!u8_a_card_valid) /** CARD PROGRAMMING FAILURE **/
 492:	81 11       	cpse	r24, r1
 494:	06 c0       	rjmp	.+12     	; 0x4a2 <main+0x20>
		{
			/** DISPLAY A MESSAGE TO GET OUT OF THE SYSTEM **/
			APP_cardfailed();
 496:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <APP_cardfailed>
			
			exit(0); /** STOP THE SYSTEM **/
 49a:	80 e0       	ldi	r24, 0x00	; 0
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	0e 94 56 06 	call	0xcac	; 0xcac <_exit>
		}
		
		APP_storecard();   /** STORE CARD DATA IN EEPROM **/
 4a2:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <APP_storecard>
		
		APP_getcarddata(); /** GET CARD DATA FROM THE EEPROM **/
 4a6:	0e 94 30 01 	call	0x260	; 0x260 <APP_getcarddata>
		
		APP_sendtrigger(); /** SEND TRIGGER TO ATM ECU **/
 4aa:	0e 94 61 01 	call	0x2c2	; 0x2c2 <APP_sendtrigger>
		
		do
		{
			Is_pressed(BUTTON1_PORT , BUTTON1_PIN , &u8_a_commtrig);
 4ae:	45 e2       	ldi	r20, 0x25	; 37
 4b0:	52 e0       	ldi	r21, 0x02	; 2
 4b2:	60 e0       	ldi	r22, 0x00	; 0
 4b4:	70 e0       	ldi	r23, 0x00	; 0
 4b6:	81 e0       	ldi	r24, 0x01	; 1
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	0e 94 88 01 	call	0x310	; 0x310 <Is_pressed>
		} while (u8_a_commtrig == 0); /** UNTILL COMMUNICATION INITIATED **/
 4be:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <u8_a_commtrig>
 4c2:	88 23       	and	r24, r24
 4c4:	a1 f3       	breq	.-24     	; 0x4ae <main+0x2c>
			
		APP_sendcarddata(); /** START THE **/
 4c6:	0e 94 67 01 	call	0x2ce	; 0x2ce <APP_sendcarddata>
 4ca:	35 c0       	rjmp	.+106    	; 0x536 <main+0xb4>
	}
	
	else if (u8_a_entrypoint == REPROGRAM_MODE)
 4cc:	82 30       	cpi	r24, 0x02	; 2
 4ce:	f9 f4       	brne	.+62     	; 0x50e <main+0x8c>
	{
		u8_a_card_valid = APP_cardprogram(); /** PROGRAMMING THE CARD **/
 4d0:	0e 94 99 00 	call	0x132	; 0x132 <APP_cardprogram>
		
		if(!u8_a_card_valid) /** CARD PROGRAMMING FAILURE **/
 4d4:	81 11       	cpse	r24, r1
 4d6:	06 c0       	rjmp	.+12     	; 0x4e4 <main+0x62>
		{
			/** DISPLAY A MESSAGE TO GET OUT OF THE SYSTEM **/
			APP_cardfailed();
 4d8:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <APP_cardfailed>
			
			exit(1); /** STOP THE SYSTEM **/
 4dc:	81 e0       	ldi	r24, 0x01	; 1
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	0e 94 56 06 	call	0xcac	; 0xcac <_exit>
		}
		
		APP_storecard();   /** STORE CARD DATA IN EEPROM **/
 4e4:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <APP_storecard>
		
		APP_getcarddata(); /** GET CARD DATA FROM THE EEPROM **/
 4e8:	0e 94 30 01 	call	0x260	; 0x260 <APP_getcarddata>
		
		APP_sendtrigger(); /** SEND TRIGGER TO ATM ECU **/
 4ec:	0e 94 61 01 	call	0x2c2	; 0x2c2 <APP_sendtrigger>
		
		do
		{
			Is_pressed(BUTTON1_PORT , BUTTON1_PIN , &u8_a_commtrig);
 4f0:	45 e2       	ldi	r20, 0x25	; 37
 4f2:	52 e0       	ldi	r21, 0x02	; 2
 4f4:	60 e0       	ldi	r22, 0x00	; 0
 4f6:	70 e0       	ldi	r23, 0x00	; 0
 4f8:	81 e0       	ldi	r24, 0x01	; 1
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	0e 94 88 01 	call	0x310	; 0x310 <Is_pressed>
		} while (u8_a_commtrig == 0); /** UNTILL COMMUNICATION INITIATED **/
 500:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <u8_a_commtrig>
 504:	88 23       	and	r24, r24
 506:	a1 f3       	breq	.-24     	; 0x4f0 <main+0x6e>
			
		APP_sendcarddata(); /** START THE **/
 508:	0e 94 67 01 	call	0x2ce	; 0x2ce <APP_sendcarddata>
 50c:	14 c0       	rjmp	.+40     	; 0x536 <main+0xb4>
	}
	
	else if (u8_a_entrypoint == USER_MODE)
 50e:	81 30       	cpi	r24, 0x01	; 1
 510:	91 f4       	brne	.+36     	; 0x536 <main+0xb4>
	{
		APP_getcarddata(); /** GET CARD DATA FROM THE EEPROM **/
 512:	0e 94 30 01 	call	0x260	; 0x260 <APP_getcarddata>
		
		APP_sendtrigger(); /** SEND TRIGGER TO ATM ECU **/
 516:	0e 94 61 01 	call	0x2c2	; 0x2c2 <APP_sendtrigger>
		
		do
		{
			Is_pressed(BUTTON1_PORT , BUTTON1_PIN , &u8_a_commtrig);
 51a:	45 e2       	ldi	r20, 0x25	; 37
 51c:	52 e0       	ldi	r21, 0x02	; 2
 51e:	60 e0       	ldi	r22, 0x00	; 0
 520:	70 e0       	ldi	r23, 0x00	; 0
 522:	81 e0       	ldi	r24, 0x01	; 1
 524:	90 e0       	ldi	r25, 0x00	; 0
 526:	0e 94 88 01 	call	0x310	; 0x310 <Is_pressed>
		} while (u8_a_commtrig == 0); /** UNTILL COMMUNICATION INITIATED **/
 52a:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <u8_a_commtrig>
 52e:	88 23       	and	r24, r24
 530:	a1 f3       	breq	.-24     	; 0x51a <main+0x98>
			
		APP_sendcarddata(); /** START THE COMMUNICATION & SEND CARD DATA **/
 532:	0e 94 67 01 	call	0x2ce	; 0x2ce <APP_sendcarddata>
//     while (1) 
//     {
// 		
//     }

	}
 536:	80 e0       	ldi	r24, 0x00	; 0
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	08 95       	ret

0000053c <DIO_setpindir>:
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
	
	switch(u8_a_pindir) /** SWITCH CASE ON THE DIRECTION VALUE **/
 53c:	44 23       	and	r20, r20
 53e:	19 f0       	breq	.+6      	; 0x546 <DIO_setpindir+0xa>
 540:	41 30       	cpi	r20, 0x01	; 1
 542:	e9 f1       	breq	.+122    	; 0x5be <DIO_setpindir+0x82>
 544:	74 c0       	rjmp	.+232    	; 0x62e <DIO_setpindir+0xf2>
	{
		case DIO_PIN_INPUT:  /* INPUT CASE  */
		
		switch(u8_a_portid) /** SWITCH CASE ON THE PORT ID */
 546:	81 30       	cpi	r24, 0x01	; 1
 548:	99 f0       	breq	.+38     	; 0x570 <DIO_setpindir+0x34>
 54a:	28 f0       	brcs	.+10     	; 0x556 <DIO_setpindir+0x1a>
 54c:	82 30       	cpi	r24, 0x02	; 2
 54e:	e9 f0       	breq	.+58     	; 0x58a <DIO_setpindir+0x4e>
 550:	83 30       	cpi	r24, 0x03	; 3
 552:	41 f1       	breq	.+80     	; 0x5a4 <DIO_setpindir+0x68>
 554:	6e c0       	rjmp	.+220    	; 0x632 <DIO_setpindir+0xf6>
		{
			case DIO_PORTA:
			clear_bit(DDRA , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTA AS INPUT PIN **/
 556:	2a b3       	in	r18, 0x1a	; 26
 558:	81 e0       	ldi	r24, 0x01	; 1
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	02 c0       	rjmp	.+4      	; 0x562 <DIO_setpindir+0x26>
 55e:	88 0f       	add	r24, r24
 560:	99 1f       	adc	r25, r25
 562:	6a 95       	dec	r22
 564:	e2 f7       	brpl	.-8      	; 0x55e <DIO_setpindir+0x22>
 566:	80 95       	com	r24
 568:	82 23       	and	r24, r18
 56a:	8a bb       	out	0x1a, r24	; 26
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
 56c:	80 e0       	ldi	r24, 0x00	; 0
		
		switch(u8_a_portid) /** SWITCH CASE ON THE PORT ID */
		{
			case DIO_PORTA:
			clear_bit(DDRA , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTA AS INPUT PIN **/
			break;
 56e:	08 95       	ret
			
			case DIO_PORTB:
			clear_bit(DDRB , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTB AS INPUT PIN **/
 570:	27 b3       	in	r18, 0x17	; 23
 572:	81 e0       	ldi	r24, 0x01	; 1
 574:	90 e0       	ldi	r25, 0x00	; 0
 576:	02 c0       	rjmp	.+4      	; 0x57c <DIO_setpindir+0x40>
 578:	88 0f       	add	r24, r24
 57a:	99 1f       	adc	r25, r25
 57c:	6a 95       	dec	r22
 57e:	e2 f7       	brpl	.-8      	; 0x578 <DIO_setpindir+0x3c>
 580:	80 95       	com	r24
 582:	82 23       	and	r24, r18
 584:	87 bb       	out	0x17, r24	; 23
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
 586:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(DDRA , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTA AS INPUT PIN **/
			break;
			
			case DIO_PORTB:
			clear_bit(DDRB , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTB AS INPUT PIN **/
			break;
 588:	08 95       	ret
			
			case DIO_PORTC:
			clear_bit(DDRC , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTC AS INPUT PIN **/
 58a:	24 b3       	in	r18, 0x14	; 20
 58c:	81 e0       	ldi	r24, 0x01	; 1
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	02 c0       	rjmp	.+4      	; 0x596 <DIO_setpindir+0x5a>
 592:	88 0f       	add	r24, r24
 594:	99 1f       	adc	r25, r25
 596:	6a 95       	dec	r22
 598:	e2 f7       	brpl	.-8      	; 0x592 <DIO_setpindir+0x56>
 59a:	80 95       	com	r24
 59c:	82 23       	and	r24, r18
 59e:	84 bb       	out	0x14, r24	; 20
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
 5a0:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(DDRB , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTB AS INPUT PIN **/
			break;
			
			case DIO_PORTC:
			clear_bit(DDRC , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTC AS INPUT PIN **/
			break;
 5a2:	08 95       	ret
			
			case DIO_PORTD:
			clear_bit(DDRD , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTD AS INPUT PIN **/
 5a4:	21 b3       	in	r18, 0x11	; 17
 5a6:	81 e0       	ldi	r24, 0x01	; 1
 5a8:	90 e0       	ldi	r25, 0x00	; 0
 5aa:	02 c0       	rjmp	.+4      	; 0x5b0 <DIO_setpindir+0x74>
 5ac:	88 0f       	add	r24, r24
 5ae:	99 1f       	adc	r25, r25
 5b0:	6a 95       	dec	r22
 5b2:	e2 f7       	brpl	.-8      	; 0x5ac <DIO_setpindir+0x70>
 5b4:	80 95       	com	r24
 5b6:	82 23       	and	r24, r18
 5b8:	81 bb       	out	0x11, r24	; 17
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
 5ba:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(DDRC , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTC AS INPUT PIN **/
			break;
			
			case DIO_PORTD:
			clear_bit(DDRD , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTD AS INPUT PIN **/
			break;
 5bc:	08 95       	ret
		} 
		break;
		
		case DIO_PIN_OUTPUT:  /* OUTPUT CASE  */
		
		switch(u8_a_portid) /** SWITCH CASE ON THE PORT ID */
 5be:	81 30       	cpi	r24, 0x01	; 1
 5c0:	91 f0       	breq	.+36     	; 0x5e6 <DIO_setpindir+0xaa>
 5c2:	28 f0       	brcs	.+10     	; 0x5ce <DIO_setpindir+0x92>
 5c4:	82 30       	cpi	r24, 0x02	; 2
 5c6:	d9 f0       	breq	.+54     	; 0x5fe <DIO_setpindir+0xc2>
 5c8:	83 30       	cpi	r24, 0x03	; 3
 5ca:	29 f1       	breq	.+74     	; 0x616 <DIO_setpindir+0xda>
 5cc:	34 c0       	rjmp	.+104    	; 0x636 <DIO_setpindir+0xfa>
		{
			case DIO_PORTA:
			set_bit(DDRA , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
 5ce:	2a b3       	in	r18, 0x1a	; 26
 5d0:	81 e0       	ldi	r24, 0x01	; 1
 5d2:	90 e0       	ldi	r25, 0x00	; 0
 5d4:	02 c0       	rjmp	.+4      	; 0x5da <DIO_setpindir+0x9e>
 5d6:	88 0f       	add	r24, r24
 5d8:	99 1f       	adc	r25, r25
 5da:	6a 95       	dec	r22
 5dc:	e2 f7       	brpl	.-8      	; 0x5d6 <DIO_setpindir+0x9a>
 5de:	82 2b       	or	r24, r18
 5e0:	8a bb       	out	0x1a, r24	; 26
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
 5e2:	80 e0       	ldi	r24, 0x00	; 0
		
		switch(u8_a_portid) /** SWITCH CASE ON THE PORT ID */
		{
			case DIO_PORTA:
			set_bit(DDRA , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
 5e4:	08 95       	ret
			
			case DIO_PORTB:
			set_bit(DDRB , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
 5e6:	27 b3       	in	r18, 0x17	; 23
 5e8:	81 e0       	ldi	r24, 0x01	; 1
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	02 c0       	rjmp	.+4      	; 0x5f2 <DIO_setpindir+0xb6>
 5ee:	88 0f       	add	r24, r24
 5f0:	99 1f       	adc	r25, r25
 5f2:	6a 95       	dec	r22
 5f4:	e2 f7       	brpl	.-8      	; 0x5ee <DIO_setpindir+0xb2>
 5f6:	82 2b       	or	r24, r18
 5f8:	87 bb       	out	0x17, r24	; 23
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
 5fa:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(DDRA , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
			
			case DIO_PORTB:
			set_bit(DDRB , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
 5fc:	08 95       	ret
			
			case DIO_PORTC:
			set_bit(DDRC , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
 5fe:	24 b3       	in	r18, 0x14	; 20
 600:	81 e0       	ldi	r24, 0x01	; 1
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	02 c0       	rjmp	.+4      	; 0x60a <DIO_setpindir+0xce>
 606:	88 0f       	add	r24, r24
 608:	99 1f       	adc	r25, r25
 60a:	6a 95       	dec	r22
 60c:	e2 f7       	brpl	.-8      	; 0x606 <DIO_setpindir+0xca>
 60e:	82 2b       	or	r24, r18
 610:	84 bb       	out	0x14, r24	; 20
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
 612:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(DDRB , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
			
			case DIO_PORTC:
			set_bit(DDRC , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
 614:	08 95       	ret
			
			case DIO_PORTD:
			set_bit(DDRD , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
 616:	21 b3       	in	r18, 0x11	; 17
 618:	81 e0       	ldi	r24, 0x01	; 1
 61a:	90 e0       	ldi	r25, 0x00	; 0
 61c:	02 c0       	rjmp	.+4      	; 0x622 <DIO_setpindir+0xe6>
 61e:	88 0f       	add	r24, r24
 620:	99 1f       	adc	r25, r25
 622:	6a 95       	dec	r22
 624:	e2 f7       	brpl	.-8      	; 0x61e <DIO_setpindir+0xe2>
 626:	82 2b       	or	r24, r18
 628:	81 bb       	out	0x11, r24	; 17
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
 62a:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(DDRC , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
			
			case DIO_PORTD:
			set_bit(DDRD , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
 62c:	08 95       	ret
		} 
		break;
		 
		 
		default:  /** DIRECTION ISN'T INPUT OR OUTPUT */
		en_a_dirstate = NOT_VALID_DIRECTION ; /** RETURN AS DIR NOT VALID ERRORS **/
 62e:	81 e0       	ldi	r24, 0x01	; 1
 630:	08 95       	ret
			case DIO_PORTD:
			clear_bit(DDRD , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTD AS INPUT PIN **/
			break;
			
			default: /** DO NOTHING **/
			en_a_dirstate = NOT_VALID_DIRECTION ; /** RETURN AS DIR NOT VALID ERRORS **/
 632:	81 e0       	ldi	r24, 0x01	; 1
 634:	08 95       	ret
			case DIO_PORTD:
			set_bit(DDRD , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
			
			default:  /** DO NOTHING **/
			en_a_dirstate = NOT_VALID_DIRECTION ; /** RETURN AS DIR NOT VALID ERRORS **/
 636:	81 e0       	ldi	r24, 0x01	; 1
		en_a_dirstate = NOT_VALID_DIRECTION ; /** RETURN AS DIR NOT VALID ERRORS **/
		break ; 
	} 
	
	return en_a_dirstate ; /** RETURN THE STATE OF FUNCTION **/
}
 638:	08 95       	ret

0000063a <DIO_setpinvalue>:
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
	
	switch(u8_a_pinval)
 63a:	44 23       	and	r20, r20
 63c:	19 f0       	breq	.+6      	; 0x644 <DIO_setpinvalue+0xa>
 63e:	41 30       	cpi	r20, 0x01	; 1
 640:	e9 f1       	breq	.+122    	; 0x6bc <DIO_setpinvalue+0x82>
 642:	74 c0       	rjmp	.+232    	; 0x72c <DIO_setpinvalue+0xf2>
	{
		case DIO_PIN_LOW:  /** IN CASE PIN VALUE IS LOW */
		
		switch(u8_a_portid)  /** SWITCH CASE ON THE PORT ID */ 
 644:	81 30       	cpi	r24, 0x01	; 1
 646:	99 f0       	breq	.+38     	; 0x66e <DIO_setpinvalue+0x34>
 648:	28 f0       	brcs	.+10     	; 0x654 <DIO_setpinvalue+0x1a>
 64a:	82 30       	cpi	r24, 0x02	; 2
 64c:	e9 f0       	breq	.+58     	; 0x688 <DIO_setpinvalue+0x4e>
 64e:	83 30       	cpi	r24, 0x03	; 3
 650:	41 f1       	breq	.+80     	; 0x6a2 <DIO_setpinvalue+0x68>
 652:	6e c0       	rjmp	.+220    	; 0x730 <DIO_setpinvalue+0xf6>
		{
			case DIO_PORTA:
			clear_bit(PORTA , u8_a_pinid);       /** SET THIS PIN AS LOW **/
 654:	2b b3       	in	r18, 0x1b	; 27
 656:	81 e0       	ldi	r24, 0x01	; 1
 658:	90 e0       	ldi	r25, 0x00	; 0
 65a:	02 c0       	rjmp	.+4      	; 0x660 <DIO_setpinvalue+0x26>
 65c:	88 0f       	add	r24, r24
 65e:	99 1f       	adc	r25, r25
 660:	6a 95       	dec	r22
 662:	e2 f7       	brpl	.-8      	; 0x65c <DIO_setpinvalue+0x22>
 664:	80 95       	com	r24
 666:	82 23       	and	r24, r18
 668:	8b bb       	out	0x1b, r24	; 27
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
 66a:	80 e0       	ldi	r24, 0x00	; 0
		
		switch(u8_a_portid)  /** SWITCH CASE ON THE PORT ID */ 
		{
			case DIO_PORTA:
			clear_bit(PORTA , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
 66c:	08 95       	ret
			
			case DIO_PORTB:
			clear_bit(PORTB , u8_a_pinid);       /** SET THIS PIN AS LOW **/
 66e:	28 b3       	in	r18, 0x18	; 24
 670:	81 e0       	ldi	r24, 0x01	; 1
 672:	90 e0       	ldi	r25, 0x00	; 0
 674:	02 c0       	rjmp	.+4      	; 0x67a <DIO_setpinvalue+0x40>
 676:	88 0f       	add	r24, r24
 678:	99 1f       	adc	r25, r25
 67a:	6a 95       	dec	r22
 67c:	e2 f7       	brpl	.-8      	; 0x676 <DIO_setpinvalue+0x3c>
 67e:	80 95       	com	r24
 680:	82 23       	and	r24, r18
 682:	88 bb       	out	0x18, r24	; 24
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
 684:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(PORTA , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
			
			case DIO_PORTB:
			clear_bit(PORTB , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
 686:	08 95       	ret
			
			case DIO_PORTC:
			clear_bit(PORTC , u8_a_pinid);       /** SET THIS PIN AS LOW **/
 688:	25 b3       	in	r18, 0x15	; 21
 68a:	81 e0       	ldi	r24, 0x01	; 1
 68c:	90 e0       	ldi	r25, 0x00	; 0
 68e:	02 c0       	rjmp	.+4      	; 0x694 <DIO_setpinvalue+0x5a>
 690:	88 0f       	add	r24, r24
 692:	99 1f       	adc	r25, r25
 694:	6a 95       	dec	r22
 696:	e2 f7       	brpl	.-8      	; 0x690 <DIO_setpinvalue+0x56>
 698:	80 95       	com	r24
 69a:	82 23       	and	r24, r18
 69c:	85 bb       	out	0x15, r24	; 21
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
 69e:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(PORTB , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
			
			case DIO_PORTC:
			clear_bit(PORTC , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
 6a0:	08 95       	ret
			
			case DIO_PORTD:
			clear_bit(PORTD , u8_a_pinid);       /** SET THIS PIN AS LOW **/
 6a2:	22 b3       	in	r18, 0x12	; 18
 6a4:	81 e0       	ldi	r24, 0x01	; 1
 6a6:	90 e0       	ldi	r25, 0x00	; 0
 6a8:	02 c0       	rjmp	.+4      	; 0x6ae <DIO_setpinvalue+0x74>
 6aa:	88 0f       	add	r24, r24
 6ac:	99 1f       	adc	r25, r25
 6ae:	6a 95       	dec	r22
 6b0:	e2 f7       	brpl	.-8      	; 0x6aa <DIO_setpinvalue+0x70>
 6b2:	80 95       	com	r24
 6b4:	82 23       	and	r24, r18
 6b6:	82 bb       	out	0x12, r24	; 18
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
 6b8:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(PORTC , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
			
			case DIO_PORTD:
			clear_bit(PORTD , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
 6ba:	08 95       	ret
		} 
		break;
		
		case DIO_PIN_HIGH:
		
		switch(u8_a_portid)
 6bc:	81 30       	cpi	r24, 0x01	; 1
 6be:	91 f0       	breq	.+36     	; 0x6e4 <DIO_setpinvalue+0xaa>
 6c0:	28 f0       	brcs	.+10     	; 0x6cc <DIO_setpinvalue+0x92>
 6c2:	82 30       	cpi	r24, 0x02	; 2
 6c4:	d9 f0       	breq	.+54     	; 0x6fc <DIO_setpinvalue+0xc2>
 6c6:	83 30       	cpi	r24, 0x03	; 3
 6c8:	29 f1       	breq	.+74     	; 0x714 <DIO_setpinvalue+0xda>
 6ca:	34 c0       	rjmp	.+104    	; 0x734 <DIO_setpinvalue+0xfa>
		{
			case DIO_PORTA:
			set_bit(PORTA , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
 6cc:	2b b3       	in	r18, 0x1b	; 27
 6ce:	81 e0       	ldi	r24, 0x01	; 1
 6d0:	90 e0       	ldi	r25, 0x00	; 0
 6d2:	02 c0       	rjmp	.+4      	; 0x6d8 <DIO_setpinvalue+0x9e>
 6d4:	88 0f       	add	r24, r24
 6d6:	99 1f       	adc	r25, r25
 6d8:	6a 95       	dec	r22
 6da:	e2 f7       	brpl	.-8      	; 0x6d4 <DIO_setpinvalue+0x9a>
 6dc:	82 2b       	or	r24, r18
 6de:	8b bb       	out	0x1b, r24	; 27
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
 6e0:	80 e0       	ldi	r24, 0x00	; 0
		
		switch(u8_a_portid)
		{
			case DIO_PORTA:
			set_bit(PORTA , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
 6e2:	08 95       	ret
			
			case DIO_PORTB:
			set_bit(PORTB , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
 6e4:	28 b3       	in	r18, 0x18	; 24
 6e6:	81 e0       	ldi	r24, 0x01	; 1
 6e8:	90 e0       	ldi	r25, 0x00	; 0
 6ea:	02 c0       	rjmp	.+4      	; 0x6f0 <DIO_setpinvalue+0xb6>
 6ec:	88 0f       	add	r24, r24
 6ee:	99 1f       	adc	r25, r25
 6f0:	6a 95       	dec	r22
 6f2:	e2 f7       	brpl	.-8      	; 0x6ec <DIO_setpinvalue+0xb2>
 6f4:	82 2b       	or	r24, r18
 6f6:	88 bb       	out	0x18, r24	; 24
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
 6f8:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(PORTA , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
			
			case DIO_PORTB:
			set_bit(PORTB , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
 6fa:	08 95       	ret
			
			case DIO_PORTC:
			set_bit(PORTC , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
 6fc:	25 b3       	in	r18, 0x15	; 21
 6fe:	81 e0       	ldi	r24, 0x01	; 1
 700:	90 e0       	ldi	r25, 0x00	; 0
 702:	02 c0       	rjmp	.+4      	; 0x708 <DIO_setpinvalue+0xce>
 704:	88 0f       	add	r24, r24
 706:	99 1f       	adc	r25, r25
 708:	6a 95       	dec	r22
 70a:	e2 f7       	brpl	.-8      	; 0x704 <DIO_setpinvalue+0xca>
 70c:	82 2b       	or	r24, r18
 70e:	85 bb       	out	0x15, r24	; 21
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
 710:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(PORTB , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
			
			case DIO_PORTC:
			set_bit(PORTC , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
 712:	08 95       	ret
			
			case DIO_PORTD:
			set_bit(PORTD , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
 714:	22 b3       	in	r18, 0x12	; 18
 716:	81 e0       	ldi	r24, 0x01	; 1
 718:	90 e0       	ldi	r25, 0x00	; 0
 71a:	02 c0       	rjmp	.+4      	; 0x720 <DIO_setpinvalue+0xe6>
 71c:	88 0f       	add	r24, r24
 71e:	99 1f       	adc	r25, r25
 720:	6a 95       	dec	r22
 722:	e2 f7       	brpl	.-8      	; 0x71c <DIO_setpinvalue+0xe2>
 724:	82 2b       	or	r24, r18
 726:	82 bb       	out	0x12, r24	; 18
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
 728:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(PORTC , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
			
			case DIO_PORTD:
			set_bit(PORTD , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
 72a:	08 95       	ret
			break;
		} 
		break;
		
		default :
		en_a_valstate = NOT_VALID_VALUE ;  /** RETURN VALUE AS NOT VALID **/
 72c:	81 e0       	ldi	r24, 0x01	; 1
 72e:	08 95       	ret
			case DIO_PORTD:
			clear_bit(PORTD , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
			
			default:
			en_a_valstate = NOT_VALID_VALUE ;  /** RETURN VALUE AS NOT VALID **/
 730:	81 e0       	ldi	r24, 0x01	; 1
 732:	08 95       	ret
			case DIO_PORTD:
			set_bit(PORTD , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
			
			default:
			en_a_valstate = NOT_VALID_VALUE ;  /** RETURN VALUE AS NOT VALID **/
 734:	81 e0       	ldi	r24, 0x01	; 1
		en_a_valstate = NOT_VALID_VALUE ;  /** RETURN VALUE AS NOT VALID **/
		break ;
	} 
	
	return en_a_valstate ; /** RETURN THE FINAL STATE OF THE FUNCTION */
}
 736:	08 95       	ret

00000738 <DIO_readpin>:
/******************************************************************/
PinRead_t DIO_readpin(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t* u8_a_val)
{
	PinRead_t en_a_Pinstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
	
	switch(u8_a_portid)  /** SWITCH CASE ON PORT ID **/
 738:	81 30       	cpi	r24, 0x01	; 1
 73a:	99 f0       	breq	.+38     	; 0x762 <DIO_readpin+0x2a>
 73c:	28 f0       	brcs	.+10     	; 0x748 <DIO_readpin+0x10>
 73e:	82 30       	cpi	r24, 0x02	; 2
 740:	e9 f0       	breq	.+58     	; 0x77c <DIO_readpin+0x44>
 742:	83 30       	cpi	r24, 0x03	; 3
 744:	41 f1       	breq	.+80     	; 0x796 <DIO_readpin+0x5e>
 746:	34 c0       	rjmp	.+104    	; 0x7b0 <DIO_readpin+0x78>
	{
		case DIO_PORTA:               /** PORTA  **/
		*u8_a_val = get_bit(PINA , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
 748:	89 b3       	in	r24, 0x19	; 25
 74a:	90 e0       	ldi	r25, 0x00	; 0
 74c:	02 c0       	rjmp	.+4      	; 0x752 <DIO_readpin+0x1a>
 74e:	95 95       	asr	r25
 750:	87 95       	ror	r24
 752:	6a 95       	dec	r22
 754:	e2 f7       	brpl	.-8      	; 0x74e <DIO_readpin+0x16>
 756:	81 70       	andi	r24, 0x01	; 1
 758:	89 bb       	out	0x19, r24	; 25
 75a:	fa 01       	movw	r30, r20
 75c:	80 83       	st	Z, r24
/* INPUT   : u8_a_portid , PINID , POINTER TO SET THE VALUE IN IT      */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_readpin(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t* u8_a_val)
{
	PinRead_t en_a_Pinstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
 75e:	80 e0       	ldi	r24, 0x00	; 0
	
	switch(u8_a_portid)  /** SWITCH CASE ON PORT ID **/
	{
		case DIO_PORTA:               /** PORTA  **/
		*u8_a_val = get_bit(PINA , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
 760:	08 95       	ret
		
		case DIO_PORTB:               /** PORTB  **/
		*u8_a_val = get_bit(PINB , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
 762:	86 b3       	in	r24, 0x16	; 22
 764:	90 e0       	ldi	r25, 0x00	; 0
 766:	02 c0       	rjmp	.+4      	; 0x76c <DIO_readpin+0x34>
 768:	95 95       	asr	r25
 76a:	87 95       	ror	r24
 76c:	6a 95       	dec	r22
 76e:	e2 f7       	brpl	.-8      	; 0x768 <DIO_readpin+0x30>
 770:	81 70       	andi	r24, 0x01	; 1
 772:	86 bb       	out	0x16, r24	; 22
 774:	fa 01       	movw	r30, r20
 776:	80 83       	st	Z, r24
/* INPUT   : u8_a_portid , PINID , POINTER TO SET THE VALUE IN IT      */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_readpin(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t* u8_a_val)
{
	PinRead_t en_a_Pinstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
 778:	80 e0       	ldi	r24, 0x00	; 0
		*u8_a_val = get_bit(PINA , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
		
		case DIO_PORTB:               /** PORTB  **/
		*u8_a_val = get_bit(PINB , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
 77a:	08 95       	ret
		
		case DIO_PORTC:               /** PORTC  **/
		*u8_a_val = get_bit(PINC , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
 77c:	83 b3       	in	r24, 0x13	; 19
 77e:	90 e0       	ldi	r25, 0x00	; 0
 780:	02 c0       	rjmp	.+4      	; 0x786 <DIO_readpin+0x4e>
 782:	95 95       	asr	r25
 784:	87 95       	ror	r24
 786:	6a 95       	dec	r22
 788:	e2 f7       	brpl	.-8      	; 0x782 <DIO_readpin+0x4a>
 78a:	81 70       	andi	r24, 0x01	; 1
 78c:	83 bb       	out	0x13, r24	; 19
 78e:	fa 01       	movw	r30, r20
 790:	80 83       	st	Z, r24
/* INPUT   : u8_a_portid , PINID , POINTER TO SET THE VALUE IN IT      */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_readpin(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t* u8_a_val)
{
	PinRead_t en_a_Pinstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
 792:	80 e0       	ldi	r24, 0x00	; 0
		*u8_a_val = get_bit(PINB , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
		
		case DIO_PORTC:               /** PORTC  **/
		*u8_a_val = get_bit(PINC , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
 794:	08 95       	ret
		
		case DIO_PORTD:               /** PORTD  **/
		*u8_a_val = get_bit(PIND , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
 796:	80 b3       	in	r24, 0x10	; 16
 798:	90 e0       	ldi	r25, 0x00	; 0
 79a:	02 c0       	rjmp	.+4      	; 0x7a0 <DIO_readpin+0x68>
 79c:	95 95       	asr	r25
 79e:	87 95       	ror	r24
 7a0:	6a 95       	dec	r22
 7a2:	e2 f7       	brpl	.-8      	; 0x79c <DIO_readpin+0x64>
 7a4:	81 70       	andi	r24, 0x01	; 1
 7a6:	80 bb       	out	0x10, r24	; 16
 7a8:	fa 01       	movw	r30, r20
 7aa:	80 83       	st	Z, r24
/* INPUT   : u8_a_portid , PINID , POINTER TO SET THE VALUE IN IT      */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_readpin(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t* u8_a_val)
{
	PinRead_t en_a_Pinstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
 7ac:	80 e0       	ldi	r24, 0x00	; 0
		*u8_a_val = get_bit(PINC , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
		
		case DIO_PORTD:               /** PORTD  **/
		*u8_a_val = get_bit(PIND , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
 7ae:	08 95       	ret
		
		default:
		en_a_Pinstate = NOT_VALID_READ ;  /** READ IS NOT VALID  **/
 7b0:	81 e0       	ldi	r24, 0x01	; 1
		break;
	} 
	
	return en_a_Pinstate ; /** RETURN THE FINAL STATE OF THE FUNCTION **/	
}
 7b2:	08 95       	ret

000007b4 <TWI_init>:
    /** Wait for TWINT flag set in TWCR Register (start bit is send successfully) **/
    while(BIT_IS_CLEAR(TWCR,TWINT));
	
    /** READ DATA **/
    return TWDR;
}
 7b4:	82 e0       	ldi	r24, 0x02	; 2
 7b6:	80 b9       	out	0x00, r24	; 0
 7b8:	11 b8       	out	0x01, r1	; 1
 7ba:	84 e0       	ldi	r24, 0x04	; 4
 7bc:	86 bf       	out	0x36, r24	; 54
 7be:	08 95       	ret

000007c0 <TWI_start>:
 7c0:	84 ea       	ldi	r24, 0xA4	; 164
 7c2:	86 bf       	out	0x36, r24	; 54
 7c4:	06 b6       	in	r0, 0x36	; 54
 7c6:	07 fe       	sbrs	r0, 7
 7c8:	fd cf       	rjmp	.-6      	; 0x7c4 <TWI_start+0x4>
 7ca:	08 95       	ret

000007cc <TWI_readwithnack>:
	/************************************************/
	/* CLEAR THE TWINT FLAG                        **/
	/* DISABLE ACK BIT AFTER READING THE DATA      **/
	/* ENABLE TWI MODULE                           **/
	/************************************************/
	TWCR = (1 << TWINT) | (1 << TWEN) ;
 7cc:	84 e8       	ldi	r24, 0x84	; 132
 7ce:	86 bf       	out	0x36, r24	; 54
	
	/** Wait for TWINT flag set in TWCR Register (start bit is send successfully) **/
	while(BIT_IS_CLEAR(TWCR,TWINT));
 7d0:	06 b6       	in	r0, 0x36	; 54
 7d2:	07 fe       	sbrs	r0, 7
 7d4:	fd cf       	rjmp	.-6      	; 0x7d0 <TWI_readwithnack+0x4>
	
	/** READ DATA **/
	return TWDR;
 7d6:	83 b1       	in	r24, 0x03	; 3
}
 7d8:	08 95       	ret

000007da <TWI_write>:
/** RETURNS   : VOID                                    **/
/*********************************************************/
void TWI_write(uint8_t u8_a_data)
{
	/** PREPARE DATA FOR SENDING **/
    TWDR = u8_a_data;
 7da:	83 b9       	out	0x03, r24	; 3
    
	/***************************************/ 
	/** CLEAR THE TWINT FLAG              **/
	/** ENABLE TWI MODULE                 **/
	/***************************************/ 
    TWCR = (1 << TWINT) | (1 << TWEN);
 7dc:	84 e8       	ldi	r24, 0x84	; 132
 7de:	86 bf       	out	0x36, r24	; 54
	
    /** Wait for TWINT flag set in TWCR Register (start bit is send successfully) **/
    while(BIT_IS_CLEAR(TWCR,TWINT));
 7e0:	06 b6       	in	r0, 0x36	; 54
 7e2:	07 fe       	sbrs	r0, 7
 7e4:	fd cf       	rjmp	.-6      	; 0x7e0 <TWI_write+0x6>
}
 7e6:	08 95       	ret

000007e8 <TWI_stop>:
	/****************************************/ 
	/** CLEAR THE TWINT FLAG               **/
	/** SEND STIOP BIT EVENT               **/
	/** ENABLE TWI MODULE                  **/
	/****************************************/
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
 7e8:	84 e9       	ldi	r24, 0x94	; 148
 7ea:	86 bf       	out	0x36, r24	; 54
 7ec:	08 95       	ret

000007ee <TWI_getstatus>:
uint8_t TWI_getstatus(void)
{
	uint8_t u8_a_status ; /** VARIABLE TO HOLD THE STATUS CODE VALUE **/
	
	/** MASKING THE FIRST THREE BITS TO GET THE LAST 5 BITS ONLY **/
	u8_a_status = TWSR & 0xF8;
 7ee:	81 b1       	in	r24, 0x01	; 1
	
	return u8_a_status;
 7f0:	88 7f       	andi	r24, 0xF8	; 248
 7f2:	08 95       	ret

000007f4 <SPI_initmaster>:
{
	while( (SPI->SPSR &  (1 << 7)) == 0); /** WAIT UNTILL THE RECEIPTION FLAG RAISED **/
	
	*u8_a_recdata = SPI->SPDR ; /** SAVE THE DATA FROM SPDR **/
	
}
 7f4:	41 e0       	ldi	r20, 0x01	; 1
 7f6:	64 e0       	ldi	r22, 0x04	; 4
 7f8:	81 e0       	ldi	r24, 0x01	; 1
 7fa:	0e 94 9e 02 	call	0x53c	; 0x53c <DIO_setpindir>
 7fe:	41 e0       	ldi	r20, 0x01	; 1
 800:	65 e0       	ldi	r22, 0x05	; 5
 802:	81 e0       	ldi	r24, 0x01	; 1
 804:	0e 94 9e 02 	call	0x53c	; 0x53c <DIO_setpindir>
 808:	40 e0       	ldi	r20, 0x00	; 0
 80a:	66 e0       	ldi	r22, 0x06	; 6
 80c:	81 e0       	ldi	r24, 0x01	; 1
 80e:	0e 94 9e 02 	call	0x53c	; 0x53c <DIO_setpindir>
 812:	41 e0       	ldi	r20, 0x01	; 1
 814:	67 e0       	ldi	r22, 0x07	; 7
 816:	81 e0       	ldi	r24, 0x01	; 1
 818:	0e 94 9e 02 	call	0x53c	; 0x53c <DIO_setpindir>
 81c:	8d b1       	in	r24, 0x0d	; 13
 81e:	81 60       	ori	r24, 0x01	; 1
 820:	8d b9       	out	0x0d, r24	; 13
 822:	8d b1       	in	r24, 0x0d	; 13
 824:	82 60       	ori	r24, 0x02	; 2
 826:	8d b9       	out	0x0d, r24	; 13
 828:	8e b1       	in	r24, 0x0e	; 14
 82a:	8e 7f       	andi	r24, 0xFE	; 254
 82c:	8e b9       	out	0x0e, r24	; 14
 82e:	8e b1       	in	r24, 0x0e	; 14
 830:	8e 7f       	andi	r24, 0xFE	; 254
 832:	8e b9       	out	0x0e, r24	; 14
 834:	8d b1       	in	r24, 0x0d	; 13
 836:	8f 77       	andi	r24, 0x7F	; 127
 838:	8d b9       	out	0x0d, r24	; 13
 83a:	8d b1       	in	r24, 0x0d	; 13
 83c:	8f 7d       	andi	r24, 0xDF	; 223
 83e:	8d b9       	out	0x0d, r24	; 13
 840:	8d b1       	in	r24, 0x0d	; 13
 842:	87 7f       	andi	r24, 0xF7	; 247
 844:	8d b9       	out	0x0d, r24	; 13
 846:	8d b1       	in	r24, 0x0d	; 13
 848:	8b 7f       	andi	r24, 0xFB	; 251
 84a:	8d b9       	out	0x0d, r24	; 13
 84c:	8d b1       	in	r24, 0x0d	; 13
 84e:	80 61       	ori	r24, 0x10	; 16
 850:	8d b9       	out	0x0d, r24	; 13
 852:	8d b1       	in	r24, 0x0d	; 13
 854:	80 64       	ori	r24, 0x40	; 64
 856:	8d b9       	out	0x0d, r24	; 13
 858:	08 95       	ret

0000085a <SPI_masterinittransmit>:
 85a:	40 e0       	ldi	r20, 0x00	; 0
 85c:	64 e0       	ldi	r22, 0x04	; 4
 85e:	81 e0       	ldi	r24, 0x01	; 1
 860:	0e 94 1d 03 	call	0x63a	; 0x63a <DIO_setpinvalue>
 864:	08 95       	ret

00000866 <SPI_masterendtransmit>:
 866:	41 e0       	ldi	r20, 0x01	; 1
 868:	64 e0       	ldi	r22, 0x04	; 4
 86a:	81 e0       	ldi	r24, 0x01	; 1
 86c:	0e 94 1d 03 	call	0x63a	; 0x63a <DIO_setpinvalue>
 870:	08 95       	ret

00000872 <SPI_sendbyte>:
 872:	8f b9       	out	0x0f, r24	; 15
 874:	77 9b       	sbis	0x0e, 7	; 14
 876:	fe cf       	rjmp	.-4      	; 0x874 <SPI_sendbyte+0x2>
 878:	08 95       	ret

0000087a <SPI_sendstring>:
/** FUNCTION FOR MASTER TO SEND STRING                          **/
/** ARGUMENTS  : u8_a_str (string)                              **/
/** RETURNS    : en_a_spierrstatus                              **/
/*****************************************************************/
en_a_spierrstatus SPI_sendstring(const uint8_t * u8_a_str)
{
 87a:	0f 93       	push	r16
 87c:	1f 93       	push	r17
 87e:	cf 93       	push	r28
 880:	8c 01       	movw	r16, r24
	uint8_t u8_L_counter = 0 ; /** COUNTER FOR STRING LETTERS **/
 882:	c0 e0       	ldi	r28, 0x00	; 0
	
	while (u8_a_str[u8_L_counter] != '\0')
 884:	03 c0       	rjmp	.+6      	; 0x88c <SPI_sendstring+0x12>
	{
		SPI_sendbyte(u8_a_str[u8_L_counter]); /** SEND CHARACTER **/
 886:	0e 94 39 04 	call	0x872	; 0x872 <SPI_sendbyte>
		
		u8_L_counter++; /* MOVE TO THE SECOND LETTER */
 88a:	cf 5f       	subi	r28, 0xFF	; 255
/*****************************************************************/
en_a_spierrstatus SPI_sendstring(const uint8_t * u8_a_str)
{
	uint8_t u8_L_counter = 0 ; /** COUNTER FOR STRING LETTERS **/
	
	while (u8_a_str[u8_L_counter] != '\0')
 88c:	f8 01       	movw	r30, r16
 88e:	ec 0f       	add	r30, r28
 890:	f1 1d       	adc	r31, r1
 892:	80 81       	ld	r24, Z
 894:	81 11       	cpse	r24, r1
 896:	f7 cf       	rjmp	.-18     	; 0x886 <SPI_sendstring+0xc>
	{
		SPI_sendbyte(u8_a_str[u8_L_counter]); /** SEND CHARACTER **/
		
		u8_L_counter++; /* MOVE TO THE SECOND LETTER */
	}
}
 898:	cf 91       	pop	r28
 89a:	1f 91       	pop	r17
 89c:	0f 91       	pop	r16
 89e:	08 95       	ret

000008a0 <TMR0_init>:
	 /* TIMER MODE OF TMR0 */
	#elif TIMER0_CLK_SRC == INTERNAL_CLK_SRC
	
	 #if TIMER0_MODE == TMR0_NORMAL_MODE
	 
	 clear_bit(TCCR0 , 7);
 8a0:	83 b7       	in	r24, 0x33	; 51
 8a2:	8f 77       	andi	r24, 0x7F	; 127
 8a4:	83 bf       	out	0x33, r24	; 51
	 clear_bit(TCCR0 , 6);
 8a6:	83 b7       	in	r24, 0x33	; 51
 8a8:	8f 7b       	andi	r24, 0xBF	; 191
 8aa:	83 bf       	out	0x33, r24	; 51
	 clear_bit(TCCR0 , 3);
 8ac:	83 b7       	in	r24, 0x33	; 51
 8ae:	87 7f       	andi	r24, 0xF7	; 247
 8b0:	83 bf       	out	0x33, r24	; 51
	 clear_bit(TCCR0 , 4);
 8b2:	83 b7       	in	r24, 0x33	; 51
 8b4:	8f 7e       	andi	r24, 0xEF	; 239
 8b6:	83 bf       	out	0x33, r24	; 51
	 clear_bit(TCCR0 , 5);
 8b8:	83 b7       	in	r24, 0x33	; 51
 8ba:	8f 7d       	andi	r24, 0xDF	; 223
 8bc:	83 bf       	out	0x33, r24	; 51
	  #endif
	 #endif
	#endif
	
	return en_a_initstatus ; /** RETURN THE STATUS OF INITIALIZATION **/
}
 8be:	80 e0       	ldi	r24, 0x00	; 0
 8c0:	08 95       	ret

000008c2 <TMR0_start>:
{
	TMR0_start_error en_a_startstatus = VALID_START ; /** VARIABLE TO RETURN THE STATUS OF START **/
	
	#if TIMER0_PRESCALER_VAL == PRESCALER_1024
	
	set_bit(TCCR0 , 0);
 8c2:	83 b7       	in	r24, 0x33	; 51
 8c4:	81 60       	ori	r24, 0x01	; 1
 8c6:	83 bf       	out	0x33, r24	; 51
	clear_bit(TCCR0 , 1);
 8c8:	83 b7       	in	r24, 0x33	; 51
 8ca:	8d 7f       	andi	r24, 0xFD	; 253
 8cc:	83 bf       	out	0x33, r24	; 51
	set_bit(TCCR0 , 2);
 8ce:	83 b7       	in	r24, 0x33	; 51
 8d0:	84 60       	ori	r24, 0x04	; 4
 8d2:	83 bf       	out	0x33, r24	; 51
	en_a_startstatus = VALID_START ; /** START DONE PROBERLY **/
	
	#endif
	
	return en_a_startstatus ; /** RETURN THE STATUS **/
}
 8d4:	80 e0       	ldi	r24, 0x00	; 0
 8d6:	08 95       	ret

000008d8 <TMR0_stop>:
TMR0_stop_error TMR0_stop(void)
{
	TMR0_stop_error en_a_stopStatus = VALID_STOP ; /** VARIABLE TO RETURN THE STATUS **/
	
	/** SET CONFIGURATIONS AS NO CLOCK SOURCE **/
	clear_bit(TCCR0 , 0);
 8d8:	83 b7       	in	r24, 0x33	; 51
 8da:	8e 7f       	andi	r24, 0xFE	; 254
 8dc:	83 bf       	out	0x33, r24	; 51
	clear_bit(TCCR0 , 1);
 8de:	83 b7       	in	r24, 0x33	; 51
 8e0:	8d 7f       	andi	r24, 0xFD	; 253
 8e2:	83 bf       	out	0x33, r24	; 51
	clear_bit(TCCR0 , 2);
 8e4:	83 b7       	in	r24, 0x33	; 51
 8e6:	8b 7f       	andi	r24, 0xFB	; 251
 8e8:	83 bf       	out	0x33, r24	; 51
	
	en_a_stopStatus = VALID_STOP ; /** STOP DONE PROPERLY **/
	
	return en_a_stopStatus ; /** RETURN THE STATUS **/
	
}
 8ea:	80 e0       	ldi	r24, 0x00	; 0
 8ec:	08 95       	ret

000008ee <TMR0_delayms>:
	/******************************************************************************************/
	/**               THIS CALCULATIONS CONFIGURED AS F_CPU   16 MHZ                         **/
	/******************************************************************************************/
	#if TIMER0_PRESCALER_VAL == PRESCALER_1024  /** CHECK THE PRESCALLER FROM CONFIG FILE **/
	 
        u32_gs_tmr0nuofovs = (u32_a_delayms / 16.384);   /** CALCULATING NUMBER OF OVERFLOWS ( DESIRED DELAY / TIME OF OVER FLOW ) **/ 
 8ee:	0e 94 bf 05 	call	0xb7e	; 0xb7e <__floatunsisf>
 8f2:	2f e6       	ldi	r18, 0x6F	; 111
 8f4:	32 e1       	ldi	r19, 0x12	; 18
 8f6:	43 e8       	ldi	r20, 0x83	; 131
 8f8:	51 e4       	ldi	r21, 0x41	; 65
 8fa:	0e 94 1e 05 	call	0xa3c	; 0xa3c <__divsf3>
 8fe:	0e 94 90 05 	call	0xb20	; 0xb20 <__fixunssfsi>
 902:	60 93 26 02 	sts	0x0226, r22	; 0x800226 <u32_gs_tmr0nuofovs>
 906:	70 93 27 02 	sts	0x0227, r23	; 0x800227 <u32_gs_tmr0nuofovs+0x1>
 90a:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <u32_gs_tmr0nuofovs+0x2>
 90e:	90 93 29 02 	sts	0x0229, r25	; 0x800229 <u32_gs_tmr0nuofovs+0x3>
	
        TCNT0 = 0 ;   /** SET THE INITIAL VALUE IN TCNT0 REGISTER **/
 912:	12 be       	out	0x32, r1	; 50
	
	    en_a_delaystatus = VALID_DELAY ; /** VALID DELAY CONFIGURATIN **/
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
 914:	0e 94 61 04 	call	0x8c2	; 0x8c2 <TMR0_start>
/** RETURNS    : TMR0_delay                                                    */
/*******************************************************************************/
TMR0_delay_error TMR0_delayms(uint32_t u32_a_delayms)
{
	
	uint32_t u32_a_overflowcounter = 0 ;
 918:	40 e0       	ldi	r20, 0x00	; 0
 91a:	50 e0       	ldi	r21, 0x00	; 0
 91c:	ba 01       	movw	r22, r20
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
	
	while ( u32_a_overflowcounter < u32_gs_tmr0nuofovs ) /** STUCK IN THIS LOOP UNTILL THIS CONDITION IS FALSE **/
 91e:	0a c0       	rjmp	.+20     	; 0x934 <TMR0_delayms+0x46>
	{
		while((TIFR & (1 << 0)) == 0); /** DO NOTHING UNTILL THIS FLAG RAISED (OVERFLOW HAPPENED) **/
 920:	08 b6       	in	r0, 0x38	; 56
 922:	00 fe       	sbrs	r0, 0
 924:	fd cf       	rjmp	.-6      	; 0x920 <TMR0_delayms+0x32>
		
		set_bit(TIFR , 0);        /** CLEAR THE FLAG BY SOFTWARE **/
 926:	88 b7       	in	r24, 0x38	; 56
 928:	81 60       	ori	r24, 0x01	; 1
 92a:	88 bf       	out	0x38, r24	; 56
		
		u32_a_overflowcounter++ ; /** INCREASE THE OVERFLOWS BY ONE **/
 92c:	4f 5f       	subi	r20, 0xFF	; 255
 92e:	5f 4f       	sbci	r21, 0xFF	; 255
 930:	6f 4f       	sbci	r22, 0xFF	; 255
 932:	7f 4f       	sbci	r23, 0xFF	; 255
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
	
	while ( u32_a_overflowcounter < u32_gs_tmr0nuofovs ) /** STUCK IN THIS LOOP UNTILL THIS CONDITION IS FALSE **/
 934:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <u32_gs_tmr0nuofovs>
 938:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <u32_gs_tmr0nuofovs+0x1>
 93c:	a0 91 28 02 	lds	r26, 0x0228	; 0x800228 <u32_gs_tmr0nuofovs+0x2>
 940:	b0 91 29 02 	lds	r27, 0x0229	; 0x800229 <u32_gs_tmr0nuofovs+0x3>
 944:	48 17       	cp	r20, r24
 946:	59 07       	cpc	r21, r25
 948:	6a 07       	cpc	r22, r26
 94a:	7b 07       	cpc	r23, r27
 94c:	48 f3       	brcs	.-46     	; 0x920 <TMR0_delayms+0x32>
		set_bit(TIFR , 0);        /** CLEAR THE FLAG BY SOFTWARE **/
		
		u32_a_overflowcounter++ ; /** INCREASE THE OVERFLOWS BY ONE **/
	}
	
	u32_gs_tmr0nuofovs = 0 ; /** REINTIALIZE THE OVERFLOWS COUNTER TO 0 AGAIN **/
 94e:	10 92 26 02 	sts	0x0226, r1	; 0x800226 <u32_gs_tmr0nuofovs>
 952:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <u32_gs_tmr0nuofovs+0x1>
 956:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <u32_gs_tmr0nuofovs+0x2>
 95a:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <u32_gs_tmr0nuofovs+0x3>

	TMR0_stop();   /** STOP TMR0 TOSTART FROM 0 WHEN IT CALLED AGAIN **/
 95e:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <TMR0_stop>
	
	return en_a_delaystatus ; /** RETURN THE STATUS **/
}
 962:	80 e0       	ldi	r24, 0x00	; 0
 964:	08 95       	ret

00000966 <UART_init>:
/** RETURNS   : uart_errorstatus                             **/
/**************************************************************/
uart_errorstatus UART_init(void)
{
		/** SET DIRECTIONS OF TX AND RX PINS **/
		DIO_setpindir(DIO_PORTD , DIO_PIN1 , DIO_PIN_OUTPUT);  /** SET TX PIN AS OUTPUT **/
 966:	41 e0       	ldi	r20, 0x01	; 1
 968:	61 e0       	ldi	r22, 0x01	; 1
 96a:	83 e0       	ldi	r24, 0x03	; 3
 96c:	0e 94 9e 02 	call	0x53c	; 0x53c <DIO_setpindir>
		DIO_setpindir(DIO_PORTD , DIO_PIN0 , DIO_PIN_INPUT);   /** SET RX PIN AS INPUT  **/
 970:	40 e0       	ldi	r20, 0x00	; 0
 972:	60 e0       	ldi	r22, 0x00	; 0
 974:	83 e0       	ldi	r24, 0x03	; 3
 976:	0e 94 9e 02 	call	0x53c	; 0x53c <DIO_setpindir>
// 		UBRRH = 0 ;
		
		#if BAUDRATE_VALUE == BAUDRATE_9600
		uint32_t u32_a_BRVALUE = 0; /** VARIABLE TO HOLD THE VALUE TO BE STORED IN UBRRL **/
		u32_a_BRVALUE = ((80000) / (16 * 96)) - 1; /** CALCULATE THE UBRRL VALUE **/
		UBRRL = u32_a_BRVALUE;       /** ASSIGN UBRRL **/
 97a:	83 e3       	ldi	r24, 0x33	; 51
 97c:	89 b9       	out	0x09, r24	; 9
		u32_a_BRVALUE = ((16000000) / (16 * 115200)) - 1; /** CALCULATE THE UBRRL VALUE **/
		UBRRL = u32_a_BRVALUE ;       /** ASSIGN UBRRL **/
		#endif
		
		/** ENABLE TRANSMISSION AND RECEIVING **/
		set_bit(UCSRB , 3);
 97e:	8a b1       	in	r24, 0x0a	; 10
 980:	88 60       	ori	r24, 0x08	; 8
 982:	8a b9       	out	0x0a, r24	; 10
		set_bit(UCSRB , 4);
 984:	8a b1       	in	r24, 0x0a	; 10
 986:	80 61       	ori	r24, 0x10	; 16
 988:	8a b9       	out	0x0a, r24	; 10
		
		/** SELECT THE FIRST BIT TO WRITE TO THE UCSRC REGISTER **/
 		set_bit(UCSRC , 7);
 98a:	80 b5       	in	r24, 0x20	; 32
 98c:	80 68       	ori	r24, 0x80	; 128
 98e:	80 bd       	out	0x20, r24	; 32
		clear_bit(UCSRC , 1);
		set_bit(UCSRC , 2);
		clear_bit(UCSRB , 2);
		
		#elif CHARACTER_SIZE == CHAR_SIZE_8BIT
		set_bit(UCSRC , 1);
 990:	80 b5       	in	r24, 0x20	; 32
 992:	82 60       	ori	r24, 0x02	; 2
 994:	80 bd       	out	0x20, r24	; 32
		set_bit(UCSRC , 2);
 996:	80 b5       	in	r24, 0x20	; 32
 998:	84 60       	ori	r24, 0x04	; 4
 99a:	80 bd       	out	0x20, r24	; 32
		clear_bit(UCSRB , 2);
 99c:	8a b1       	in	r24, 0x0a	; 10
 99e:	8b 7f       	andi	r24, 0xFB	; 251
 9a0:	8a b9       	out	0x0a, r24	; 10
		set_bit(UCSRB , 2);
		#endif
		
		
		#if PARITY_BIT_MODE == DISABLE_PARITY_BIT
		clear_bit(UCSRC , 4);
 9a2:	80 b5       	in	r24, 0x20	; 32
 9a4:	8f 7e       	andi	r24, 0xEF	; 239
 9a6:	80 bd       	out	0x20, r24	; 32
		clear_bit(UCSRC , 5);
 9a8:	80 b5       	in	r24, 0x20	; 32
 9aa:	8f 7d       	andi	r24, 0xDF	; 223
 9ac:	80 bd       	out	0x20, r24	; 32
		set_bit(UCSRC , 4);
		set_bit(UCSRC , 5);
		#endif
		
		#if STOP_BITS == ONE_STOP_BIT
		clear_bit(UCSRC , 3);
 9ae:	80 b5       	in	r24, 0x20	; 32
 9b0:	87 7f       	andi	r24, 0xF7	; 247
 9b2:	80 bd       	out	0x20, r24	; 32
		set_bit(UCSRC , 3);
		#endif
		
		/** SET THE UART SYNCRONYZATION MODE **/
		#if UART_MODE == ASYNCRONOUS_MODE
		    clear_bit(UCSRC , 6);
 9b4:	80 b5       	in	r24, 0x20	; 32
 9b6:	8f 7b       	andi	r24, 0xBF	; 191
 9b8:	80 bd       	out	0x20, r24	; 32
		
		#if DOUBLE_SPEED_MODE == ENABLE_DOUBLE_SPEED_MODE
		    set_bit(UCSRA , 1);
		
		#elif DOUBLE_SPEED_MODE == DISABLE_DOUBLE_SPEED_MODE
		     clear_bit(UCSRA , 1);
 9ba:	8b b1       	in	r24, 0x0b	; 11
 9bc:	8d 7f       	andi	r24, 0xFD	; 253
 9be:	8b b9       	out	0x0b, r24	; 11
		
		#if MULTI_PROCESSOR_MODE == ENABLE_MULTIPROCESSOR_MODE
		    set_bit(UCSRA , 0);
		
		#elif MULTI_PROCESSOR_MODE == DISABLE_MULTIPROCESSOR_MODE
		     clear_bit(UCSRA , 0);
 9c0:	8b b1       	in	r24, 0x0b	; 11
 9c2:	8e 7f       	andi	r24, 0xFE	; 254
 9c4:	8b b9       	out	0x0b, r24	; 11
		
		#if RECEIVING_INTERRUPT == ENABLE_RECEIVING_INTERRUPT
     		set_bit(UCSRB , 7);
		
		#elif RECEIVING_INTERRUPT == DISABLE_RECEIVING_INTERRUPT	
		      clear_bit(UCSRB , 7);
 9c6:	8a b1       	in	r24, 0x0a	; 10
 9c8:	8f 77       	andi	r24, 0x7F	; 127
 9ca:	8a b9       	out	0x0a, r24	; 10

		#if TRANSMITTING_INTERRUPT == ENABLE_TRANSMITTING_INTERRUPT
     		set_bit(UCSRB , 6);
		
		#elif TRANSMITTING_INTERRUPT == DISABLE_TRANSMITTING_INTERRUPT	
		    clear_bit(UCSRB , 6);
 9cc:	8a b1       	in	r24, 0x0a	; 10
 9ce:	8f 7b       	andi	r24, 0xBF	; 191
 9d0:	8a b9       	out	0x0a, r24	; 10
		
		#if UDR_INTERRUPT == ENABLE_UDR_INTERRUPT
		    set_bit(UCSRB , 5);
		
		#elif UDR_INTERRUPT == DISABLE_UDR_INTERRUPT
		    clear_bit(UCSRB , 5);
 9d2:	8a b1       	in	r24, 0x0a	; 10
 9d4:	8f 7d       	andi	r24, 0xDF	; 223
 9d6:	8a b9       	out	0x0a, r24	; 10
		#endif
		
}
 9d8:	08 95       	ret

000009da <UART_sendchar>:
/** ARGUMENTS : ua_a_data                                    **/
/** RETURNS   : uart_errorstatus                             **/
/**************************************************************/
uart_errorstatus UART_sendchar(uint8_t ua_a_data)
{
	while( ! ( UCSRA & (1 <<5))); /** HOLD HERE UNTILL DATA REGISTER IS EMPTY (DATA SENT) **/
 9da:	5d 9b       	sbis	0x0b, 5	; 11
 9dc:	fe cf       	rjmp	.-4      	; 0x9da <UART_sendchar>
    
	UDR = ua_a_data ; /** STORE THE DATA IN THE UDR BUFFER TO BE SENT **/
 9de:	8c b9       	out	0x0c, r24	; 12
	
}
 9e0:	08 95       	ret

000009e2 <UART_sendstr>:
/** FUNCTION TO SEND STRING VIA UART                         **/
/** ARGUMENTS : ua_a_string                                  **/
/** RETURNS   : uart_errorstatus                             **/
/**************************************************************/
uart_errorstatus UART_sendstr(uint8_t * ua_a_string)
{
 9e2:	0f 93       	push	r16
 9e4:	1f 93       	push	r17
 9e6:	cf 93       	push	r28
 9e8:	8c 01       	movw	r16, r24
	uint8_t u8_a_lettercounter = 0 ; /** LETTERS COUNTER **/
 9ea:	c0 e0       	ldi	r28, 0x00	; 0
		
	while (ua_a_string[u8_a_lettercounter] != '\0')  /** UNTILL THE STRING ISN'T NULL **/
 9ec:	03 c0       	rjmp	.+6      	; 0x9f4 <UART_sendstr+0x12>
	{
		UART_sendchar(ua_a_string[u8_a_lettercounter]); /** SEND THE LETTER USING UART_sendchar **/
 9ee:	0e 94 ed 04 	call	0x9da	; 0x9da <UART_sendchar>
		u8_a_lettercounter++; /** JUMP TO THE NEXT LETTER **/
 9f2:	cf 5f       	subi	r28, 0xFF	; 255
/**************************************************************/
uart_errorstatus UART_sendstr(uint8_t * ua_a_string)
{
	uint8_t u8_a_lettercounter = 0 ; /** LETTERS COUNTER **/
		
	while (ua_a_string[u8_a_lettercounter] != '\0')  /** UNTILL THE STRING ISN'T NULL **/
 9f4:	f8 01       	movw	r30, r16
 9f6:	ec 0f       	add	r30, r28
 9f8:	f1 1d       	adc	r31, r1
 9fa:	80 81       	ld	r24, Z
 9fc:	81 11       	cpse	r24, r1
 9fe:	f7 cf       	rjmp	.-18     	; 0x9ee <UART_sendstr+0xc>
	{
		UART_sendchar(ua_a_string[u8_a_lettercounter]); /** SEND THE LETTER USING UART_sendchar **/
		u8_a_lettercounter++; /** JUMP TO THE NEXT LETTER **/
	}
}
 a00:	cf 91       	pop	r28
 a02:	1f 91       	pop	r17
 a04:	0f 91       	pop	r16
 a06:	08 95       	ret

00000a08 <UART_receivechar>:
/** ARGUMENTS : u8_recdata (POINTER TO STORE THE RECEIVED DATA)    **/
/** RETURNS   : uart_errorstatus                                   **/
/********************************************************************/
uart_errorstatus UART_receivechar(uint8_t * u8_a_recdata)
{
	while( ! (UCSRA & (1 << 7)) ) ; /** WAIT UNTILL THE DATA RECIVE FLAG RAISED **/
 a08:	5f 9b       	sbis	0x0b, 7	; 11
 a0a:	fe cf       	rjmp	.-4      	; 0xa08 <UART_receivechar>
	
	*u8_a_recdata =  UDR ;	/** RETURN THE DATA IN UDR **/
 a0c:	2c b1       	in	r18, 0x0c	; 12
 a0e:	fc 01       	movw	r30, r24
 a10:	20 83       	st	Z, r18
	
	
}
 a12:	08 95       	ret

00000a14 <UART_receivestr>:
/** FUNCTION TO RECEIVE STRING VIA UART                                   **/
/** ARGUMENTS : u8_a_recstring (POINTER TO STORE THE RECEIVED DATA)       **/
/** RETURNS   : uart_errorstatus                                          **/
/***************************************************************************/
uart_errorstatus UART_receivestr(uint8_t * u8_a_recstring)
{
 a14:	0f 93       	push	r16
 a16:	1f 93       	push	r17
 a18:	cf 93       	push	r28
 a1a:	8c 01       	movw	r16, r24
	uint8_t u8_a_lettercounter = 0 ; /** COUNTER TO LETTERS **/
 a1c:	c0 e0       	ldi	r28, 0x00	; 0
	 
	//UART_receivechar(u8_a_recstring[u8_a_lettercounter]) ; /** RECEIVE THE FIRST CHARACTER **/
	
	while (u8_a_recstring[u8_a_lettercounter] != '\0') /** WHILE STRING ISN'T NULL **/
 a1e:	03 c0       	rjmp	.+6      	; 0xa26 <UART_receivestr+0x12>
	{
		
		UART_receivechar(&u8_a_recstring[u8_a_lettercounter]); /** RECEIVE CHARACTER **/
 a20:	0e 94 04 05 	call	0xa08	; 0xa08 <UART_receivechar>
		
		u8_a_lettercounter++ ; /** JUMP TO THE NEXT INDEX **/
 a24:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t u8_a_lettercounter = 0 ; /** COUNTER TO LETTERS **/
	 
	//UART_receivechar(u8_a_recstring[u8_a_lettercounter]) ; /** RECEIVE THE FIRST CHARACTER **/
	
	while (u8_a_recstring[u8_a_lettercounter] != '\0') /** WHILE STRING ISN'T NULL **/
 a26:	c8 01       	movw	r24, r16
 a28:	8c 0f       	add	r24, r28
 a2a:	91 1d       	adc	r25, r1
 a2c:	fc 01       	movw	r30, r24
 a2e:	20 81       	ld	r18, Z
 a30:	21 11       	cpse	r18, r1
 a32:	f6 cf       	rjmp	.-20     	; 0xa20 <UART_receivestr+0xc>
		u8_a_lettercounter++ ; /** JUMP TO THE NEXT INDEX **/
		
	}
	
	//u8_a_recstring[u8_a_lettercounter] = '\0';	/** SET THE LAST CHARACTER TO NULL **/
 a34:	cf 91       	pop	r28
 a36:	1f 91       	pop	r17
 a38:	0f 91       	pop	r16
 a3a:	08 95       	ret

00000a3c <__divsf3>:
 a3c:	0e 94 32 05 	call	0xa64	; 0xa64 <__divsf3x>
 a40:	0c 94 13 06 	jmp	0xc26	; 0xc26 <__fp_round>
 a44:	0e 94 0c 06 	call	0xc18	; 0xc18 <__fp_pscB>
 a48:	58 f0       	brcs	.+22     	; 0xa60 <__divsf3+0x24>
 a4a:	0e 94 05 06 	call	0xc0a	; 0xc0a <__fp_pscA>
 a4e:	40 f0       	brcs	.+16     	; 0xa60 <__divsf3+0x24>
 a50:	29 f4       	brne	.+10     	; 0xa5c <__divsf3+0x20>
 a52:	5f 3f       	cpi	r21, 0xFF	; 255
 a54:	29 f0       	breq	.+10     	; 0xa60 <__divsf3+0x24>
 a56:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__fp_inf>
 a5a:	51 11       	cpse	r21, r1
 a5c:	0c 94 47 06 	jmp	0xc8e	; 0xc8e <__fp_szero>
 a60:	0c 94 02 06 	jmp	0xc04	; 0xc04 <__fp_nan>

00000a64 <__divsf3x>:
 a64:	0e 94 24 06 	call	0xc48	; 0xc48 <__fp_split3>
 a68:	68 f3       	brcs	.-38     	; 0xa44 <__divsf3+0x8>

00000a6a <__divsf3_pse>:
 a6a:	99 23       	and	r25, r25
 a6c:	b1 f3       	breq	.-20     	; 0xa5a <__divsf3+0x1e>
 a6e:	55 23       	and	r21, r21
 a70:	91 f3       	breq	.-28     	; 0xa56 <__divsf3+0x1a>
 a72:	95 1b       	sub	r25, r21
 a74:	55 0b       	sbc	r21, r21
 a76:	bb 27       	eor	r27, r27
 a78:	aa 27       	eor	r26, r26
 a7a:	62 17       	cp	r22, r18
 a7c:	73 07       	cpc	r23, r19
 a7e:	84 07       	cpc	r24, r20
 a80:	38 f0       	brcs	.+14     	; 0xa90 <__divsf3_pse+0x26>
 a82:	9f 5f       	subi	r25, 0xFF	; 255
 a84:	5f 4f       	sbci	r21, 0xFF	; 255
 a86:	22 0f       	add	r18, r18
 a88:	33 1f       	adc	r19, r19
 a8a:	44 1f       	adc	r20, r20
 a8c:	aa 1f       	adc	r26, r26
 a8e:	a9 f3       	breq	.-22     	; 0xa7a <__divsf3_pse+0x10>
 a90:	35 d0       	rcall	.+106    	; 0xafc <__divsf3_pse+0x92>
 a92:	0e 2e       	mov	r0, r30
 a94:	3a f0       	brmi	.+14     	; 0xaa4 <__divsf3_pse+0x3a>
 a96:	e0 e8       	ldi	r30, 0x80	; 128
 a98:	32 d0       	rcall	.+100    	; 0xafe <__divsf3_pse+0x94>
 a9a:	91 50       	subi	r25, 0x01	; 1
 a9c:	50 40       	sbci	r21, 0x00	; 0
 a9e:	e6 95       	lsr	r30
 aa0:	00 1c       	adc	r0, r0
 aa2:	ca f7       	brpl	.-14     	; 0xa96 <__divsf3_pse+0x2c>
 aa4:	2b d0       	rcall	.+86     	; 0xafc <__divsf3_pse+0x92>
 aa6:	fe 2f       	mov	r31, r30
 aa8:	29 d0       	rcall	.+82     	; 0xafc <__divsf3_pse+0x92>
 aaa:	66 0f       	add	r22, r22
 aac:	77 1f       	adc	r23, r23
 aae:	88 1f       	adc	r24, r24
 ab0:	bb 1f       	adc	r27, r27
 ab2:	26 17       	cp	r18, r22
 ab4:	37 07       	cpc	r19, r23
 ab6:	48 07       	cpc	r20, r24
 ab8:	ab 07       	cpc	r26, r27
 aba:	b0 e8       	ldi	r27, 0x80	; 128
 abc:	09 f0       	breq	.+2      	; 0xac0 <__divsf3_pse+0x56>
 abe:	bb 0b       	sbc	r27, r27
 ac0:	80 2d       	mov	r24, r0
 ac2:	bf 01       	movw	r22, r30
 ac4:	ff 27       	eor	r31, r31
 ac6:	93 58       	subi	r25, 0x83	; 131
 ac8:	5f 4f       	sbci	r21, 0xFF	; 255
 aca:	3a f0       	brmi	.+14     	; 0xada <__divsf3_pse+0x70>
 acc:	9e 3f       	cpi	r25, 0xFE	; 254
 ace:	51 05       	cpc	r21, r1
 ad0:	78 f0       	brcs	.+30     	; 0xaf0 <__divsf3_pse+0x86>
 ad2:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__fp_inf>
 ad6:	0c 94 47 06 	jmp	0xc8e	; 0xc8e <__fp_szero>
 ada:	5f 3f       	cpi	r21, 0xFF	; 255
 adc:	e4 f3       	brlt	.-8      	; 0xad6 <__divsf3_pse+0x6c>
 ade:	98 3e       	cpi	r25, 0xE8	; 232
 ae0:	d4 f3       	brlt	.-12     	; 0xad6 <__divsf3_pse+0x6c>
 ae2:	86 95       	lsr	r24
 ae4:	77 95       	ror	r23
 ae6:	67 95       	ror	r22
 ae8:	b7 95       	ror	r27
 aea:	f7 95       	ror	r31
 aec:	9f 5f       	subi	r25, 0xFF	; 255
 aee:	c9 f7       	brne	.-14     	; 0xae2 <__divsf3_pse+0x78>
 af0:	88 0f       	add	r24, r24
 af2:	91 1d       	adc	r25, r1
 af4:	96 95       	lsr	r25
 af6:	87 95       	ror	r24
 af8:	97 f9       	bld	r25, 7
 afa:	08 95       	ret
 afc:	e1 e0       	ldi	r30, 0x01	; 1
 afe:	66 0f       	add	r22, r22
 b00:	77 1f       	adc	r23, r23
 b02:	88 1f       	adc	r24, r24
 b04:	bb 1f       	adc	r27, r27
 b06:	62 17       	cp	r22, r18
 b08:	73 07       	cpc	r23, r19
 b0a:	84 07       	cpc	r24, r20
 b0c:	ba 07       	cpc	r27, r26
 b0e:	20 f0       	brcs	.+8      	; 0xb18 <__divsf3_pse+0xae>
 b10:	62 1b       	sub	r22, r18
 b12:	73 0b       	sbc	r23, r19
 b14:	84 0b       	sbc	r24, r20
 b16:	ba 0b       	sbc	r27, r26
 b18:	ee 1f       	adc	r30, r30
 b1a:	88 f7       	brcc	.-30     	; 0xafe <__divsf3_pse+0x94>
 b1c:	e0 95       	com	r30
 b1e:	08 95       	ret

00000b20 <__fixunssfsi>:
 b20:	0e 94 2c 06 	call	0xc58	; 0xc58 <__fp_splitA>
 b24:	88 f0       	brcs	.+34     	; 0xb48 <__fixunssfsi+0x28>
 b26:	9f 57       	subi	r25, 0x7F	; 127
 b28:	98 f0       	brcs	.+38     	; 0xb50 <__fixunssfsi+0x30>
 b2a:	b9 2f       	mov	r27, r25
 b2c:	99 27       	eor	r25, r25
 b2e:	b7 51       	subi	r27, 0x17	; 23
 b30:	b0 f0       	brcs	.+44     	; 0xb5e <__fixunssfsi+0x3e>
 b32:	e1 f0       	breq	.+56     	; 0xb6c <__fixunssfsi+0x4c>
 b34:	66 0f       	add	r22, r22
 b36:	77 1f       	adc	r23, r23
 b38:	88 1f       	adc	r24, r24
 b3a:	99 1f       	adc	r25, r25
 b3c:	1a f0       	brmi	.+6      	; 0xb44 <__fixunssfsi+0x24>
 b3e:	ba 95       	dec	r27
 b40:	c9 f7       	brne	.-14     	; 0xb34 <__fixunssfsi+0x14>
 b42:	14 c0       	rjmp	.+40     	; 0xb6c <__fixunssfsi+0x4c>
 b44:	b1 30       	cpi	r27, 0x01	; 1
 b46:	91 f0       	breq	.+36     	; 0xb6c <__fixunssfsi+0x4c>
 b48:	0e 94 46 06 	call	0xc8c	; 0xc8c <__fp_zero>
 b4c:	b1 e0       	ldi	r27, 0x01	; 1
 b4e:	08 95       	ret
 b50:	0c 94 46 06 	jmp	0xc8c	; 0xc8c <__fp_zero>
 b54:	67 2f       	mov	r22, r23
 b56:	78 2f       	mov	r23, r24
 b58:	88 27       	eor	r24, r24
 b5a:	b8 5f       	subi	r27, 0xF8	; 248
 b5c:	39 f0       	breq	.+14     	; 0xb6c <__fixunssfsi+0x4c>
 b5e:	b9 3f       	cpi	r27, 0xF9	; 249
 b60:	cc f3       	brlt	.-14     	; 0xb54 <__fixunssfsi+0x34>
 b62:	86 95       	lsr	r24
 b64:	77 95       	ror	r23
 b66:	67 95       	ror	r22
 b68:	b3 95       	inc	r27
 b6a:	d9 f7       	brne	.-10     	; 0xb62 <__fixunssfsi+0x42>
 b6c:	3e f4       	brtc	.+14     	; 0xb7c <__fixunssfsi+0x5c>
 b6e:	90 95       	com	r25
 b70:	80 95       	com	r24
 b72:	70 95       	com	r23
 b74:	61 95       	neg	r22
 b76:	7f 4f       	sbci	r23, 0xFF	; 255
 b78:	8f 4f       	sbci	r24, 0xFF	; 255
 b7a:	9f 4f       	sbci	r25, 0xFF	; 255
 b7c:	08 95       	ret

00000b7e <__floatunsisf>:
 b7e:	e8 94       	clt
 b80:	09 c0       	rjmp	.+18     	; 0xb94 <__floatsisf+0x12>

00000b82 <__floatsisf>:
 b82:	97 fb       	bst	r25, 7
 b84:	3e f4       	brtc	.+14     	; 0xb94 <__floatsisf+0x12>
 b86:	90 95       	com	r25
 b88:	80 95       	com	r24
 b8a:	70 95       	com	r23
 b8c:	61 95       	neg	r22
 b8e:	7f 4f       	sbci	r23, 0xFF	; 255
 b90:	8f 4f       	sbci	r24, 0xFF	; 255
 b92:	9f 4f       	sbci	r25, 0xFF	; 255
 b94:	99 23       	and	r25, r25
 b96:	a9 f0       	breq	.+42     	; 0xbc2 <__floatsisf+0x40>
 b98:	f9 2f       	mov	r31, r25
 b9a:	96 e9       	ldi	r25, 0x96	; 150
 b9c:	bb 27       	eor	r27, r27
 b9e:	93 95       	inc	r25
 ba0:	f6 95       	lsr	r31
 ba2:	87 95       	ror	r24
 ba4:	77 95       	ror	r23
 ba6:	67 95       	ror	r22
 ba8:	b7 95       	ror	r27
 baa:	f1 11       	cpse	r31, r1
 bac:	f8 cf       	rjmp	.-16     	; 0xb9e <__floatsisf+0x1c>
 bae:	fa f4       	brpl	.+62     	; 0xbee <__floatsisf+0x6c>
 bb0:	bb 0f       	add	r27, r27
 bb2:	11 f4       	brne	.+4      	; 0xbb8 <__floatsisf+0x36>
 bb4:	60 ff       	sbrs	r22, 0
 bb6:	1b c0       	rjmp	.+54     	; 0xbee <__floatsisf+0x6c>
 bb8:	6f 5f       	subi	r22, 0xFF	; 255
 bba:	7f 4f       	sbci	r23, 0xFF	; 255
 bbc:	8f 4f       	sbci	r24, 0xFF	; 255
 bbe:	9f 4f       	sbci	r25, 0xFF	; 255
 bc0:	16 c0       	rjmp	.+44     	; 0xbee <__floatsisf+0x6c>
 bc2:	88 23       	and	r24, r24
 bc4:	11 f0       	breq	.+4      	; 0xbca <__floatsisf+0x48>
 bc6:	96 e9       	ldi	r25, 0x96	; 150
 bc8:	11 c0       	rjmp	.+34     	; 0xbec <__floatsisf+0x6a>
 bca:	77 23       	and	r23, r23
 bcc:	21 f0       	breq	.+8      	; 0xbd6 <__floatsisf+0x54>
 bce:	9e e8       	ldi	r25, 0x8E	; 142
 bd0:	87 2f       	mov	r24, r23
 bd2:	76 2f       	mov	r23, r22
 bd4:	05 c0       	rjmp	.+10     	; 0xbe0 <__floatsisf+0x5e>
 bd6:	66 23       	and	r22, r22
 bd8:	71 f0       	breq	.+28     	; 0xbf6 <__floatsisf+0x74>
 bda:	96 e8       	ldi	r25, 0x86	; 134
 bdc:	86 2f       	mov	r24, r22
 bde:	70 e0       	ldi	r23, 0x00	; 0
 be0:	60 e0       	ldi	r22, 0x00	; 0
 be2:	2a f0       	brmi	.+10     	; 0xbee <__floatsisf+0x6c>
 be4:	9a 95       	dec	r25
 be6:	66 0f       	add	r22, r22
 be8:	77 1f       	adc	r23, r23
 bea:	88 1f       	adc	r24, r24
 bec:	da f7       	brpl	.-10     	; 0xbe4 <__floatsisf+0x62>
 bee:	88 0f       	add	r24, r24
 bf0:	96 95       	lsr	r25
 bf2:	87 95       	ror	r24
 bf4:	97 f9       	bld	r25, 7
 bf6:	08 95       	ret

00000bf8 <__fp_inf>:
 bf8:	97 f9       	bld	r25, 7
 bfa:	9f 67       	ori	r25, 0x7F	; 127
 bfc:	80 e8       	ldi	r24, 0x80	; 128
 bfe:	70 e0       	ldi	r23, 0x00	; 0
 c00:	60 e0       	ldi	r22, 0x00	; 0
 c02:	08 95       	ret

00000c04 <__fp_nan>:
 c04:	9f ef       	ldi	r25, 0xFF	; 255
 c06:	80 ec       	ldi	r24, 0xC0	; 192
 c08:	08 95       	ret

00000c0a <__fp_pscA>:
 c0a:	00 24       	eor	r0, r0
 c0c:	0a 94       	dec	r0
 c0e:	16 16       	cp	r1, r22
 c10:	17 06       	cpc	r1, r23
 c12:	18 06       	cpc	r1, r24
 c14:	09 06       	cpc	r0, r25
 c16:	08 95       	ret

00000c18 <__fp_pscB>:
 c18:	00 24       	eor	r0, r0
 c1a:	0a 94       	dec	r0
 c1c:	12 16       	cp	r1, r18
 c1e:	13 06       	cpc	r1, r19
 c20:	14 06       	cpc	r1, r20
 c22:	05 06       	cpc	r0, r21
 c24:	08 95       	ret

00000c26 <__fp_round>:
 c26:	09 2e       	mov	r0, r25
 c28:	03 94       	inc	r0
 c2a:	00 0c       	add	r0, r0
 c2c:	11 f4       	brne	.+4      	; 0xc32 <__fp_round+0xc>
 c2e:	88 23       	and	r24, r24
 c30:	52 f0       	brmi	.+20     	; 0xc46 <__fp_round+0x20>
 c32:	bb 0f       	add	r27, r27
 c34:	40 f4       	brcc	.+16     	; 0xc46 <__fp_round+0x20>
 c36:	bf 2b       	or	r27, r31
 c38:	11 f4       	brne	.+4      	; 0xc3e <__fp_round+0x18>
 c3a:	60 ff       	sbrs	r22, 0
 c3c:	04 c0       	rjmp	.+8      	; 0xc46 <__fp_round+0x20>
 c3e:	6f 5f       	subi	r22, 0xFF	; 255
 c40:	7f 4f       	sbci	r23, 0xFF	; 255
 c42:	8f 4f       	sbci	r24, 0xFF	; 255
 c44:	9f 4f       	sbci	r25, 0xFF	; 255
 c46:	08 95       	ret

00000c48 <__fp_split3>:
 c48:	57 fd       	sbrc	r21, 7
 c4a:	90 58       	subi	r25, 0x80	; 128
 c4c:	44 0f       	add	r20, r20
 c4e:	55 1f       	adc	r21, r21
 c50:	59 f0       	breq	.+22     	; 0xc68 <__fp_splitA+0x10>
 c52:	5f 3f       	cpi	r21, 0xFF	; 255
 c54:	71 f0       	breq	.+28     	; 0xc72 <__fp_splitA+0x1a>
 c56:	47 95       	ror	r20

00000c58 <__fp_splitA>:
 c58:	88 0f       	add	r24, r24
 c5a:	97 fb       	bst	r25, 7
 c5c:	99 1f       	adc	r25, r25
 c5e:	61 f0       	breq	.+24     	; 0xc78 <__fp_splitA+0x20>
 c60:	9f 3f       	cpi	r25, 0xFF	; 255
 c62:	79 f0       	breq	.+30     	; 0xc82 <__fp_splitA+0x2a>
 c64:	87 95       	ror	r24
 c66:	08 95       	ret
 c68:	12 16       	cp	r1, r18
 c6a:	13 06       	cpc	r1, r19
 c6c:	14 06       	cpc	r1, r20
 c6e:	55 1f       	adc	r21, r21
 c70:	f2 cf       	rjmp	.-28     	; 0xc56 <__fp_split3+0xe>
 c72:	46 95       	lsr	r20
 c74:	f1 df       	rcall	.-30     	; 0xc58 <__fp_splitA>
 c76:	08 c0       	rjmp	.+16     	; 0xc88 <__fp_splitA+0x30>
 c78:	16 16       	cp	r1, r22
 c7a:	17 06       	cpc	r1, r23
 c7c:	18 06       	cpc	r1, r24
 c7e:	99 1f       	adc	r25, r25
 c80:	f1 cf       	rjmp	.-30     	; 0xc64 <__fp_splitA+0xc>
 c82:	86 95       	lsr	r24
 c84:	71 05       	cpc	r23, r1
 c86:	61 05       	cpc	r22, r1
 c88:	08 94       	sec
 c8a:	08 95       	ret

00000c8c <__fp_zero>:
 c8c:	e8 94       	clt

00000c8e <__fp_szero>:
 c8e:	bb 27       	eor	r27, r27
 c90:	66 27       	eor	r22, r22
 c92:	77 27       	eor	r23, r23
 c94:	cb 01       	movw	r24, r22
 c96:	97 f9       	bld	r25, 7
 c98:	08 95       	ret

00000c9a <strcmp>:
 c9a:	fb 01       	movw	r30, r22
 c9c:	dc 01       	movw	r26, r24
 c9e:	8d 91       	ld	r24, X+
 ca0:	01 90       	ld	r0, Z+
 ca2:	80 19       	sub	r24, r0
 ca4:	01 10       	cpse	r0, r1
 ca6:	d9 f3       	breq	.-10     	; 0xc9e <strcmp+0x4>
 ca8:	99 0b       	sbc	r25, r25
 caa:	08 95       	ret

00000cac <_exit>:
 cac:	f8 94       	cli

00000cae <__stop_program>:
 cae:	ff cf       	rjmp	.-2      	; 0xcae <__stop_program>
